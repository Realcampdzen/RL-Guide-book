#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import os
import glob
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='[INFO] %(message)s')
logger = logging.getLogger(__name__)

def load_json_file(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON —Ñ–∞–π–ª."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return None

def save_json_file(file_path, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç JSON —Ñ–∞–π–ª."""
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        logger.info(f"üìÑ –§–∞–π–ª {file_path} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")

def update_perfect_parsed_direct():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç perfect_parsed_data.json –Ω–∞–ø—Ä—è–º—É—é —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ ai-data"""
    logger.info("üîÑ –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ perfect_parsed_data.json —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º perfect_parsed_data.json
    perfect_data = load_json_file("perfect_parsed_data.json")
    if not perfect_data:
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ ai-data —Ñ–∞–π–ª—ã
    ai_data_files = []
    for category_dir in glob.glob("ai-data/category-*"):
        for file_path in glob.glob(f"{category_dir}/*.json"):
            if not file_path.endswith("index.json") and not file_path.endswith("MASTER_INDEX.json"):
                ai_data_files.append(file_path)
    
    logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(ai_data_files)} —Ñ–∞–π–ª–æ–≤ –∑–Ω–∞—á–∫–æ–≤")
    
    updated_count = 0
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º ai-data —Ñ–∞–π–ª–∞–º
    for file_path in ai_data_files:
        badge_id = os.path.basename(file_path).replace('.json', '')
        ai_data = load_json_file(file_path)
        
        if not ai_data:
            continue
        
        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–Ω–∞—á–æ–∫ –≤ perfect_parsed_data.json
        badge_found = False
        
        # –ò—â–µ–º –≤ –∫–æ—Ä–Ω–µ–≤–æ–º –ø–æ–ª–µ "badges"
        if 'badges' in perfect_data:
            for badge in perfect_data['badges']:
                if isinstance(badge, dict) and badge.get('id') == badge_id:
                    badge_found = True
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –∏–∑ ai-data
                    fields_to_update = [
                        'description', 'importance', 'skillTips', 'examples', 
                        'philosophy', 'howToBecome', 'nameExplanation'
                    ]
                    
                    for field in fields_to_update:
                        if field in ai_data and ai_data[field]:
                            if badge.get(field) != ai_data[field]:
                                badge[field] = ai_data[field]
                                logger.info(f"  üìù –û–±–Ω–æ–≤–∏–ª {field} –¥–ª—è –∑–Ω–∞—á–∫–∞ {badge_id}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º criteria –∏ confirmation –≤ levels
                    if 'levels' in ai_data and 'levels' in badge:
                        for ai_level in ai_data['levels']:
                            ai_level_id = ai_level.get('id')
                            for perfect_level in badge['levels']:
                                if perfect_level.get('id') == ai_level_id:
                                    # –û–±–Ω–æ–≤–ª—è–µ–º criteria
                                    if 'criteria' in ai_level and ai_level['criteria']:
                                        if perfect_level.get('criteria') != ai_level['criteria']:
                                            perfect_level['criteria'] = ai_level['criteria']
                                            logger.info(f"  üìù –û–±–Ω–æ–≤–∏–ª criteria –¥–ª—è —É—Ä–æ–≤–Ω—è {ai_level_id}")
                                    
                                    # –û–±–Ω–æ–≤–ª—è–µ–º confirmation
                                    if 'confirmation' in ai_level and ai_level['confirmation']:
                                        if perfect_level.get('confirmation') != ai_level['confirmation']:
                                            perfect_level['confirmation'] = ai_level['confirmation']
                                            logger.info(f"  üìù –û–±–Ω–æ–≤–∏–ª confirmation –¥–ª—è —É—Ä–æ–≤–Ω—è {ai_level_id}")
                                    break
                    
                    updated_count += 1
                    break
        
        if not badge_found:
            logger.warning(f"‚ö†Ô∏è –ó–Ω–∞—á–æ–∫ {badge_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ perfect_parsed_data.json")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    save_json_file("perfect_parsed_data.json", perfect_data)
    logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∑–Ω–∞—á–∫–æ–≤ –≤ perfect_parsed_data.json")
    
    return updated_count

if __name__ == "__main__":
    logger.info("üîÑ –ü–†–Ø–ú–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï PERFECT_PARSED_DATA.JSON")
    logger.info("=" * 50)
    
    updated = update_perfect_parsed_direct()
    
    logger.info(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–∫–æ–≤: {updated}")
    logger.info("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    logger.info("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    logger.info("2. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã –≤—Ä—É—á–Ω—É—é")
