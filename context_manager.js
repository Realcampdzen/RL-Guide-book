// –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Vercel
import { dataLoaderAIDataNew } from './data_loader_ai_data_new.js';

// –í –ø–∞–º—è—Ç–∏ —Ö—Ä–∞–Ω–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
const userContexts = new Map();
const conversationHistories = new Map();

export class ContextManager {
  constructor() {
    this.dataLoader = dataLoaderAIDataNew;
  }

  // –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserContext(userId) {
    if (!userContexts.has(userId)) {
      userContexts.set(userId, {
        user_id: userId,
        current_category: null,
        current_badge: null,
        interests: [],
        level: "beginner",
        session_data: {}
      });
    }
    return userContexts.get(userId);
  }

  // –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  updateUserContext(userId, updates) {
    const context = this.getUserContext(userId);
    
    Object.assign(context, updates);
    userContexts.set(userId, context);
    
    return context;
  }

  // –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ–±-–∫–æ–Ω—Ç–µ–∫—Å—Ç
  updateWebContext(userId, webContext) {
    const context = this.getUserContext(userId);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    if (webContext.current_category) {
      context.current_category = webContext.current_category.id || webContext.current_category;
    }
    
    if (webContext.current_badge) {
      const rawBadgeId = webContext.current_badge.id || webContext.current_badge;
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ID –∑–Ω–∞—á–∫–∞: –µ—Å–ª–∏ —ç—Ç–æ —É—Ä–æ–≤–µ–Ω—å –≤–∏–¥–∞ 11.3.2 -> –ø—Ä–∏–≤–æ–¥–∏–º –∫ –±–∞–∑–æ–≤–æ–º—É 11.3
      if (typeof rawBadgeId === 'string' && rawBadgeId.split('.').length >= 3) {
        const parts = rawBadgeId.split('.');
        context.current_badge = parts.slice(0, 2).join('.');
      } else {
        context.current_badge = rawBadgeId;
      }
      
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
      if (webContext.current_badge.category_id) {
        context.current_category = webContext.current_badge.category_id;
      }
    }

    // –ï—Å–ª–∏ –≤–µ–±-–∫–æ–Ω—Ç–µ–∫—Å—Ç —è–≤–Ω–æ –Ω–µ –∑–∞–¥–∞—ë—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é/–∑–Ω–∞—á–æ–∫ ‚Äî –æ—á–∏—â–∞–µ–º
    if (webContext.current_badge === null) {
      context.current_badge = null;
    }
    if (webContext.current_category === null && context.current_badge === null) {
      context.current_category = null;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —ç–∫—Ä–∞–Ω–µ
    context.session_data.current_view = webContext.current_view;
    context.session_data.web_category = webContext.current_category;
    context.session_data.web_badge = webContext.current_badge;
    context.session_data.current_level = webContext.current_level;
    context.session_data.current_level_badge_title = webContext.current_level_badge_title;
    
    userContexts.set(userId, context);
    
    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`);
    console.log(`   üì± –≠–∫—Ä–∞–Ω: ${webContext.current_view}`);
    console.log(`   üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${context.current_category}`);
    console.log(`   üèÜ –ó–Ω–∞—á–æ–∫: ${context.current_badge}`);
    if (webContext.current_level_badge_title) {
      console.log(`   üéØ –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è: ${webContext.current_level_badge_title}`);
    }
    
    return context;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
  detectContextFromMessage(userId, message) {
    const context = this.getUserContext(userId);
    const messageLower = message.toLowerCase();
    
    // –ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –≤–µ–±-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
    if (!context.current_category) {
      const categories = this.dataLoader.getAllCategories();
      for (const category of categories) {
        const categoryTitleLower = category.title.toLowerCase();
        if (categoryTitleLower === messageLower || 
            messageLower.includes(categoryTitleLower) ||
            category.emoji === message ||
            messageLower.includes(`–∫–∞—Ç–µ–≥–æ—Ä–∏—è ${category.id}`) ||
            messageLower.includes(`–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category.id}`)) {
          context.current_category = category.id;
          context.current_badge = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–æ–∫ –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          break;
        }
      }
    }
    
    // –ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–Ω–∞—á–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –≤–µ–±-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
    if (!context.current_badge) {
      const allBadges = this.dataLoader.getAllBadges();
      for (const badge of allBadges) {
        const badgeTitleLower = badge.title.toLowerCase();
        if (badgeTitleLower === messageLower ||
            messageLower.includes(badgeTitleLower) ||
            badge.emoji === message ||
            messageLower.includes(`–∑–Ω–∞—á–æ–∫ ${badge.id}`) ||
            messageLower.includes(`–∑–Ω–∞—á–∫–∞ ${badge.id}`)) {
          context.current_badge = badge.id;
          if (!context.current_category) {
            context.current_category = badge.categoryId;
          }
          break;
        }
      }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const interestKeywords = {
      "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ": ["—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "—Ä–∏—Å–æ–≤–∞–Ω–∏–µ", "–º—É–∑—ã–∫–∞", "—Ç–∞–Ω—Ü—ã", "—Ç–µ–∞—Ç—Ä"],
      "—Å–ø–æ—Ä—Ç": ["—Å–ø–æ—Ä—Ç", "–±–µ–≥", "—Ñ—É—Ç–±–æ–ª", "–ø–ª–∞–≤–∞–Ω–∏–µ", "—Ñ–∏—Ç–Ω–µ—Å"],
      "–Ω–∞—É–∫–∞": ["–Ω–∞—É–∫–∞", "—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã", "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ñ–∏–∑–∏–∫–∞", "—Ö–∏–º–∏—è"],
      "–ø—Ä–∏—Ä–æ–¥–∞": ["–ø—Ä–∏—Ä–æ–¥–∞", "—ç–∫–æ–ª–æ–≥–∏—è", "–∂–∏–≤–æ—Ç–Ω—ã–µ", "—Ä–∞—Å—Ç–µ–Ω–∏—è", "–ª–µ—Å"],
      "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Ä–æ–±–æ—Ç—ã", "–∫–æ–º–ø—å—é—Ç–µ—Ä—ã"],
      "–æ–±—â–µ–Ω–∏–µ": ["–æ–±—â–µ–Ω–∏–µ", "–¥—Ä—É–∂–±–∞", "–∫–æ–º–∞–Ω–¥–∞", "–ª–∏–¥–µ—Ä—Å—Ç–≤–æ", "–ø–æ–º–æ—â—å"]
    };
    
    const detectedInterests = [];
    for (const [interest, keywords] of Object.entries(interestKeywords)) {
      if (keywords.some(keyword => messageLower.includes(keyword))) {
        if (!context.interests.includes(interest)) {
          detectedInterests.push(interest);
        }
      }
    }
    
    if (detectedInterests.length > 0) {
      context.interests.push(...detectedInterests);
      context.interests = [...new Set(context.interests)]; // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    }
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    if (messageLower.includes("–Ω–æ–≤–∏—á–æ–∫") || messageLower.includes("–Ω–∞—á–∏–Ω–∞—é—â–∏–π") || messageLower.includes("–ø–µ—Ä–≤—ã–π —Ä–∞–∑")) {
      context.level = "beginner";
    } else if (messageLower.includes("–æ–ø—ã—Ç–Ω—ã–π") || messageLower.includes("–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π") || messageLower.includes("—É–∂–µ –¥–µ–ª–∞–ª")) {
      context.level = "advanced";
    } else if (messageLower.includes("—ç–∫—Å–ø–µ—Ä—Ç") || messageLower.includes("–º–∞—Å—Ç–µ—Ä") || messageLower.includes("–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª")) {
      context.level = "expert";
    }
    
    userContexts.set(userId, context);
    return context;
  }

  // –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
  getConversationHistory(userId) {
    if (!conversationHistories.has(userId)) {
      conversationHistories.set(userId, []);
    }
    return conversationHistories.get(userId);
  }

  // –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
  addMessageToHistory(userId, message) {
    const history = this.getConversationHistory(userId);
    history.push({
      role: message.role,
      content: message.content,
      timestamp: new Date().toISOString(),
      metadata: message.metadata || {}
    });
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 20 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    if (history.length > 20) {
      history.splice(0, history.length - 20);
    }
    
    conversationHistories.set(userId, history);
  }

  // –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  getPersonalizedRecommendations(userId, limit = 5) {
    const context = this.getUserContext(userId);
    const recommendations = [];
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–∫–∏
    const allBadges = this.dataLoader.getAllBadges();
    
    for (const badge of allBadges) {
      const score = this.calculateBadgeScore(badge, context);
      if (score > 0) {
        recommendations.push({
          badge: badge,
          category: this.dataLoader.getCategory(badge.categoryId),
          score: score,
          reason: this.getRecommendationReason(badge, context)
        });
      }
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    recommendations.sort((a, b) => b.score - a.score);
    
    return recommendations.slice(0, limit);
  }

  // –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞—á–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  calculateBadgeScore(badge, context) {
    let score = 0.0;
    
    // –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª
    score += 1.0;
    
    // –ë–æ–Ω—É—Å –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º
    if (context.interests.length > 0) {
      const badgeText = `${badge.title} ${badge.description}`.toLowerCase();
      for (const interest of context.interests) {
        if (badgeText.includes(interest.toLowerCase())) {
          score += 2.0;
        }
      }
    }
    
    // –ë–æ–Ω—É—Å –∑–∞ —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if (context.current_category && badge.categoryId === context.current_category) {
      score += 1.5;
    }
    
    // –ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if (context.level === "beginner" && badge.levels.length <= 2) {
      score += 1.0;
    } else if (context.level === "advanced" && badge.levels.length >= 3) {
      score += 1.0;
    }
    
    return score;
  }

  // –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∑–Ω–∞—á–∫–∞
  getRecommendationReason(badge, context) {
    const reasons = [];
    
    if (context.interests.length > 0) {
      const badgeText = `${badge.title} ${badge.description}`.toLowerCase();
      for (const interest of context.interests) {
        if (badgeText.includes(interest.toLowerCase())) {
          reasons.push(`—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É –∏–Ω—Ç–µ—Ä–µ—Å—É –∫ ${interest}`);
        }
      }
    }
    
    if (context.current_category && badge.categoryId === context.current_category) {
      reasons.push("–∏–∑ –≤–∞—à–µ–π —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
    }
    
    if (context.level === "beginner" && badge.levels.length <= 2) {
      reasons.push("–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö");
    } else if (context.level === "advanced" && badge.levels.length >= 3) {
      reasons.push("–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö");
    }
    
    return reasons.length > 0 ? reasons.join(", ") : "–º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω";
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const contextManager = new ContextManager();
