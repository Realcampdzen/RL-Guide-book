#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É ai-data –∫–∞–∫ —à–∞–±–ª–æ–Ω
–∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –µ—ë –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è
"""

import json
import re
import os
from collections import defaultdict

def load_guide():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è.txt"""
    with open('–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å.txt', 'r', encoding='utf-8') as f:
        return f.read()

def load_ai_data_structure(category_id):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ ai-data –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    ai_data_path = f'ai-data/category-{category_id}'
    if not os.path.exists(ai_data_path):
        return None
    
    structure = {}
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for filename in os.listdir(ai_data_path):
        if filename.endswith('.json') and filename != 'index.json':
            file_path = os.path.join(ai_data_path, filename)
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    badge_id = data.get('id', filename.replace('.json', ''))
                    structure[badge_id] = data
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {e}")
    
    return structure

def extract_badge_info_from_guide(badge_id):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–Ω–∞—á–∫–µ –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è"""
    guide_text = load_guide()
    
    # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–Ω–∞—á–∫–µ
    main_pattern = rf'^{re.escape(badge_id)}\.?\s*–ó–Ω–∞—á–æ–∫\s*([^¬´]+)¬´([^¬ª]+)¬ª\.'
    main_match = re.search(main_pattern, guide_text, re.MULTILINE)
    
    if not main_match:
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –±–µ–∑ "–ó–Ω–∞—á–æ–∫"
        alt_pattern = rf'^{re.escape(badge_id)}\.?\s*([^¬´]+)¬´([^¬ª]+)¬ª\.'
        main_match = re.search(alt_pattern, guide_text, re.MULTILINE)
    
    if not main_match:
        return None
    
    emoji = main_match.group(1).strip()
    title = main_match.group(2)
    
    # –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏
    goal_pattern = rf'^{re.escape(badge_id)}\.?\s*–ó–Ω–∞—á–æ–∫[^.]*\.\s*\n-–¶–µ–ª—å:\s*([^\n]+)'
    goal_match = re.search(goal_pattern, guide_text, re.MULTILINE)
    
    description = ""
    if goal_match:
        description = goal_match.group(1).strip()
    
    # –ò—â–µ–º —É—Ä–æ–≤–Ω–∏
    levels = []
    level_pattern = rf'^{re.escape(badge_id)}\.(\d+)\.?\s*(?:–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å|–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å|–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å|–û–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π)?\s*‚Äì?\s*([^¬´]+)¬´([^¬ª]+)¬ª\.?'
    
    for match in re.finditer(level_pattern, guide_text, re.MULTILINE):
        level_num = match.group(1)
        level_emoji = match.group(2).strip()
        level_title = match.group(3)
        
        # –ò—â–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è
        level_id = f"{badge_id}.{level_num}"
        criteria_pattern = rf'^{re.escape(level_id)}\.?\s*[^.]*\.\s*\n-–¶–µ–ª—å:\s*([^\n]+)'
        criteria_match = re.search(criteria_pattern, guide_text, re.MULTILINE)
        
        level_description = ""
        if criteria_match:
            level_description = criteria_match.group(1).strip()
        
        levels.append({
            "id": level_id,
            "level": "–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å" if level_num == "1" else "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å" if level_num == "2" else "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
            "title": level_title,
            "emoji": level_emoji,
            "description": level_description,
            "criteria": f"‚úÖ {level_description}",  # –£–ø—Ä–æ—â—ë–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
            "confirmation": "üìé –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–∂–∞—Ç–æ–≥–æ –æ–± —É—á–∞—Å—Ç–∏–∏ –≤ –ø—Ä–∞–∫—Ç–∏–∫–µ."
        })
    
    return {
        "id": badge_id,
        "title": title,
        "emoji": emoji,
        "description": description,
        "levels": levels
    }

def create_enhanced_badge(ai_structure, guide_info):
    """–°–æ–∑–¥–∞—ë—Ç –∑–Ω–∞—á–æ–∫, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É ai-data –∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è"""
    if not guide_info:
        return None
    
    # –ë–∞–∑–æ–≤—ã–π –∑–Ω–∞—á–æ–∫ –∏–∑ ai-data
    base_badge = ai_structure.get(guide_info["id"], {})
    
    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∑–Ω–∞—á–æ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    enhanced_badge = {
        "id": guide_info["id"],
        "title": guide_info["title"],
        "emoji": guide_info["emoji"],
        "category_id": base_badge.get("categoryId", guide_info["id"].split(".")[0]),
        "level": "–û–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π" if not guide_info["levels"] else "–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π",
        "description": guide_info["description"],
        "criteria": f"‚úÖ {guide_info['description']}" if guide_info["description"] else "",
        "confirmation": "üìé –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–∂–∞—Ç–æ–≥–æ –æ–± —É—á–∞—Å—Ç–∏–∏ –≤ –ø—Ä–∞–∫—Ç–∏–∫–µ."
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if guide_info["levels"]:
        enhanced_badge["subtasks"] = []
        for level in guide_info["levels"]:
            enhanced_badge["subtasks"].append({
                "id": level["id"],
                "title": level["title"],
                "emoji": level["emoji"],
                "level": level["level"],
                "description": level["description"],
                "criteria": level["criteria"],
                "confirmation": level["confirmation"]
            })
    
    return enhanced_badge

def parse_all_categories():
    """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É ai-data"""
    guide_text = load_guide()
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = set()
    category_pattern = r'^([0-9]+)\.\s*[^.]*\.'
    for match in re.finditer(category_pattern, guide_text, re.MULTILINE):
        categories.add(match.group(1))
    
    all_badges = []
    
    for category_id in sorted(categories, key=int):
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category_id}...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É ai-data
        ai_structure = load_ai_data_structure(category_id)
        if not ai_structure:
            print(f"  ‚ö†Ô∏è –ù–µ—Ç ai-data –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}")
            continue
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–Ω–∞—á–∫–∏ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_pattern = rf'^{category_id}\.([0-9]+)\.?\s*–ó–Ω–∞—á–æ–∫'
        badge_numbers = set()
        for match in re.finditer(category_pattern, guide_text, re.MULTILINE):
            badge_numbers.add(match.group(1))
        
        for badge_num in sorted(badge_numbers, key=int):
            badge_id = f"{category_id}.{badge_num}"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è
            guide_info = extract_badge_info_from_guide(badge_id)
            if not guide_info:
                print(f"  ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è {badge_id}")
                continue
            
            # –°–æ–∑–¥–∞—ë–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∑–Ω–∞—á–æ–∫
            enhanced_badge = create_enhanced_badge(ai_structure, guide_info)
            if enhanced_badge:
                all_badges.append(enhanced_badge)
                print(f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω {badge_id}: {enhanced_badge['title']}")
    
    return all_badges

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞...")
    print("üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É ai-data –∫–∞–∫ —à–∞–±–ª–æ–Ω")
    print("üìñ –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è\n")
    
    # –ü–∞—Ä—Å–∏–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    all_badges = parse_all_categories()
    
    # –°–æ–∑–¥–∞—ë–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    result = {
        "badges": all_badges,
        "total_badges": len(all_badges),
        "generated_by": "enhanced_parser.py",
        "source": "–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å.txt + ai-data structure"
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    output_file = "perfect_parsed_data_enhanced.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)
    
    print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!")
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–Ω–∞—á–∫–æ–≤: {len(all_badges)}")
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {output_file}")

if __name__ == "__main__":
    main()
