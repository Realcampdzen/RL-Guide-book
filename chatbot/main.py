"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —á–∞—Ç-–±–æ—Ç–∞ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è "–†–µ–∞–ª—å–Ω—ã–π –õ–∞–≥–µ—Ä—å"
"""
import os
import sys
from pathlib import Path
from typing import Dict, List, Optional
from datetime import datetime

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
import uvicorn

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from core.data_loader import DataLoader
from core.openai_client import OpenAIClient
from core.context_manager import ContextManager
from core.response_generator import ResponseGenerator
from models.conversation import ChatRequest, ChatResponse, Message, UserContext
from models.badge import Badge, Category

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="–ß–∞—Ç-–±–æ—Ç –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è '–†–µ–∞–ª—å–Ω—ã–π –õ–∞–≥–µ—Ä—å'",
    description="–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —á–∞—Ç-–±–æ—Ç-–≤–æ–∂–∞—Ç—ã–π –ø–æ —Å–∏—Å—Ç–µ–º–µ –∑–Ω–∞—á–∫–æ–≤",
    version="1.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
data_loader: Optional[DataLoader] = None
openai_client: Optional[OpenAIClient] = None
context_manager: Optional[ContextManager] = None
response_generator: Optional[ResponseGenerator] = None


@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global data_loader, openai_client, context_manager, response_generator
    
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ —á–∞—Ç-–±–æ—Ç–∞ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        print("üìö –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤...")
        data_loader = DataLoader()
        data_loader.load_all_data()
        
        print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞...")
        openai_client = OpenAIClient()
        
        print("üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
        context_manager = ContextManager(data_loader)
        
        print("üí¨ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤...")
        response_generator = ResponseGenerator(openai_client, data_loader, context_manager)
        
        print("‚úÖ –ß–∞—Ç-–±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        raise


@app.get("/", response_class=HTMLResponse)
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º —á–∞—Ç–∞"""
    html_content = """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–ù–µ–π—Ä–æ–í–∞–ª—é—à–∞ - –ß–∞—Ç-–±–æ—Ç –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è</title>
        <style>
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                margin: 0;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
            }
            .container {
                max-width: 800px;
                margin: 0 auto;
                background: white;
                border-radius: 20px;
                box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                overflow: hidden;
            }
            .header {
                background: linear-gradient(135deg, #ff6b6b, #ffa500);
                color: white;
                padding: 20px;
                text-align: center;
            }
            .header h1 {
                margin: 0;
                font-size: 2em;
            }
            .header p {
                margin: 10px 0 0 0;
                opacity: 0.9;
            }
            .chat-container {
                height: 500px;
                overflow-y: auto;
                padding: 20px;
                background: #f8f9fa;
            }
            .message {
                margin: 15px 0;
                padding: 15px;
                border-radius: 15px;
                max-width: 80%;
            }
            .user-message {
                background: #007bff;
                color: white;
                margin-left: auto;
                text-align: right;
            }
            .bot-message {
                background: white;
                border: 1px solid #e9ecef;
                margin-right: auto;
            }
            .input-container {
                padding: 20px;
                background: white;
                border-top: 1px solid #e9ecef;
                display: flex;
                gap: 10px;
            }
            .input-container input {
                flex: 1;
                padding: 15px;
                border: 1px solid #ddd;
                border-radius: 25px;
                font-size: 16px;
                outline: none;
            }
            .input-container button {
                padding: 15px 25px;
                background: #007bff;
                color: white;
                border: none;
                border-radius: 25px;
                cursor: pointer;
                font-size: 16px;
            }
            .input-container button:hover {
                background: #0056b3;
            }
            .suggestions {
                padding: 10px 20px;
                background: #f8f9fa;
                border-top: 1px solid #e9ecef;
            }
            .suggestion {
                display: inline-block;
                margin: 5px;
                padding: 8px 15px;
                background: #e9ecef;
                border-radius: 20px;
                cursor: pointer;
                font-size: 14px;
            }
            .suggestion:hover {
                background: #dee2e6;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üåü –ù–µ–π—Ä–æ–í–∞–ª—é—à–∞</h1>
                <p>–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≤–æ–∂–∞—Ç—ã–π-—ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∑–Ω–∞—á–∫–∞–º "–†–µ–∞–ª—å–Ω–æ–≥–æ –õ–∞–≥–µ—Ä—è"</p>
            </div>
            
            <div class="chat-container" id="chatContainer">
                <div class="message bot-message">
                    –ü—Ä–∏–≤–µ—Ç! üëã –Ø –ù–µ–π—Ä–æ–í–∞–ª—é—à–∞, —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –≤–æ–∂–∞—Ç—ã–π! 
                    –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ –∑–Ω–∞—á–∫–æ–≤ "–†–µ–∞–ª—å–Ω–æ–≥–æ –õ–∞–≥–µ—Ä—è", 
                    –ø–æ–¥–±–µ—Ä—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∑–Ω–∞—á–∫–∏ –∏ –¥–∞–º –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏ –¥–ª—è –∏—Ö –ø–æ–ª—É—á–µ–Ω–∏—è! 
                    –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üòä
                </div>
            </div>
            
            <div class="suggestions" id="suggestions">
                <div class="suggestion" onclick="sendMessage('–ü–æ–∫–∞–∂–∏ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–Ω–∞—á–∫–æ–≤')">üìö –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</div>
                <div class="suggestion" onclick="sendMessage('–†–µ–∫–æ–º–µ–Ω–¥—É–π –∑–Ω–∞—á–∫–∏ –ø–æ –º–æ–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º')">üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</div>
                <div class="suggestion" onclick="sendMessage('–û–±—ä—è—Å–Ω–∏ —Ñ–∏–ª–æ—Å–æ—Ñ–∏—é —Å–∏—Å—Ç–µ–º—ã –∑–Ω–∞—á–∫–æ–≤')">üí≠ –§–∏–ª–æ—Å–æ—Ñ–∏—è</div>
            </div>
            
            <div class="input-container">
                <input type="text" id="messageInput" placeholder="–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å..." onkeypress="handleKeyPress(event)">
                <button onclick="sendMessage()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            </div>
        </div>

        <script>
            let userId = 'user_' + Math.random().toString(36).substr(2, 9);
            
            function handleKeyPress(event) {
                if (event.key === 'Enter') {
                    sendMessage();
                }
            }
            
            async function sendMessage(message = null) {
                const input = document.getElementById('messageInput');
                const messageText = message || input.value.trim();
                
                if (!messageText) return;
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                addMessage(messageText, 'user');
                input.value = '';
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                const loadingId = addMessage('–î—É–º–∞—é... ü§î', 'bot');
                
                try {
                    const response = await fetch('/chat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            message: messageText,
                            user_id: userId
                        })
                    });
                    
                    const data = await response.json();
                    
                    // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                    removeMessage(loadingId);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
                    addMessage(data.response, 'bot');
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                    updateSuggestions(data.suggestions || []);
                    
                } catch (error) {
                    removeMessage(loadingId);
                    addMessage('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'bot');
                }
            }
            
            function addMessage(text, sender) {
                const container = document.getElementById('chatContainer');
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${sender}-message`;
                messageDiv.textContent = text;
                messageDiv.id = 'msg_' + Date.now();
                
                container.appendChild(messageDiv);
                container.scrollTop = container.scrollHeight;
                
                return messageDiv.id;
            }
            
            function removeMessage(messageId) {
                const message = document.getElementById(messageId);
                if (message) {
                    message.remove();
                }
            }
            
            function updateSuggestions(suggestions) {
                const container = document.getElementById('suggestions');
                container.innerHTML = '';
                
                suggestions.forEach(suggestion => {
                    const div = document.createElement('div');
                    div.className = 'suggestion';
                    div.textContent = suggestion;
                    div.onclick = () => sendMessage(suggestion);
                    container.appendChild(div);
                });
            }
        </script>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)


@app.post("/chat", response_model=ChatResponse)
async def chat(request: ChatRequest):
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º"""
    try:
        if not response_generator:
            raise HTTPException(status_code=500, detail="–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ–±-–∫–æ–Ω—Ç–µ–∫—Å—Ç
        if request.context:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            response_generator.context_manager.update_web_context(
                user_id=request.user_id,
                web_context=request.context
            )
        
        # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç—É—é)
        conversation_history = [
            Message(role="user", content=request.message, metadata={})
        ]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = response_generator.generate_response(
            user_message=request.message,
            user_id=request.user_id,
            conversation_history=conversation_history
        )
        
        return response
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")


@app.get("/categories")
async def get_categories():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        if not data_loader:
            raise HTTPException(status_code=500, detail="–ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        categories = data_loader.get_all_categories()
        return {
            "categories": [
                {
                    "id": cat.id,
                    "title": cat.title,
                    "emoji": cat.emoji,
                    "badges_count": len(cat.badges)
                }
                for cat in categories
            ]
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}")


@app.get("/badges/{category_id}")
async def get_badges_by_category(category_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        if not data_loader:
            raise HTTPException(status_code=500, detail="–ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        badges = data_loader.get_badges_by_category(category_id)
        return {
            "category_id": category_id,
            "badges": [
                {
                    "id": badge.id,
                    "title": badge.title,
                    "emoji": badge.emoji,
                    "description": badge.description,
                    "levels_count": len(badge.levels)
                }
                for badge in badges
            ]
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–∫–æ–≤: {str(e)}")


@app.get("/badge/{badge_id}")
async def get_badge_info(badge_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–Ω–∞—á–∫–µ"""
    try:
        if not data_loader:
            raise HTTPException(status_code=500, detail="–ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        badge = data_loader.get_badge(badge_id)
        if not badge:
            raise HTTPException(status_code=404, detail="–ó–Ω–∞—á–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return {
            "badge": {
                "id": badge.id,
                "title": badge.title,
                "emoji": badge.emoji,
                "description": badge.description,
                "nameExplanation": badge.nameExplanation,
                "skillTips": badge.skillTips,
                "examples": badge.examples,
                "philosophy": badge.philosophy,
                "howToBecome": badge.howToBecome,
                "levels": [
                    {
                        "id": level.id,
                        "level": level.level,
                        "title": level.title,
                        "emoji": level.emoji,
                        "criteria": level.criteria,
                        "confirmation": level.confirmation
                    }
                    for level in badge.levels
                ]
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–∫–∞: {str(e)}")


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "components": {
            "data_loader": data_loader is not None,
            "openai_client": openai_client is not None,
            "context_manager": context_manager is not None,
            "response_generator": response_generator is not None
        }
    }


if __name__ == "__main__":
    print("üåü –ó–∞–ø—É—Å–∫ —á–∞—Ç-–±–æ—Ç–∞ –ù–µ–π—Ä–æ–í–∞–ª—é—à–∏...")
    print("üì± –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000")
    print("üîß API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
    
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
