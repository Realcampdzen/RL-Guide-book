"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
"""
from typing import List, Dict, Any, Optional
from datetime import datetime

from models.conversation import Message, UserContext, ChatResponse
from models.badge import Badge, Category
from core.openai_client import OpenAIClient
from core.data_loader import DataLoader
from core.context_manager import ContextManager
from prompts.system_prompt import (
    get_system_prompt_with_context,
    get_badge_explanation_prompt,
    get_creative_ideas_prompt,
    get_recommendation_prompt
)


class ResponseGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ —á–∞—Ç-–±–æ—Ç–∞"""
    
    def __init__(
        self,
        openai_client: OpenAIClient,
        data_loader: DataLoader,
        context_manager: ContextManager
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤
        
        Args:
            openai_client: –ö–ª–∏–µ–Ω—Ç OpenAI
            data_loader: –ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö
            context_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        """
        self.openai_client = openai_client
        self.data_loader = data_loader
        self.context_manager = context_manager
    
    def generate_response(
        self,
        user_message: str,
        user_id: str,
        conversation_history: List[Message]
    ) -> ChatResponse:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conversation_history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
            
        Returns:
            –û—Ç–≤–µ—Ç –±–æ—Ç–∞
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_context = self.context_manager.detect_context_from_message(user_id, user_message)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        request_type = self._analyze_request_type(user_message, user_context)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        if request_type == "badge_explanation":
            response = self._generate_badge_explanation(user_message, user_context)
        elif request_type == "creative_ideas":
            response = self._generate_creative_ideas(user_message, user_context)
        elif request_type == "recommendations":
            response = self._generate_recommendations(user_message, user_context)
        elif request_type == "category_info":
            response = self._generate_category_info(user_message, user_context)
        elif request_type == "philosophy":
            response = self._generate_philosophy_explanation(user_message, user_context)
        else:
            response = self._generate_general_response(user_message, user_context, conversation_history)
        
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        response = self._clean_markdown(response)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è
        suggestions = self._generate_suggestions(user_context)
        
        return ChatResponse(
            response=response,
            suggestions=suggestions,
            context_updates=user_context,
            metadata={
                "request_type": request_type,
                "timestamp": datetime.now().isoformat()
            }
        )
    
    def _analyze_request_type(self, message: str, context: UserContext) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        message_lower = message.lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
        if any(word in message_lower for word in ["–æ–±—ä—è—Å–Ω–∏", "—Ä–∞—Å—Å–∫–∞–∂–∏", "—á—Ç–æ —Ç–∞–∫–æ–µ", "–∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å"]):
            if context.current_badge:
                return "badge_explanation"
            elif context.current_category:
                return "category_info"
        
        if any(word in message_lower for word in ["–∏–¥–µ–∏", "–∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å", "–ø—Ä–∏–º–µ—Ä—ã", "–≤–∞—Ä–∏–∞–Ω—Ç—ã"]):
            return "creative_ideas"
        
        if any(word in message_lower for word in ["—Ä–µ–∫–æ–º–µ–Ω–¥—É–π", "–ø–æ—Å–æ–≤–µ—Ç—É–π", "—á—Ç–æ –≤—ã–±—Ä–∞—Ç—å", "–ø–æ–¥—Ö–æ–¥—è—â–∏–π"]):
            return "recommendations"
        
        if any(word in message_lower for word in ["—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è", "–∑–∞—á–µ–º", "–ø–æ—á–µ–º—É", "—Å–º—ã—Å–ª"]):
            return "philosophy"
        
        return "general"
    
    def _generate_badge_explanation(self, message: str, context: UserContext) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–∫–∞"""
        if not context.current_badge:
            return "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç! üòä"
        
        badge = self.data_loader.get_badge(context.current_badge)
        if not badge:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º –∑–Ω–∞—á–∫–µ."
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–Ω–∞—á–∫–µ
        badge_info = self._format_badge_info(badge)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        prompt = get_badge_explanation_prompt(badge_info)
        
        return self.openai_client.generate_response(
            messages=[Message(role="user", content=prompt, metadata={})],
            system_prompt=get_system_prompt_with_context(
                current_badge=badge.title,
                user_level=context.level,
                user_interests=context.interests
            )
        )
    
    def _generate_creative_ideas(self, message: str, context: UserContext) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏"""
        if not context.current_badge:
            return "–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π –≤—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç! üí°"
        
        badge = self.data_loader.get_badge(context.current_badge)
        if not badge:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º –∑–Ω–∞—á–∫–µ."
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–Ω–∞—á–∫–µ
        badge_info = self._format_badge_info(badge)
        user_context_str = f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(context.interests)}, –£—Ä–æ–≤–µ–Ω—å: {context.level}"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ–∏
        prompt = get_creative_ideas_prompt(badge_info, user_context_str)
        
        return self.openai_client.generate_response(
            messages=[Message(role="user", content=prompt, metadata={})],
            system_prompt=get_system_prompt_with_context(
                current_badge=badge.title,
                user_level=context.level,
                user_interests=context.interests
            )
        )
    
    def _generate_recommendations(self, message: str, context: UserContext) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∑–Ω–∞—á–∫–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = self.context_manager.get_personalized_recommendations(context.user_id, limit=5)
        
        if not recommendations:
            return "–ü–æ–∫–∞ —É –º–µ–Ω—è –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö, –∏ —è –ø–æ–¥–±–µ—Ä—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∑–Ω–∞—á–∫–∏! üéØ"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        response_parts = ["–í–æ—Ç –º–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Å: üåü\n"]
        
        for i, rec in enumerate(recommendations[:3], 1):
            badge = rec["badge"]
            reason = rec["reason"]
            response_parts.append(
                f"{i}. {badge.emoji} **{badge.title}**\n"
                f"   {reason}\n"
                f"   {badge.description[:100]}...\n"
            )
        
        response_parts.append("\n–ö–∞–∫–æ–π –∑–Ω–∞—á–æ–∫ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª? üòä")
        
        return "\n".join(response_parts)
    
    def _generate_category_info(self, message: str, context: UserContext) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if not context.current_category:
            return "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ! üìö"
        
        category = self.data_loader.get_category(context.current_category)
        if not category:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_info = f"""
**{category.emoji} {category.title}**

{category.introduction or "–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ."}

–ó–Ω–∞—á–∫–∏ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
"""
        
        for badge in category.badges[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–∫–æ–≤
            category_info += f"\n‚Ä¢ {badge.emoji} {badge.title}"
        
        if len(category.badges) > 5:
            category_info += f"\n‚Ä¢ ... –∏ –µ—â–µ {len(category.badges) - 5} –∑–Ω–∞—á–∫–æ–≤"
        
        category_info += "\n\n–ö–∞–∫–æ–π –∑–Ω–∞—á–æ–∫ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? ü§î"
        
        return category_info
    
    def _generate_philosophy_explanation(self, message: str, context: UserContext) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏"""
        if context.current_category:
            category = self.data_loader.get_category(context.current_category)
            if category:
                return self.openai_client.explain_philosophy(
                    category.id,
                    category.introduction or category.title,
                    context
                )
        
        # –û–±—â–∞—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–Ω–∞—á–∫–æ–≤
        return """
üåü **–§–∏–ª–æ—Å–æ—Ñ–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–Ω–∞—á–∫–æ–≤ "–†–µ–∞–ª—å–Ω–æ–≥–æ –õ–∞–≥–µ—Ä—è"**

–ó–Ω–∞—á–∫–∏ –∑–¥–µ—Å—å ‚Äî –Ω–µ –Ω–∞–≥—Ä–∞–¥—ã, –∞ **–º–∞—Ä—à—Ä—É—Ç—ã —Ä–∞–∑–≤–∏—Ç–∏—è**! üó∫Ô∏è

–ö–∞–∂–¥—ã–π –∑–Ω–∞—á–æ–∫ ‚Äî —ç—Ç–æ –Ω–µ –º–µ–¥–∞–ª—å –∑–∞ –ø—Ä–æ—à–ª–æ–µ, –∞ **–º–∞—è–∫, –æ—Å–≤–µ—â–∞—é—â–∏–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–≤–æ–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è**. 

**–ì–ª–∞–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:**
‚Ä¢ üéØ **–û–ø—ã—Ç –≤–∞–∂–Ω–µ–µ –Ω–∞–≥—Ä–∞–¥—ã** - –≥–ª–∞–≤–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –≤ –Ω–∞–≤—ã–∫–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ä–∞–∑–≤–∏–≤–∞–µ—à—å
‚Ä¢ üß≠ **–¢—ã –≤—ã–±–∏—Ä–∞–µ—à—å —Å–≤–æ–π –ø—É—Ç—å** - –∑–Ω–∞—á–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç –Ω–∞–π—Ç–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –Ω–æ –≤—ã–±–æ—Ä –∑–∞ —Ç–æ–±–æ–π
‚Ä¢ üå± **–†–∞–∑–≤–∏—Ç–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–∞–∫—Ç–∏–∫—É** - –Ω–∞–≤—ã–∫–∏ —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
‚Ä¢ ü§ù **–ü–æ–º–æ—â—å –¥—Ä—É–≥–∏–º** - –æ–±—É—á–∞—è –¥—Ä—É–≥–∏—Ö, —Ç—ã –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞–µ—à—å –º–∞—Ç–µ—Ä–∏–∞–ª

**–ü–æ–º–Ω–∏:** –∑–Ω–∞—á–∫–∏ ‚Äî —ç—Ç–æ –Ω–µ —Ü–µ–ª—å, –∞ —Å—Ä–µ–¥—Å—Ç–≤–æ —Å—Ç–∞—Ç—å –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–µ–π —Å–µ–±—è! üí™

–û –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –∑–Ω–∞—á–∫–µ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ? üòä
"""
    
    def _generate_general_response(
        self,
        message: str,
        context: UserContext,
        conversation_history: List[Message]
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–π –æ—Ç–≤–µ—Ç"""
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        system_prompt = get_system_prompt_with_context(
            current_category=context.current_category or "",
            current_badge=context.current_badge or "",
            user_level=context.level,
            user_interests=context.interests
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–Ω–∞—á–∫–∞—Ö/–∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
        context_info = self._get_contextual_info(context)
        if context_info:
            system_prompt += f"\n\n## –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{context_info}"
        
        return self.openai_client.generate_response(
            messages=conversation_history,
            system_prompt=system_prompt,
            user_context=context
        )
    
    def _format_badge_info(self, badge: Badge) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–Ω–∞—á–∫–µ"""
        info_parts = [
            f"**{badge.emoji} {badge.title}**",
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {badge.description}"
        ]
        
        if badge.nameExplanation:
            info_parts.append(f"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è: {badge.nameExplanation}")
        
        if badge.skillTips:
            info_parts.append(f"–°–æ–≤–µ—Ç—ã: {badge.skillTips}")
        
        if badge.examples:
            info_parts.append(f"–ü—Ä–∏–º–µ—Ä—ã: {badge.examples}")
        
        if badge.philosophy:
            info_parts.append(f"–§–∏–ª–æ—Å–æ—Ñ–∏—è: {badge.philosophy}")
        
        if badge.howToBecome:
            info_parts.append(f"–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å: {badge.howToBecome}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω—è—Ö
        if badge.levels:
            info_parts.append("\n**–£—Ä–æ–≤–Ω–∏:**")
            for level in badge.levels:
                info_parts.append(f"- {level.emoji} {level.title}: {level.criteria[:100]}...")
        
        return "\n\n".join(info_parts)
    
    def _get_contextual_info(self, context: UserContext) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        info_parts = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —ç–∫—Ä–∞–Ω–µ
        current_view = context.session_data.get('current_view')
        if current_view:
            view_names = {
                'intro': '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞',
                'categories': '–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
                'category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–Ω–∞—á–∫–æ–≤',
                'badge': '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–Ω–∞—á–∫–∞',
                'badge-level': '–£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∫–∞',
                'introduction': '–í–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å',
                'additional-material': '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'
            }
            view_name = view_names.get(current_view, current_view)
            info_parts.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ: {view_name}")
        
        if context.current_badge:
            badge = self.data_loader.get_badge(context.current_badge)
            if badge:
                info_parts.append(f"–¢–µ–∫—É—â–∏–π –∑–Ω–∞—á–æ–∫: {badge.emoji} {badge.title}")
                info_parts.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: {badge.description}")
        
        if context.current_category:
            category = self.data_loader.get_category(context.current_category)
            if category:
                info_parts.append(f"–¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.emoji} {category.title}")
                if category.introduction:
                    info_parts.append(f"–û –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category.introduction[:200]}...")
        
        return "\n".join(info_parts)
    
    def _generate_suggestions(self, context: UserContext) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è"""
        suggestions = []
        
        if context.current_badge:
            badge = self.data_loader.get_badge(context.current_badge)
            if badge:
                suggestions.extend([
                    f"–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∑–Ω–∞—á–∫–µ {badge.title}",
                    f"–î–∞–π –∏–¥–µ–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è {badge.title}",
                    f"–ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç {badge.title}?"
                ])
        
        if context.current_category:
            category = self.data_loader.get_category(context.current_category)
            if category:
                suggestions.extend([
                    f"–ü–æ–∫–∞–∂–∏ –≤—Å–µ –∑–Ω–∞—á–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.title}",
                    f"–û–±—ä—è—Å–Ω–∏ —Ñ–∏–ª–æ—Å–æ—Ñ–∏—é {category.title}",
                    f"–†–µ–∫–æ–º–µ–Ω–¥—É–π –∑–Ω–∞—á–∫–∏ –∏–∑ {category.title}"
                ])
        
        # –û–±—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        suggestions.extend([
            "–ü–æ–∫–∞–∂–∏ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–Ω–∞—á–∫–æ–≤",
            "–†–µ–∫–æ–º–µ–Ω–¥—É–π –∑–Ω–∞—á–∫–∏ –ø–æ –º–æ–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º",
            "–û–±—ä—è—Å–Ω–∏ —Ñ–∏–ª–æ—Å–æ—Ñ–∏—é —Å–∏—Å—Ç–µ–º—ã –∑–Ω–∞—á–∫–æ–≤"
        ])
        
        return suggestions[:5]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    
    def _clean_markdown(self, text: str) -> str:
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        import re
        
        # –£–¥–∞–ª—è–µ–º **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**
        text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)
        
        # –£–¥–∞–ª—è–µ–º *–∫—É—Ä—Å–∏–≤*
        text = re.sub(r'\*(.*?)\*', r'\1', text)
        
        # –£–¥–∞–ª—è–µ–º ### –∑–∞–≥–æ–ª–æ–≤–∫–∏
        text = re.sub(r'^###\s*', '', text, flags=re.MULTILINE)
        
        # –£–¥–∞–ª—è–µ–º ## –∑–∞–≥–æ–ª–æ–≤–∫–∏
        text = re.sub(r'^##\s*', '', text, flags=re.MULTILINE)
        
        # –£–¥–∞–ª—è–µ–º # –∑–∞–≥–æ–ª–æ–≤–∫–∏
        text = re.sub(r'^#\s*', '', text, flags=re.MULTILINE)
        
        # –£–¥–∞–ª—è–µ–º `–∫–æ–¥`
        text = re.sub(r'`(.*?)`', r'\1', text)
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        text = re.sub(r'\n\s*\n\s*\n', '\n\n', text)
        
        return text.strip()
