#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import re

def parse_complex_structure():
    """–ü–∞—Ä—Å–∏—Ç —Å–ª–æ–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞ —Å markdown –∏ JSON –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    
    print("–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å–ª–æ–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞...")
    
    # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    with open('chatbot/perfect_parsed_data1.json', 'r', encoding='utf-8') as f:
        content = f.read()
    
    print(f"–§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ JSON –æ–±—ä–µ–∫—Ç—ã (–æ–Ω–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å { –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç "id")
    json_objects = []
    markdown_sections = []
    
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã JSON –æ–±—ä–µ–∫—Ç–æ–≤
    json_pattern = r'{\s*"id":\s*"[^"]+"'
    json_matches = list(re.finditer(json_pattern, content))
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(json_matches)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö JSON –æ–±—ä–µ–∫—Ç–æ–≤")
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å–µ–∫—Ü–∏–∏
    current_pos = 0
    sections = []
    
    for i, match in enumerate(json_matches):
        start_pos = match.start()
        
        # –î–æ–±–∞–≤–ª—è–µ–º markdown —Å–µ–∫—Ü–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –º–µ–∂–¥—É –ø–æ–∑–∏—Ü–∏—è–º–∏)
        if start_pos > current_pos:
            markdown_content = content[current_pos:start_pos].strip()
            if markdown_content:
                sections.append({
                    'type': 'markdown',
                    'content': markdown_content,
                    'start': current_pos,
                    'end': start_pos
                })
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü JSON –æ–±—ä–µ–∫—Ç–∞
        brace_count = 0
        json_start = start_pos
        json_end = start_pos
        
        for j in range(start_pos, len(content)):
            char = content[j]
            if char == '{':
                brace_count += 1
            elif char == '}':
                brace_count -= 1
                if brace_count == 0:
                    json_end = j + 1
                    break
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –æ–±—ä–µ–∫—Ç
        json_content = content[json_start:json_end]
        try:
            json_obj = json.loads(json_content)
            sections.append({
                'type': 'json',
                'content': json_obj,
                'start': json_start,
                'end': json_end
            })
            print(f"  - JSON –æ–±—ä–µ–∫—Ç {json_obj.get('id', 'unknown')}: {json_obj.get('title', 'no title')}")
        except json.JSONDecodeError as e:
            print(f"  - –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        
        current_pos = json_end
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞–∫ markdown
    if current_pos < len(content):
        remaining_content = content[current_pos:].strip()
        if remaining_content:
            sections.append({
                'type': 'markdown',
                'content': remaining_content,
                'start': current_pos,
                'end': len(content)
            })
    
    print(f"–í—Å–µ–≥–æ —Å–µ–∫—Ü–∏–π: {len(sections)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = []
    current_category = None
    
    for section in sections:
        if section['type'] == 'markdown':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if '–ö–ê–¢–ï–ì–û–†–ò–Ø' in section['content'] and ':' in section['content']:
                # –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                if current_category:
                    categories.append(current_category)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category_match = re.search(r'–ö–ê–¢–ï–ì–û–†–ò–Ø (\d+):', section['content'])
                category_id = category_match.group(1) if category_match else 'unknown'
                
                current_category = {
                    'id': category_id,
                    'description': section['content'],
                    'badges': []
                }
                print(f"–ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è {category_id}")
        elif section['type'] == 'json' and current_category:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–æ–∫ –∫ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            current_category['badges'].append(section['content'])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if current_category:
        categories.append(current_category)
    
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
    
    # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    final_structure = {
        "metadata": {
            "title": "–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å –†–µ–∞–ª—å–Ω–æ–≥–æ –õ–∞–≥–µ—Ä—è - –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            "version": "2.0",
            "lastUpdated": "2024-12-19",
            "description": "–ü–æ–ª–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∑–Ω–∞—á–∫–æ–≤ –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è –†–µ–∞–ª—å–Ω–æ–≥–æ –õ–∞–≥–µ—Ä—è",
            "totalCategories": len(categories),
            "sourceFile": "perfect_parsed_data1.json"
        },
        "categories": categories
    }
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–∫–æ–≤
    total_badges = sum(len(cat['badges']) for cat in categories)
    final_structure['metadata']['totalBadges'] = total_badges
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    output_file = 'perfect_parsed_data_structured.json'
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(final_structure, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {output_file}")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
    print(f"   - –í—Å–µ–≥–æ –∑–Ω–∞—á–∫–æ–≤: {total_badges}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for cat in categories:
        print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏—è {cat['id']}: {len(cat['badges'])} –∑–Ω–∞—á–∫–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    try:
        with open(output_file, 'r', encoding='utf-8') as f:
            json.load(f)
        print("‚úÖ –§–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON")
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ: {e}")

if __name__ == "__main__":
    parse_complex_structure()
