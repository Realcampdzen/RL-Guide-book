#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è perfect_parsed_data.json –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ ai-data/
–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É ai-data –≤ –ø–ª–æ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É perfect_parsed_data.json
"""

import json
import os
from pathlib import Path
from typing import Dict, List, Any

def load_ai_data() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ ai-data/"""
    ai_data = {}
    
    ai_data_dir = Path('ai-data')
    for category_dir in ai_data_dir.iterdir():
        if not category_dir.is_dir():
            continue
            
        for json_file in category_dir.glob('*.json'):
            if json_file.name == 'index.json':
                continue
                
            with open(json_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                ai_data[data['id']] = data
    
    return ai_data

def convert_ai_data_to_perfect_format(ai_data: Dict[str, Any]) -> Dict[str, Any]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç ai-data –≤ —Ñ–æ—Ä–º–∞—Ç perfect_parsed_data.json"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π perfect_parsed_data.json –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    with open('perfect_parsed_data.json', 'r', encoding='utf-8') as f:
        existing_data = json.load(f)
    
    categories = existing_data.get('categories', [])
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–∫–æ–≤
    badges = []
    
    for badge_id, ai_badge in ai_data.items():
        # –ï—Å–ª–∏ —É –∑–Ω–∞—á–∫–∞ –µ—Å—Ç—å —É—Ä–æ–≤–Ω–∏, —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
        if 'levels' in ai_badge and ai_badge['levels']:
            for level in ai_badge['levels']:
                # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∑–Ω–∞—á–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π ID
                if level['level'] == '–û–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π':
                    badge_id = badge_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4.1)
                else:
                    badge_id = level['id']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —É—Ä–æ–≤–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4.1.1)
                
                badge = {
                    "id": badge_id,
                    "title": level['title'],
                    "emoji": level['emoji'],
                    "category_id": ai_badge['categoryId'],
                    "level": level['level'],
                    "description": ai_badge.get('description', ''),
                    "criteria": level.get('criteria', ''),
                    "importance": ai_badge.get('importance', ''),
                    "skillTips": ai_badge.get('skillTips', ''),
                    "nameExplanation": ai_badge.get('nameExplanation', ''),
                    "examples": ai_badge.get('examples', ''),
                    "philosophy": ai_badge.get('philosophy', ''),
                    "howToBecome": ai_badge.get('howToBecome', '')
                }
                badges.append(badge)
        else:
            # –ï—Å–ª–∏ —É—Ä–æ–≤–Ω–µ–π –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å
            badge = {
                "id": badge_id,
                "title": ai_badge.get('title', ''),
                "emoji": ai_badge.get('emoji', ''),
                "category_id": ai_badge.get('categoryId', ''),
                "level": "–û–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π",
                "description": ai_badge.get('description', ''),
                "criteria": "",
                "importance": ai_badge.get('importance', ''),
                "skillTips": ai_badge.get('skillTips', ''),
                "nameExplanation": ai_badge.get('nameExplanation', ''),
                "examples": ai_badge.get('examples', ''),
                "philosophy": ai_badge.get('philosophy', ''),
                "howToBecome": ai_badge.get('howToBecome', '')
            }
            badges.append(badge)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    perfect_data = {
        "categories": categories,
        "badges": badges
    }
    
    return perfect_data

def main():
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ perfect_parsed_data.json –Ω–∞ –æ—Å–Ω–æ–≤–µ ai-data/...")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    if Path('perfect_parsed_data.json').exists():
        import shutil
        shutil.copy('perfect_parsed_data.json', 'perfect_parsed_data_backup.json')
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è perfect_parsed_data_backup.json")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º ai-data
    print("ü§ñ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ ai-data/...")
    ai_data = load_ai_data()
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(ai_data)} –∑–Ω–∞—á–∫–æ–≤ –≤ ai-data")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç perfect_parsed_data.json
    print("üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    perfect_data = convert_ai_data_to_perfect_format(ai_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ perfect_parsed_data.json...")
    with open('perfect_parsed_data.json', 'w', encoding='utf-8') as f:
        json.dump(perfect_data, f, ensure_ascii=False, indent=2)
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n" + "="*60)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø")
    print("="*60)
    print(f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(perfect_data['categories'])}")
    print(f"üèÜ –ó–Ω–∞—á–∫–æ–≤: {len(perfect_data['badges'])}")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_counts = {}
    for badge in perfect_data['badges']:
        category_id = badge['category_id']
        category_counts[category_id] = category_counts.get(category_id, 0) + 1
    
    print(f"\nüìä –ó–Ω–∞—á–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for category_id, count in sorted(category_counts.items()):
        print(f"  ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_id}: {count} –∑–Ω–∞—á–∫–æ–≤")
    
    print("\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ perfect_parsed_data_backup.json")

if __name__ == "__main__":
    main()
