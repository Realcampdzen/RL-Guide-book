#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import os
import glob
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='[INFO] %(message)s')
logger = logging.getLogger(__name__)

PERFECT_PARSED_PATH = "perfect_parsed_data.json"
AI_DATA_DIR = "ai-data"

def load_json_file(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON —Ñ–∞–π–ª."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return None
    except json.JSONDecodeError:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ: {file_path}")
        return None
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return None

def save_json_file(file_path, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç JSON —Ñ–∞–π–ª."""
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        logger.info(f"üìÑ –§–∞–π–ª {file_path} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")

def get_badge_id_from_path(file_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –∑–Ω–∞—á–∫–∞ –∏–∑ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É."""
    return os.path.basename(file_path).replace('.json', '')

def is_main_badge(badge_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã–º (–Ω–µ –ø–æ–¥—É—Ä–æ–≤–Ω–µ–º)."""
    # –û—Å–Ω–æ–≤–Ω–æ–π –∑–Ω–∞—á–æ–∫ –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç X.Y (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7.1, 7.8)
    # –ü–æ–¥—É—Ä–æ–≤–µ–Ω—å –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç X.Y.Z (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7.1.1, 7.8.2)
    parts = badge_id.split('.')
    return len(parts) == 2

def find_badge_in_perfect_parsed(perfect_data, badge_id):
    """–ò—â–µ—Ç –∑–Ω–∞—á–æ–∫ –≤ perfect_parsed_data.json."""
    # –ò—â–µ–º –≤ –∫–æ—Ä–Ω–µ–≤–æ–º –ø–æ–ª–µ "badges"
    if 'badges' in perfect_data:
        for badge in perfect_data['badges']:
            if isinstance(badge, dict) and badge.get('id') == badge_id:
                return badge
    return None

def add_missing_main_badges():
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–Ω–∞—á–∫–∏ –≤ perfect_parsed_data.json.
    """
    logger.info("üîÑ –î–û–ë–ê–í–õ–ï–ù–ò–ï –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –û–°–ù–û–í–ù–´–• –ó–ù–ê–ß–ö–û–í")
    logger.info("==================================================")
    
    perfect_data = load_json_file(PERFECT_PARSED_PATH)
    if not perfect_data:
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ai-data —Ñ–∞–π–ª—ã
    ai_data_files = glob.glob(os.path.join(AI_DATA_DIR, '**', '*.json'), recursive=True)
    ai_data_files = [f for f in ai_data_files if not f.endswith('index.json') and not f.endswith('MASTER_INDEX.json')]
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–Ω–∞—á–∫–∏
    main_badge_files = []
    for file_path in ai_data_files:
        badge_id = get_badge_id_from_path(file_path)
        if is_main_badge(badge_id):
            main_badge_files.append((file_path, badge_id))
    
    logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(main_badge_files)} –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤ –≤ ai-data")

    added_count = 0
    existing_count = 0

    for file_path, badge_id in main_badge_files:
        ai_data = load_json_file(file_path)
        if not ai_data:
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–Ω–∞—á–æ–∫ –≤ perfect_parsed_data.json
        existing_badge = find_badge_in_perfect_parsed(perfect_data, badge_id)
        
        if existing_badge:
            logger.info(f"‚úÖ –ó–Ω–∞—á–æ–∫ {badge_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ perfect_parsed_data.json")
            existing_count += 1
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–Ω–∞—á–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ ai-data
            new_badge = {
                "id": badge_id,
                "title": ai_data.get("title", ""),
                "emoji": ai_data.get("emoji", ""),
                "category_id": ai_data.get("categoryId", ""),
                "description": ai_data.get("description", ""),
                "importance": ai_data.get("importance", ""),
                "skillTips": ai_data.get("skillTips", ""),
                "examples": ai_data.get("examples", ""),
                "philosophy": ai_data.get("philosophy", ""),
                "howToBecome": ai_data.get("howToBecome", ""),
                "nameExplanation": ai_data.get("nameExplanation", "")
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ badges
            if 'badges' not in perfect_data:
                perfect_data['badges'] = []
            
            perfect_data['badges'].append(new_badge)
            logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∑–Ω–∞—á–æ–∫ {badge_id}: {ai_data.get('title', '')}")
            added_count += 1

    save_json_file(PERFECT_PARSED_PATH, perfect_data)
    
    logger.info(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    logger.info(f"‚úÖ –£–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ: {existing_count}")
    logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö: {added_count}")
    logger.info(f"üìä –í—Å–µ–≥–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤: {len(main_badge_files)}")
    
    logger.info("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    logger.info("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    logger.info("2. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–Ω–∞—á–∫–∏ —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è")

if __name__ == "__main__":
    add_missing_main_badges()
