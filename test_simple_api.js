const https = require('https');

async function testSimpleAPI() {
    const url = 'https://backend-fq5f9bm5c-nomorningst-2550s-projects.vercel.app/api/test-data';
    
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π API –¥–∞–Ω–Ω—ã—Ö...');
    console.log('URL:', url);
    
    try {
        const response = await fetch(url);
        const data = await response.json();
        
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:');
        console.log(JSON.stringify(data, null, 2));
        
        if (data.status === 'success') {
            console.log(`\n‚úÖ –£—Å–ø–µ—Ö! –ù–∞–π–¥–µ–Ω–æ:`);
            console.log(`- –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${data.data.totalCategories}`);
            console.log(`- –ó–Ω–∞—á–∫–æ–≤: ${data.data.totalBadges}`);
            console.log(`- –£—Ä–æ–≤–Ω–µ–π: ${data.data.totalLevels}`);
            
            if (data.data.categories.length > 0) {
                console.log('\nüìã –ü–µ—Ä–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
                data.data.categories.slice(0, 5).forEach(cat => {
                    console.log(`  - ${cat.name} (${cat.badgeCount} –∑–Ω–∞—á–∫–æ–≤)`);
                });
            }
        } else {
            console.log(`\n‚ùå –û—à–∏–±–∫–∞: ${data.message}`);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    }
}

testSimpleAPI();
