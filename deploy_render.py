#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ Render
"""
import os
import subprocess
import json
import requests
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Render
RENDER_API_TOKEN = os.getenv('RENDER_API_TOKEN', 'rnd_h0aJfxLMhjWzHNJx1lGouoyEEQnP')
RENDER_API_BASE = 'https://api.render.com/v1'

def get_headers():
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤"""
    return {
        'Authorization': f'Bearer {RENDER_API_TOKEN}',
        'Content-Type': 'application/json'
    }

def check_render_service_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ Render"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ Render...")
    
    try:
        response = requests.get(f'{RENDER_API_BASE}/services', headers=get_headers())
        response.raise_for_status()
        
        services = response.json()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: {len(services)}")
        
        for service in services:
            service_name = service.get('name', 'Unknown')
            service_details = service.get('serviceDetails', {})
            print(f"  - {service_name}")
            print(f"    –°—Ç–∞—Ç—É—Å: {service.get('serviceDetails', {}).get('buildCommand', 'N/A')}")
            print(f"    URL: {service.get('serviceDetails', {}).get('url', 'N/A')}")
            print(f"    –°–æ–∑–¥–∞–Ω: {service.get('createdAt', 'N/A')}")
            print()
            
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")

def create_render_blueprint():
    """–°–æ–∑–¥–∞—Ç—å blueprint –¥–ª—è –¥–µ–ø–ª–æ—è"""
    print("üìã –°–æ–∑–¥–∞–µ–º blueprint –¥–ª—è Render...")
    
    blueprint_data = {
        "name": "putevoditel-app",
        "services": [
            {
                "name": "putevoditel-frontend",
                "type": "web",
                "env": "static",
                "buildCommand": "npm install && npm run build",
                "staticPublishPath": "./dist"
            },
            {
                "name": "putevoditel-chatbot",
                "type": "web", 
                "env": "python",
                "buildCommand": "pip install -r chatbot/requirements.txt",
                "startCommand": "cd chatbot && python main.py"
            }
        ]
    }
    
    try:
        response = requests.post(
            f'{RENDER_API_BASE}/blueprints',
            headers=get_headers(),
            json=blueprint_data
        )
        response.raise_for_status()
        
        result = response.json()
        print(f"‚úÖ Blueprint —Å–æ–∑–¥–∞–Ω: {result.get('id')}")
        return result
        
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ blueprint: {e}")
        return None

def deploy_to_render():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ø–ª–æ—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –Ω–∞ Render...")
    print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º API —Ç–æ–∫–µ–Ω: {RENDER_API_TOKEN[:10]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ render.yaml
    if not Path('render.yaml').exists():
        print("‚ùå –§–∞–π–ª render.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
    check_render_service_status()
    
    print("\nüìù –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://dashboard.render.com")
    print("2. –ù–∞–∂–º–∏—Ç–µ 'New +' -> 'Blueprint'")
    print("3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∞—à GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
    print("4. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª render.yaml")
    print("5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("   - OPENAI_API_KEY: –≤–∞—à –∫–ª—é—á OpenAI")
    print("   - RENDER_API_TOKEN: rnd_h0aJfxLMhjWzHNJx1lGouoyEEQnP")
    print("6. –ù–∞–∂–º–∏—Ç–µ 'Apply' –¥–ª—è –¥–µ–ø–ª–æ—è")
    
    return True

if __name__ == "__main__":
    deploy_to_render()
