#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Flask API –¥–ª—è –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è "–†–µ–∞–ª—å–Ω–æ–≥–æ –õ–∞–≥–µ—Ä—è"
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∏ –∑–Ω–∞—á–∫–∞—Ö
"""

from flask import Flask, jsonify, request, send_from_directory
from flask_cors import CORS
import json
import os
import requests
from pathlib import Path

app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
DATA_FILE = "perfect_parsed_data.json"

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        "message": "–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å API",
        "version": "2.0.0",
        "total_badges": 242,
        "total_categories": 14,
        "endpoints": {
            "categories": "/api/categories",
            "badges": "/api/badges",
            "data": "/api/data",
            "category": "/api/category/<id>",
            "badge": "/api/badge/<id>",
            "search": "/api/search",
            "stats": "/api/stats"
        }
    })

@app.route('/api/data')
def get_all_data():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∑–Ω–∞—á–∫–∏)"""
    try:
        if not os.path.exists(DATA_FILE):
            return jsonify({"error": "–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
        
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        return jsonify(data)
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"}), 500

@app.route('/api/categories')
def get_categories():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        if not os.path.exists(DATA_FILE):
            return jsonify({"error": "–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
        
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        return jsonify({
            "categories": data.get("categories", []),
            "total": len(data.get("categories", []))
        })
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}"}), 500

@app.route('/api/badges')
def get_badges():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–Ω–∞—á–∫–æ–≤"""
    try:
        if not os.path.exists(DATA_FILE):
            return jsonify({"error": "–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
        
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_id = request.args.get('category_id')
        badges = data.get("badges", [])
        
        if category_id:
            badges = [badge for badge in badges if badge.get("category_id") == category_id]
        
        return jsonify({
            "badges": badges,
            "total": len(badges)
        })
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–Ω–∞—á–∫–æ–≤: {str(e)}"}), 500

@app.route('/api/category/<category_id>')
def get_category(category_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID"""
    try:
        if not os.path.exists(DATA_FILE):
            return jsonify({"error": "–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
        
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        categories = data.get("categories", [])
        category = next((cat for cat in categories if cat.get("id") == category_id), None)
        
        if not category:
            return jsonify({"error": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}), 404
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–∫–∏ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        badges = data.get("badges", [])
        category_badges = [badge for badge in badges if badge.get("category_id") == category_id]
        
        category["badges"] = category_badges
        
        return jsonify(category)
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}"}), 500

@app.route('/api/badge/<badge_id>')
def get_badge(badge_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–Ω–∞—á–æ–∫ –ø–æ ID"""
    try:
        if not os.path.exists(DATA_FILE):
            return jsonify({"error": "–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
        
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        badges = data.get("badges", [])
        badge = next((badge for badge in badges if badge.get("id") == badge_id), None)
        
        if not badge:
            return jsonify({"error": "–ó–Ω–∞—á–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
        
        return jsonify(badge)
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–Ω–∞—á–∫–∞: {str(e)}"}), 500

@app.route('/api/search')
def search_badges():
    """–ü–æ–∏—Å–∫ –∑–Ω–∞—á–∫–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é"""
    try:
        query = request.args.get('q', '').lower()
        if not query:
            return jsonify({"error": "–ù–µ–æ–±—Ö–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä 'q' –¥–ª—è –ø–æ–∏—Å–∫–∞"}), 400
        
        if not os.path.exists(DATA_FILE):
            return jsonify({"error": "–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
        
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        badges = data.get("badges", [])
        results = []
        
        for badge in badges:
            title = badge.get("title", "").lower()
            description = badge.get("description", "").lower()
            
            if query in title or query in description:
                results.append(badge)
        
        return jsonify({
            "results": results,
            "total": len(results),
            "query": query
        })
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"}), 500

@app.route('/api/stats')
def get_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–Ω–∞—á–∫–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    try:
        if not os.path.exists(DATA_FILE):
            return jsonify({"error": "–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
        
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        categories = data.get("categories", [])
        badges = data.get("badges", [])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
        level_stats = {}
        for badge in badges:
            level = badge.get("level", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            level_stats[level] = level_stats.get(level, 0) + 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_stats = {}
        for category in categories:
            cat_id = category.get("id")
            cat_badges = [b for b in badges if b.get("category_id") == cat_id]
            category_stats[cat_id] = {
                "title": category.get("title"),
                "total_badges": len(cat_badges),
                "expected_badges": category.get("expected_badges", 0)
            }
        
        return jsonify({
            "total_categories": len(categories),
            "total_badges": len(badges),
            "level_distribution": level_stats,
            "category_distribution": category_stats,
            "metadata": data.get("metadata", {})
        })
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"}), 500

@app.route('/perfect_parsed_data.json')
def serve_parsed_data():
    """–°–µ—Ä–≤–∏–º —Ñ–∞–π–ª —Å –ø–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        return send_from_directory('.', 'perfect_parsed_data.json')
    except Exception as e:
        return jsonify({"error": f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {str(e)}"}), 404

@app.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            return jsonify({
                "status": "healthy",
                "data_file": DATA_FILE,
                "total_categories": len(data.get("categories", [])),
                "total_badges": len(data.get("badges", [])),
                "last_parsed": data.get("metadata", {}).get("parsed_at", "unknown")
            })
        else:
            return jsonify({
                "status": "unhealthy",
                "error": "Data file not found"
            }), 503
    except Exception as e:
        return jsonify({
            "status": "unhealthy",
            "error": str(e)
        }), 503

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è...")
    print(f"üìÅ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: {DATA_FILE}")
    
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data.get('categories', []))} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ {len(data.get('badges', []))} –∑–Ω–∞—á–∫–æ–≤")
    else:
        print("‚ö†Ô∏è –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
@app.route('/api/chat', methods=['POST'])
def chat_with_bot():
    """–ü—Ä–æ–∫—Å–∏ –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞ –ù–µ–π—Ä–æ–í–∞–ª—é—à–∏"""
    try:
        data = request.get_json()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è FastAPI
        chat_request = {
            "message": data.get("message", ""),
            "user_id": data.get("user_id", "web_user")
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º context —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
        context = data.get("context", {})
        if context and isinstance(context, dict) and context:
            chat_request["context"] = context
        
        # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ FastAPI —á–∞—Ç-–±–æ—Ç—É
        chat_response = requests.post(
            'http://127.0.0.1:8000/chat',
            json=chat_request,
            headers={'Content-Type': 'application/json'},
            timeout=30
        )
        
        if chat_response.status_code == 200:
            return jsonify(chat_response.json())
        else:
            return jsonify({
                "error": "–ß–∞—Ç-–±–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                "message": "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            }), 503
            
    except requests.exceptions.ConnectionError:
        return jsonify({
            "error": "–ß–∞—Ç-–±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω",
            "message": "–ù–µ–π—Ä–æ–í–∞–ª—é—à–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —á–∞—Ç-–±–æ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ."
        }), 503
    except Exception as e:
        return jsonify({
            "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —á–∞—Ç-–±–æ—Ç—É",
            "message": str(e)
        }), 500

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ Flask API –¥–ª—è –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è...")
    
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data.get('categories', []))} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ {len(data.get('badges', []))} –∑–Ω–∞—á–∫–æ–≤")
    else:
        print("‚ö†Ô∏è –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    print("üåê API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5000")
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: http://localhost:5000/api/stats")
    print("üîç –ü–æ–∏—Å–∫: http://localhost:5000/api/search?q=–≤–∞–ª—é—à–∞")
    print("ü§ñ –ß–∞—Ç-–±–æ—Ç: http://localhost:5000/api/chat")
    
    app.run(debug=False, host='0.0.0.0', port=5000)
