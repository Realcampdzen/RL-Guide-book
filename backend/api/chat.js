export default function handler(req, res) {
  // –í–∫–ª—é—á–∞–µ–º CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  if (req.method === 'POST') {
    try {
      const { message } = req.body;
      
      const responses = [
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ù–µ–π—Ä–æ–í–∞–ª—é—à–∞, —Ü–∏—Ñ—Ä–æ–≤–∞—è –≤–æ–∂–∞—Ç–∞—è –ø—Ä–æ–µ–∫—Ç–∞ '–†–µ–∞–ª—å–Ω—ã–π –õ–∞–≥–µ—Ä—å'! üåü",
        "–í '–†–µ–∞–ª—å–Ω–æ–º –õ–∞–≥–µ—Ä–µ' –µ—Å—Ç—å 14 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–Ω–∞—á–∫–æ–≤ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–∞–∑–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤!",
        "–°–∏—Å—Ç–µ–º–∞ –∑–Ω–∞—á–∫–æ–≤ –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ª–∞–≥–µ—Ä—è!",
        "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –∑–Ω–∞—á–∫–∞—Ö? –ü–æ—Å–º–æ—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!",
        "–ö–∞–∂–¥—ã–π –∑–Ω–∞—á–æ–∫ –∏–º–µ–µ—Ç —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: –±–∞–∑–æ–≤—ã–π, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π!"
      ];
      
      let response;
      if (message && message.toLowerCase().includes('–ø—Ä–∏–≤–µ—Ç')) {
        response = responses[0];
      } else if (message && message.toLowerCase().includes('–∑–Ω–∞—á–∫')) {
        response = responses[1];
      } else if (message && message.toLowerCase().includes('—Å–∏—Å—Ç–µ–º')) {
        response = responses[2];
      } else if (message && message.toLowerCase().includes('–∫–∞—Ç–µ–≥–æ—Ä–∏')) {
        response = responses[3];
      } else if (message && message.toLowerCase().includes('—É—Ä–æ–≤–µ–Ω')) {
        response = responses[4];
      } else {
        response = responses[0];
      }
      
      res.status(200).json({
        response: response,
        suggestions: [
          "–ü–æ–∫–∞–∂–∏ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–Ω–∞—á–∫–æ–≤",
          "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–∏—Å—Ç–µ–º–µ –∑–Ω–∞—á–∫–æ–≤"
        ]
      });
    } catch (error) {
      res.status(500).json({
        error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —á–∞—Ç-–±–æ—Ç—É",
        message: error.message
      });
    }
  } else {
    res.status(405).json({ error: 'Method not allowed' });
  }
}
