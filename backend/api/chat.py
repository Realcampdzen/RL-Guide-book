from flask import Flask, jsonify, request
from flask_cors import CORS
import json
import os

app = Flask(__name__)
CORS(app)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
DATA_FILE = "perfect_parsed_data.json"

@app.route('/api/chat', methods=['POST'])
def chat_with_bot():
    """–ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç-–±–æ—Ç –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    try:
        data = request.get_json()
        message = data.get("message", "")
        
        # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –±–µ–∑ OpenAI –¥–ª—è –Ω–∞—á–∞–ª–∞
        responses = [
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ù–µ–π—Ä–æ–í–∞–ª—é—à–∞, —Ü–∏—Ñ—Ä–æ–≤–∞—è –≤–æ–∂–∞—Ç–∞—è –ø—Ä–æ–µ–∫—Ç–∞ '–†–µ–∞–ª—å–Ω—ã–π –õ–∞–≥–µ—Ä—å'! üåü",
            "–í '–†–µ–∞–ª—å–Ω–æ–º –õ–∞–≥–µ—Ä–µ' –µ—Å—Ç—å 14 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–Ω–∞—á–∫–æ–≤ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–∞–∑–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤!",
            "–°–∏—Å—Ç–µ–º–∞ –∑–Ω–∞—á–∫–æ–≤ –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ª–∞–≥–µ—Ä—è!",
            "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –∑–Ω–∞—á–∫–∞—Ö? –ü–æ—Å–º–æ—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!",
            "–ö–∞–∂–¥—ã–π –∑–Ω–∞—á–æ–∫ –∏–º–µ–µ—Ç —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: –±–∞–∑–æ–≤—ã–π, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π!",
            "–ó–Ω–∞—á–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é –∏ –ª–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞!"
        ]
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
        if "–ø—Ä–∏–≤–µ—Ç" in message.lower() or "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π" in message.lower():
            response = responses[0]
        elif "–∑–Ω–∞—á–∫" in message.lower():
            response = responses[1]
        elif "—Å–∏—Å—Ç–µ–º" in message.lower():
            response = responses[2]
        elif "–∫–∞—Ç–µ–≥–æ—Ä–∏" in message.lower():
            response = responses[3]
        elif "—É—Ä–æ–≤–µ–Ω" in message.lower():
            response = responses[4]
        elif "—Ä–∞–∑–≤–∏—Ç" in message.lower():
            response = responses[5]
        else:
            response = responses[0]  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        return jsonify({
            "response": response,
            "suggestions": [
                "–ü–æ–∫–∞–∂–∏ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–Ω–∞—á–∫–æ–≤",
                "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–∏—Å—Ç–µ–º–µ –∑–Ω–∞—á–∫–æ–≤",
                "–ö–∞–∫–∏–µ –µ—Å—Ç—å —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏?"
            ]
        })
        
    except Exception as e:
        return jsonify({
            "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —á–∞—Ç-–±–æ—Ç—É",
            "message": str(e)
        }), 500

@app.route('/api/stats')
def get_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–Ω–∞—á–∫–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    try:
        if not os.path.exists(DATA_FILE):
            return jsonify({"error": "–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
        
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        categories = data.get("categories", [])
        badges = data.get("badges", [])
        
        return jsonify({
            "total_categories": len(categories),
            "total_badges": len(badges),
            "status": "API —Ä–∞–±–æ—Ç–∞–µ—Ç!"
        })
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"}), 500

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        "message": "–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å API",
        "version": "2.0.0",
        "endpoints": {
            "chat": "/api/chat",
            "stats": "/api/stats"
        }
    })

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º app –¥–ª—è Vercel
if __name__ == '__main__':
    app.run(debug=True)
