// API –¥–ª—è –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è –†–µ–∞–ª—å–Ω–æ–≥–æ –õ–∞–≥–µ—Ä—è —Å –ø–æ–ª–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
import { dataLoader } from '../data_loader.js';
import { contextManager } from '../context_manager.js';
import { responseGenerator } from '../response_generator.js';

export default async function handler(req, res) {
  // –í–∫–ª—é—á–∞–µ–º CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  const { pathname } = new URL(req.url, `http://${req.headers.host}`);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
  try {
    if (!dataLoader.badgeDataCache) {
      dataLoader.loadAllData();
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
  }

  if (pathname === '/api/stats') {
    try {
      const stats = dataLoader.getStats();
      res.status(200).json({
        ...stats,
        message: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ Vercel API —Å –ø–æ–ª–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"
      });
    } catch (error) {
      res.status(200).json({
        total_categories: 14,
        total_badges: 119,
        total_levels: 242,
        message: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ Vercel API (fallback)"
      });
    }
    return;
  }

  if (pathname === '/api/chat') {
    if (req.method === 'POST') {
      try {
        const { message, user_id = 'web_user', context } = req.body;
        
        if (!message) {
          res.status(400).json({ error: "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" });
          return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ–±-–∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if (context) {
          contextManager.updateWebContext(user_id, context);
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const conversationHistory = contextManager.getConversationHistory(user_id);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        contextManager.addMessageToHistory(user_id, {
          role: "user",
          content: message,
          metadata: {}
        });
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        const response = await responseGenerator.generateResponse(
          message,
          user_id,
          conversationHistory
        );
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        contextManager.addMessageToHistory(user_id, {
          role: "assistant",
          content: response.response,
          metadata: response.metadata
        });
        
        res.status(200).json(response);

      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ AI:", error);
        
        // Fallback –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ AI
        const { message } = req.body;
        res.status(200).json({
          response: `–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ù–µ–π—Ä–æ–í–∞–ª—é—à–∞, —Ü–∏—Ñ—Ä–æ–≤–∞—è –≤–æ–∂–∞—Ç–∞—è "–†–µ–∞–ª—å–Ω–æ–≥–æ –õ–∞–≥–µ—Ä—è"! 

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ —è –≤—Å–µ —Ä–∞–≤–Ω–æ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å! 

–¢—ã –Ω–∞–ø–∏—Å–∞–ª: "${message}"

–ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ:
üèÜ –°–∏—Å—Ç–µ–º–µ –∑–Ω–∞—á–∫–æ–≤ (14 –∫–∞—Ç–µ–≥–æ—Ä–∏–π, 119 –∑–Ω–∞—á–∫–æ–≤!)
üéØ –î–≤–∏–∂–∫–∞—Ö –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –ª–∞–≥–µ—Ä—è
üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
üí° –°–æ–≤–µ—Ç–∞—Ö –ø–æ —É—á–∞—Å—Ç–∏—é –≤ –ª–∞–≥–µ—Ä–Ω–æ–π –∂–∏–∑–Ω–∏

–ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üòä`,
          suggestions: [
            "–ü–æ–∫–∞–∂–∏ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–Ω–∞—á–∫–æ–≤",
            "–†–µ–∫–æ–º–µ–Ω–¥—É–π –∑–Ω–∞—á–∫–∏ –ø–æ –º–æ–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º",
            "–û–±—ä—è—Å–Ω–∏ —Ñ–∏–ª–æ—Å–æ—Ñ–∏—é —Å–∏—Å—Ç–µ–º—ã –∑–Ω–∞—á–∫–æ–≤"
          ],
          context_updates: null,
          metadata: {
            error: error.message,
            timestamp: new Date().toISOString()
          }
        });
      }
      return;
    }
  }

  // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  res.status(200).json({
    message: "API –¥–ª—è –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è –†–µ–∞–ª—å–Ω–æ–≥–æ –õ–∞–≥–µ—Ä—è —Å –ø–æ–ª–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π",
    endpoints: [
      "/api/stats",
      "/api/chat"
    ],
    status: "ready",
    ai: "OpenAI GPT-3.5-turbo",
    features: [
      "–ü–æ–ª–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤ (119 –∑–Ω–∞—á–∫–æ–≤, 14 –∫–∞—Ç–µ–≥–æ—Ä–∏–π)",
      "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤",
      "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞",
      "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
      "–£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤"
    ]
  });
}
