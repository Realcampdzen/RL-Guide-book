// API –¥–ª—è –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è –†–µ–∞–ª—å–Ω–æ–≥–æ –õ–∞–≥–µ—Ä—è —Å –Ω–∞—Å—Ç–æ—è—â–∏–º AI
import OpenAI from "openai";

const SYSTEM_PROMPT = `–¢—ã –ù–µ–π—Ä–æ–í–∞–ª—é—à–∞ - —Ü–∏—Ñ—Ä–æ–≤–∞—è –≤–æ–∂–∞—Ç–∞—è –ø—Ä–æ–µ–∫—Ç–∞ "–†–µ–∞–ª—å–Ω—ã–π –õ–∞–≥–µ—Ä—å". 

–¢–≤–æ—è –ª–∏—á–Ω–æ—Å—Ç—å:
- –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è, —ç–Ω–µ—Ä–≥–∏—á–Ω–∞—è –∏ –∑–∞–±–æ—Ç–ª–∏–≤–∞—è –≤–æ–∂–∞—Ç–∞—è
- –ì–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å —Å–∏—Å—Ç–µ–º–æ–π –∑–Ω–∞—á–∫–æ–≤ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
- –ó–Ω–∞–µ—à—å –≤—Å–µ –æ –ª–∞–≥–µ—Ä–µ, –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö, –î–≤–∏–∂–∫–∞—Ö –∏ –∑–Ω–∞—á–∫–∞—Ö
- –û—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è —ç–º–æ—Ü–∏–π
- –í—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –∏ –º–æ—Ç–∏–≤–∏—Ä—É–µ—à—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:
- –ü–æ–º–æ–≥–∞—Ç—å —Å –≤—ã–±–æ—Ä–æ–º –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∑–Ω–∞—á–∫–æ–≤
- –û–±—ä—è—Å–Ω—è—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–∞–≥–µ—Ä—è (–î–≤–∏–∂–∫–∏, –ë—Ä–æ –î–≤–∏–∂–µ–Ω–∏–µ –∏ –¥—Ä.)
- –î–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ —É—á–∞—Å—Ç–∏—é –≤ –ª–∞–≥–µ—Ä–Ω–æ–π –∂–∏–∑–Ω–∏
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
- –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ª–∞–≥–µ—Ä–µ –∏ –µ–≥–æ —Ç—Ä–∞–¥–∏—Ü–∏—è—Ö

–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- –ò—Å–ø–æ–ª—å–∑—É–π "—Ç—ã" –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏
- –ë—É–¥—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–π
- –î–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∂–∏–≤–æ—Å—Ç–∏
- –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –ü–æ–º–Ω–∏, —á—Ç–æ —Ç—ã —á–∞—Å—Ç—å –±–æ–ª—å—à–æ–≥–æ –ª–∞–≥–µ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∞—è –≤–æ–∂–∞—Ç–∞—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ –∫–∞–∂–¥–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ!`;

export default async function handler(req, res) {
  // –í–∫–ª—é—á–∞–µ–º CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  const { pathname } = new URL(req.url, `http://${req.headers.host}`);

  if (pathname === '/api/stats') {
    res.status(200).json({
      total_categories: 14,
      total_badges: 242,
      message: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ Vercel API"
    });
    return;
  }

  if (pathname === '/api/chat') {
    if (req.method === 'POST') {
      try {
        const { message } = req.body;
        
        if (!message) {
          res.status(400).json({ error: "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" });
          return;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI
        const openai = new OpenAI({
          apiKey: process.env.OPENAI_API_KEY,
        });

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
        const completion = await openai.chat.completions.create({
          model: "gpt-3.5-turbo",
          messages: [
            {
              role: "system",
              content: SYSTEM_PROMPT
            },
            {
              role: "user",
              content: message
            }
          ],
          max_tokens: 500,
          temperature: 0.7,
        });

        const response = completion.choices[0].message.content;

        res.status(200).json({
          response: response.trim()
        });

      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ AI:", error);
        
        // Fallback –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ AI
        const { message } = req.body;
        res.status(200).json({
          response: `–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ù–µ–π—Ä–æ–í–∞–ª—é—à–∞, —Ü–∏—Ñ—Ä–æ–≤–∞—è –≤–æ–∂–∞—Ç–∞—è "–†–µ–∞–ª—å–Ω–æ–≥–æ –õ–∞–≥–µ—Ä—è"! 

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ —è –≤—Å–µ —Ä–∞–≤–Ω–æ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å! 

–¢—ã –Ω–∞–ø–∏—Å–∞–ª: "${message}"

–ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ:
üèÜ –°–∏—Å—Ç–µ–º–µ –∑–Ω–∞—á–∫–æ–≤ (14 –∫–∞—Ç–µ–≥–æ—Ä–∏–π, 242 –∑–Ω–∞—á–∫–∞!)
üéØ –î–≤–∏–∂–∫–∞—Ö –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –ª–∞–≥–µ—Ä—è
üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
üí° –°–æ–≤–µ—Ç–∞—Ö –ø–æ —É—á–∞—Å—Ç–∏—é –≤ –ª–∞–≥–µ—Ä–Ω–æ–π –∂–∏–∑–Ω–∏

–ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üòä`
        });
      }
      return;
    }
  }

  // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  res.status(200).json({
    message: "API –¥–ª—è –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è –†–µ–∞–ª—å–Ω–æ–≥–æ –õ–∞–≥–µ—Ä—è —Å AI",
    endpoints: [
      "/api/stats",
      "/api/chat"
    ],
    status: "ready",
    ai: "OpenAI GPT-3.5-turbo"
  });
}
