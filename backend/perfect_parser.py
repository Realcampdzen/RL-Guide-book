#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–¥–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è "–†–µ–∞–ª—å–Ω–æ–≥–æ –õ–∞–≥–µ—Ä—è"
–ö–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫ (241 –∑–Ω–∞—á–æ–∫ –≤—Å–µ–≥–æ)
"""

import re
import json
from dataclasses import dataclass, asdict
from typing import List, Dict, Optional, Set
from datetime import datetime


@dataclass
class Badge:
    id: str  # –Ω–∞–ø—Ä–∏–º–µ—Ä "1.1.1" –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –∏–ª–∏ "1.11" –¥–ª—è –æ–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö
    title: str
    emoji: str
    category_id: str
    level: str  # "–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å", "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "–û–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π"
    description: Optional[str] = None
    criteria: Optional[str] = None


@dataclass
class Category:
    id: str
    title: str
    description: Optional[str] = None
    badge_count: int = 0
    expected_badges: int = 0


class PerfectPutevoditelParser:
    def __init__(self, file_path: str):
        self.file_path = file_path
        self.categories: List[Category] = []
        self.badges: List[Badge] = []
        self.processed_badges: Set[str] = set()
        self.processed_categories: Set[str] = set()
        
    def parse(self) -> Dict:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print(f"–ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞: {self.file_path}")
        
        with open(self.file_path, 'r', encoding='utf-8') as file:
            content = file.read()
        
        # –ù–∞—Ö–æ–¥–∏–º –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ
        toc_start = content.find("–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ")
        if toc_start == -1:
            toc_start = content.find("1. –ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´–ó–∞ –ª–∏—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è¬ª")
        
        # –ò—â–µ–º –∫–æ–Ω–µ—Ü –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è
        toc_end = content.find("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∑–Ω–∞—á–∫–∏.", toc_start)
        if toc_end == -1:
            # –ò—â–µ–º –≤—Ç–æ—Ä–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ "1. –ö–∞—Ç–µ–≥–æ—Ä–∏—è"
            first_cat = content.find("1. –ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´–ó–∞ –ª–∏—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è¬ª", toc_start)
            if first_cat != -1:
                second_cat = content.find("1. –ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´–ó–∞ –ª–∏—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è¬ª", first_cat + 1)
                if second_cat != -1:
                    toc_end = second_cat
        
        if toc_end == -1:
            toc_end = len(content)
        
        toc_content = content[toc_start:toc_end]
        lines = toc_content.split('\n')
        
        self._parse_toc(lines)
        self._validate_results()
        
        return self._create_output()
    
    def _parse_toc(self, lines: List[str]):
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è"""
        current_category = None
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è
        expected_counts = {
            "1": 40,  # –ó–∞ –ª–∏—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            "2": 9,   # –ó–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –¥–µ–ª–∞
            "3": 9,   # –ú–µ–¥–∏–∞ –∑–Ω–∞—á–∫–∏
            "4": 10,  # –ó–∞ –ª–∞–≥–µ—Ä–Ω—ã–µ –¥–µ–ª–∞
            "5": 20,  # –ó–∞ –æ—Ç—Ä—è–¥–Ω—ã–µ –¥–µ–ª–∞ (–∏–∑ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è)
            "6": 12,  # –ì–∞—Ä–º–æ–Ω–∏—è –∏ –ø–æ—Ä—è–¥–æ–∫
            "7": 24,  # –ó–∞ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            "8": 9,   # –ó–Ω–∞—á–∫–∏ –î–≤–∏–∂–∫–æ–≤ (–∏–∑ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è)
            "9": 10,  # –ó–Ω–∞—á–∫–∏ –ë—Ä–æ ‚Äì –î–≤–∏–∂–µ–Ω–∏—è
            "10": 3,  # –ó–Ω–∞—á–∫–∏ –Ω–∞ —Ñ–ª–∞–≥ –æ—Ç—Ä—è–¥–∞
            "11": 16, # –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å
            "12": 35, # –ò–ò: –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            "13": 26, # –°–æ—Ñ—Ç-—Å–∫–∏–ª–ª–∑ (–∏–∑ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è)
            "14": 19  # –ó–Ω–∞—á–∫–∏ –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ –ü–æ–ª—å–∑—ã
        }
        
        for line in lines:
            line = line.strip()
            if not line:
                continue
            
            # –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            category_match = re.match(r'^(\d+)\.\s*–ö–∞—Ç–µ–≥–æ—Ä–∏—è\s*¬´([^¬ª]+)¬ª\s*[‚Äì‚Äî]\s*(\d+)\s*(?:–∑–Ω–∞—á–∫–æ–≤?|–∑–Ω–∞—á–∫–∞|–±—Ä–æ–∑–Ω–∞—á–∫–æ–≤?)\.?', line)
            if category_match:
                cat_id = category_match.group(1)
                cat_title = category_match.group(2)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                expected_count = expected_counts.get(cat_id, 0)
                
                if cat_id not in self.processed_categories:
                    current_category = Category(
                        id=cat_id,
                        title=cat_title,
                        expected_badges=expected_count
                    )
                    self.categories.append(current_category)
                    self.processed_categories.add(cat_id)
                    print(f"–ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_title} (–æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_count} –∑–Ω–∞—á–∫–æ–≤)")
                continue
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–∫–æ–≤
            if current_category:
                self._parse_badge_line(line, current_category)
    
    def _parse_badge_line(self, line: str, category: Category):
        """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫ –∑–Ω–∞—á–∫–æ–≤"""
        # –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –∑–Ω–∞—á–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: "1.1.1. –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å ‚Äì üîπ ¬´–í–∞–ª—é—à–∞¬ª")
        multi_level_match = re.match(r'^(\d+)\.(\d+)\.(\d+)\.\s*(–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å|–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å\s*\d*|–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)\s*[‚Äì‚Äî]\s*([^\s]+)\s*¬´([^¬ª]+)¬ª', line)
        if multi_level_match:
            self._parse_multi_level_badge(multi_level_match, category)
            return
        
        # –û–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –∑–Ω–∞—á–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: "1.11 ¬´–ó–Ω–∞—á–æ–∫ –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏¬ª –∏–ª–∏ ¬´–ù–µ–≤–æ–∑–º–æ–∂–Ω—ã–π –ó–Ω–∞—á–æ–∫¬ª")
        single_level_match = re.match(r'^(\d+)\.(\d+)\s*¬´([^¬ª]+)¬ª\s*(?:–∏–ª–∏\s*¬´([^¬ª]+)¬ª)?', line)
        if single_level_match:
            self._parse_single_level_badge(single_level_match, category)
            return
        
        # –ó–Ω–∞—á–∫–∏ —Å —ç–º–æ–¥–∑–∏ (—Ñ–æ—Ä–º–∞—Ç: "2.2 –ó–Ω–∞—á–æ–∫ ‚òÄÔ∏è ¬´–°–æ–ª–Ω—Ü–µ¬ª")
        emoji_badge_match = re.match(r'^(\d+)\.(\d+)\s*–ó–Ω–∞—á–æ–∫\s*([^\s]+)\s*¬´([^¬ª]+)¬ª', line)
        if emoji_badge_match:
            self._parse_emoji_badge(emoji_badge_match, category)
            return
        
        # –ó–Ω–∞—á–∫–∏ —Å —ç–º–æ–¥–∑–∏ –±–µ–∑ "–ó–Ω–∞—á–æ–∫" (—Ñ–æ—Ä–º–∞—Ç: "2.4 –ó–Ω–∞—á–æ–∫ üèïÔ∏è ¬´–†–µ–∞–ª—å–Ω—ã–π –õ–∞–≥–µ—Ä—å¬ª")
        emoji_only_match = re.match(r'^(\d+)\.(\d+)\s*([^\s]+)\s*¬´([^¬ª]+)¬ª', line)
        if emoji_only_match:
            self._parse_emoji_only_badge(emoji_only_match, category)
            return
        
        # –ó–Ω–∞—á–∫–∏ —Å "–ë—Ä–æ–∑–Ω–∞—á–æ–∫" (—Ñ–æ—Ä–º–∞—Ç: "9.6. –ë—Ä–æ–∑–Ω–∞—á–æ–∫ üåå ¬´–ì–æ—Ä–∏–∑–æ–Ω—Ç –°–æ–±—ã—Ç–∏–π¬ª")
        broznachok_match = re.match(r'^(\d+)\.(\d+)\.\s*–ë—Ä–æ–∑–Ω–∞—á–æ–∫\s*([^\s]+)\s*¬´([^¬ª]+)¬ª', line)
        if broznachok_match:
            self._parse_broznachok_badge(broznachok_match, category)
            return
        
        # –ó–Ω–∞—á–∫–∏ —Å "–í—ã—Å—à–∏–π –∑–Ω–∞—á–æ–∫" (—Ñ–æ—Ä–º–∞—Ç: "9.8. ‚ö´ ¬´–ß—ë—Ä–Ω—ã–π –ë—Ä–æ–∑–Ω–∞—á–æ–∫¬ª. –í—ã—Å—à–∏–π –∑–Ω–∞—á–æ–∫ –ë—Ä–æ –û—Ç—Ä—è–¥–∞.")
        highest_badge_match = re.match(r'^(\d+)\.(\d+)\.\s*([^\s]+)\s*¬´([^¬ª]+)¬ª\.\s*–í—ã—Å—à–∏–π –∑–Ω–∞—á–æ–∫', line)
        if highest_badge_match:
            self._parse_highest_badge(highest_badge_match, category)
            return
        
        # –ù–û–í–´–ï –ü–ê–¢–¢–ï–†–ù–´ –î–õ–Ø –ö–ê–¢–ï–ì–û–†–ò–ô 10 –ò 11
        
        # –ó–Ω–∞—á–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 10 (—Ñ–æ—Ä–º–∞—Ç: "10.1. –ó–Ω–∞—á–æ–∫ üí° ¬´–ú–µ—Ä—Ü–∞—é—â–∏–π –ú–∞—è–∫¬ª.")
        category_10_match = re.match(r'^(\d+)\.(\d+)\.\s*–ó–Ω–∞—á–æ–∫\s*([^\s]+)\s*¬´([^¬ª]+)¬ª\.', line)
        if category_10_match:
            self._parse_category_10_badge(category_10_match, category)
            return
        
        # –ó–Ω–∞—á–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 11 –±–µ–∑ —Ç–æ—á–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: "11.1 –ó–Ω–∞—á–æ–∫ üí≠ ¬´–†–µ–∞–ª—å–Ω–æ–µ –Ø-–°–æ–æ–±—â–µ–Ω–∏–µ¬ª.")
        category_11_no_dot_match = re.match(r'^(\d+)\.(\d+)\s*–ó–Ω–∞—á–æ–∫\s*([^\s]+)\s*¬´([^¬ª]+)¬ª\.', line)
        if category_11_no_dot_match:
            self._parse_category_11_no_dot_badge(category_11_no_dot_match, category)
            return
        
        # –ó–Ω–∞—á–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 11 —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º (—Ñ–æ—Ä–º–∞—Ç: "11.6. –ó–Ω–∞—á–æ–∫ üëÅÔ∏è ¬´–†–µ–∞–ª—å–Ω–æ–µ –í–Ω–∏–º–∞–Ω–∏–µ¬ª –∏–ª–∏ ¬´–¶–∏—Ñ—Ä–æ–≤–æ–π –î–µ—Ç–æ–∫—Å¬ª.")
        category_11_alt_match = re.match(r'^(\d+)\.(\d+)\.\s*–ó–Ω–∞—á–æ–∫\s*([^\s]+)\s*¬´([^¬ª]+)¬ª\s*–∏–ª–∏\s*¬´([^¬ª]+)¬ª\.', line)
        if category_11_alt_match:
            self._parse_category_11_alt_badge(category_11_alt_match, category)
            return
        
        # –ó–Ω–∞—á–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 8 –±–µ–∑ —Å–ª–æ–≤–∞ "–ó–Ω–∞—á–æ–∫" (—Ñ–æ—Ä–º–∞—Ç: "8.2. üü£ ¬´–§–∏–æ–ª–µ—Ç–æ–≤—ã–π –ó–Ω–∞—á–æ–∫ –î–≤–∏–∂–∫–∞¬ª.")
        category_8_simple_match = re.match(r'^(\d+)\.(\d+)\.\s*([^\s]+)\s*¬´([^¬ª]+)¬ª\.', line)
        if category_8_simple_match:
            self._parse_category_8_simple_badge(category_8_simple_match, category)
            return
        
        # –ó–Ω–∞—á–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 14 —Å "–∑–Ω–∞—á–æ–∫" –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ (—Ñ–æ—Ä–º–∞—Ç: "14.1.2. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å ‚Äì –∑–Ω–∞—á–æ–∫ üîç ¬´–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –†–µ–∞–ª—å–Ω—ã–π –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä¬ª.")
        category_14_middle_match = re.match(r'^(\d+)\.(\d+)\.(\d+)\.\s*(–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å|–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å|–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)\s*[‚Äì‚Äî]\s*–∑–Ω–∞—á–æ–∫\s*([^\s]+)\s*¬´([^¬ª]+)¬ª', line)
        if category_14_middle_match:
            self._parse_category_14_middle_badge(category_14_middle_match, category)
            return
    
    def _parse_multi_level_badge(self, match, category: Category):
        """–ü–∞—Ä—Å–∏–Ω–≥ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –∑–Ω–∞—á–∫–æ–≤ - –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫"""
        cat_id = match.group(1)
        badge_id = match.group(2)
        level_num = match.group(3)
        level_type = match.group(4)
        emoji = match.group(5)
        title = match.group(6)
        
        badge_key = f"{cat_id}.{badge_id}.{level_num}"
        
        if badge_key not in self.processed_badges:
            badge = Badge(
                id=badge_key,
                title=title,
                emoji=emoji,
                category_id=cat_id,
                level=level_type
            )
            self.badges.append(badge)
            self.processed_badges.add(badge_key)
            print(f"  - {level_type}: {title} {emoji}")
    
    def _parse_single_level_badge(self, match, category: Category):
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –∑–Ω–∞—á–∫–æ–≤"""
        cat_id = match.group(1)
        badge_id = match.group(2)
        title1 = match.group(3)
        title2 = match.group(4) if match.group(4) else ""
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
        title = title1
        if title2:
            title = f"{title1} –∏–ª–∏ {title2}"
        
        badge_key = f"{cat_id}.{badge_id}"
        if badge_key not in self.processed_badges:
            badge = Badge(
                id=badge_key,
                title=title,
                emoji="",
                category_id=cat_id,
                level="–û–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π"
            )
            self.badges.append(badge)
            self.processed_badges.add(badge_key)
            print(f"  - –û–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π: {title}")
    
    def _parse_emoji_badge(self, match, category: Category):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–∫–æ–≤ —Å —ç–º–æ–¥–∑–∏ –∏ —Å–ª–æ–≤–æ–º '–ó–Ω–∞—á–æ–∫'"""
        cat_id = match.group(1)
        badge_id = match.group(2)
        emoji = match.group(3)
        title = match.group(4)
        
        badge_key = f"{cat_id}.{badge_id}"
        if badge_key not in self.processed_badges:
            badge = Badge(
                id=badge_key,
                title=title,
                emoji=emoji,
                category_id=cat_id,
                level="–û–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π"
            )
            self.badges.append(badge)
            self.processed_badges.add(badge_key)
            print(f"  - –û–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π: {title} {emoji}")
    
    def _parse_emoji_only_badge(self, match, category: Category):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–∫–æ–≤ —Ç–æ–ª—å–∫–æ —Å —ç–º–æ–¥–∑–∏"""
        cat_id = match.group(1)
        badge_id = match.group(2)
        emoji = match.group(3)
        title = match.group(4)
        
        badge_key = f"{cat_id}.{badge_id}"
        if badge_key not in self.processed_badges:
            badge = Badge(
                id=badge_key,
                title=title,
                emoji=emoji,
                category_id=cat_id,
                level="–û–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π"
            )
            self.badges.append(badge)
            self.processed_badges.add(badge_key)
            print(f"  - –û–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π: {title} {emoji}")
    
    def _parse_broznachok_badge(self, match, category: Category):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–∫–æ–≤ —Å '–ë—Ä–æ–∑–Ω–∞—á–æ–∫'"""
        cat_id = match.group(1)
        badge_id = match.group(2)
        emoji = match.group(3)
        title = match.group(4)
        
        badge_key = f"{cat_id}.{badge_id}"
        if badge_key not in self.processed_badges:
            badge = Badge(
                id=badge_key,
                title=title,
                emoji=emoji,
                category_id=cat_id,
                level="–û–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π"
            )
            self.badges.append(badge)
            self.processed_badges.add(badge_key)
            print(f"  - –û–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π: {title} {emoji}")
    
    def _parse_highest_badge(self, match, category: Category):
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—ã—Å—à–∏—Ö –∑–Ω–∞—á–∫–æ–≤"""
        cat_id = match.group(1)
        badge_id = match.group(2)
        emoji = match.group(3)
        title = match.group(4)
        
        badge_key = f"{cat_id}.{badge_id}"
        if badge_key not in self.processed_badges:
            badge = Badge(
                id=badge_key,
                title=title,
                emoji=emoji,
                category_id=cat_id,
                level="–í—ã—Å—à–∏–π"
            )
            self.badges.append(badge)
            self.processed_badges.add(badge_key)
            print(f"  - –í—ã—Å—à–∏–π: {title} {emoji}")
    
    def _parse_category_10_badge(self, match, category: Category):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 10 (—Ñ–æ—Ä–º–∞—Ç: '10.1. –ó–Ω–∞—á–æ–∫ üí° ¬´–ú–µ—Ä—Ü–∞—é—â–∏–π –ú–∞—è–∫¬ª.')"""
        cat_id = match.group(1)
        badge_id = match.group(2)
        emoji = match.group(3)
        title = match.group(4)
        
        badge_key = f"{cat_id}.{badge_id}"
        if badge_key not in self.processed_badges:
            badge = Badge(
                id=badge_key,
                title=title,
                emoji=emoji,
                category_id=cat_id,
                level="–û–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π"
            )
            self.badges.append(badge)
            self.processed_badges.add(badge_key)
            print(f"  - –ö–∞—Ç–µ–≥–æ—Ä–∏—è 10: {title} {emoji}")
    
    def _parse_category_11_no_dot_badge(self, match, category: Category):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 11 –±–µ–∑ —Ç–æ—á–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: '11.1 –ó–Ω–∞—á–æ–∫ üí≠ ¬´–†–µ–∞–ª—å–Ω–æ–µ –Ø-–°–æ–æ–±—â–µ–Ω–∏–µ¬ª.')"""
        cat_id = match.group(1)
        badge_id = match.group(2)
        emoji = match.group(3)
        title = match.group(4)
        
        badge_key = f"{cat_id}.{badge_id}"
        if badge_key not in self.processed_badges:
            badge = Badge(
                id=badge_key,
                title=title,
                emoji=emoji,
                category_id=cat_id,
                level="–û–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π"
            )
            self.badges.append(badge)
            self.processed_badges.add(badge_key)
            print(f"  - –ö–∞—Ç–µ–≥–æ—Ä–∏—è 11 (–±–µ–∑ —Ç–æ—á–∫–∏): {title} {emoji}")
    
    def _parse_category_11_alt_badge(self, match, category: Category):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 11 —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º (—Ñ–æ—Ä–º–∞—Ç: '11.6. –ó–Ω–∞—á–æ–∫ üëÅÔ∏è ¬´–†–µ–∞–ª—å–Ω–æ–µ –í–Ω–∏–º–∞–Ω–∏–µ¬ª –∏–ª–∏ ¬´–¶–∏—Ñ—Ä–æ–≤–æ–π –î–µ—Ç–æ–∫—Å¬ª.')"""
        cat_id = match.group(1)
        badge_id = match.group(2)
        emoji = match.group(3)
        title1 = match.group(4)
        title2 = match.group(5)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
        title = f"{title1} –∏–ª–∏ {title2}"
        
        badge_key = f"{cat_id}.{badge_id}"
        if badge_key not in self.processed_badges:
            badge = Badge(
                id=badge_key,
                title=title,
                emoji=emoji,
                category_id=cat_id,
                level="–û–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π"
            )
            self.badges.append(badge)
            self.processed_badges.add(badge_key)
            print(f"  - –ö–∞—Ç–µ–≥–æ—Ä–∏—è 11 (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞): {title} {emoji}")
    
    def _parse_category_8_simple_badge(self, match, category: Category):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 8 –±–µ–∑ —Å–ª–æ–≤–∞ "–ó–Ω–∞—á–æ–∫" (—Ñ–æ—Ä–º–∞—Ç: '8.2. üü£ ¬´–§–∏–æ–ª–µ—Ç–æ–≤—ã–π –ó–Ω–∞—á–æ–∫ –î–≤–∏–∂–∫–∞¬ª.')"""
        cat_id = match.group(1)
        badge_id = match.group(2)
        emoji = match.group(3)
        title = match.group(4)
        
        badge_key = f"{cat_id}.{badge_id}"
        if badge_key not in self.processed_badges:
            badge = Badge(
                id=badge_key,
                title=title,
                emoji=emoji,
                category_id=cat_id,
                level="–û–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π"
            )
            self.badges.append(badge)
            self.processed_badges.add(badge_key)
            print(f"  - –ö–∞—Ç–µ–≥–æ—Ä–∏—è 8 (–ø—Ä–æ—Å—Ç–æ–π): {title} {emoji}")
    
    def _parse_category_14_middle_badge(self, match, category: Category):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 14 —Å '–∑–Ω–∞—á–æ–∫' –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ"""
        cat_id = match.group(1)
        badge_id = match.group(2)
        level_num = match.group(3)
        level_type = match.group(4)
        emoji = match.group(5)
        title = match.group(6)
        
        badge_key = f"{cat_id}.{badge_id}.{level_num}"
        
        if badge_key not in self.processed_badges:
            badge = Badge(
                id=badge_key,
                title=title,
                emoji=emoji,
                category_id=cat_id,
                level=level_type
            )
            self.badges.append(badge)
            self.processed_badges.add(badge_key)
            print(f"  - {level_type}: {title} {emoji}")
    
    def _validate_results(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("\n=== –í–ê–õ–ò–î–ê–¶–ò–Ø ===")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_badge_counts = {}
        for badge in self.badges:
            cat_id = badge.category_id
            if cat_id not in category_badge_counts:
                category_badge_counts[cat_id] = 0
            category_badge_counts[cat_id] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–∫–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
        for category in self.categories:
            category.badge_count = category_badge_counts.get(category.id, 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
        warnings = []
        total_expected = sum(cat.expected_badges for cat in self.categories)
        total_found = len(self.badges)
        
        if total_found != total_expected:
            warnings.append(f"–û–∂–∏–¥–∞–ª–æ—Å—å {total_expected} –∑–Ω–∞—á–∫–æ–≤, –Ω–∞–π–¥–µ–Ω–æ {total_found}")
        
        for category in self.categories:
            if category.badge_count != category.expected_badges:
                warnings.append(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category.id} ({category.title}): –æ–∂–∏–¥–∞–ª–æ—Å—å {category.expected_badges}, –Ω–∞–π–¥–µ–Ω–æ {category.badge_count}")
        
        if warnings:
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            for warning in warnings:
                print(f"  - {warning}")
        else:
            print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        
        print("\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===")
        print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(self.categories)}")
        print(f"–ó–Ω–∞—á–∫–æ–≤: {len(self.badges)}")
        
        print("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for category in self.categories:
            status = "‚úÖ" if category.badge_count == category.expected_badges else "‚ö†Ô∏è"
            print(f"  {status} {category.title}: {category.badge_count}/{category.expected_badges} –∑–Ω–∞—á–∫–æ–≤")
    
    def _create_output(self) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ JSON"""
        return {
            "metadata": {
                "total_categories": len(self.categories),
                "total_badges": len(self.badges),
                "source_file": self.file_path,
                "parsed_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            },
            "categories": [asdict(cat) for cat in self.categories],
            "badges": [asdict(badge) for badge in self.badges]
        }


def main():
    parser = PerfectPutevoditelParser("–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å.txt")
    result = parser.parse()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    output_file = "perfect_parsed_data.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)
    
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_file}")


if __name__ == "__main__":
    main()
