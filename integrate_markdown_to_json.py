#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import re

def integrate_markdown_to_json():
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç markdown –∫–æ–Ω—Ç–µ–Ω—Ç –≤ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
    
    # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    with open('chatbot/perfect_parsed_data1.json', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ JSON –¥–∞–Ω–Ω—ã—Ö
    json_start = content.find('{\n  "id": "1.1"')
    
    if json_start == -1:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞—á–∞–ª–æ JSON –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º markdown –∫–æ–Ω—Ç–µ–Ω—Ç
    markdown_content = content[:json_start].strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
    json_content = content[json_start:]
    
    # –ü–∞—Ä—Å–∏–º –≤—Å–µ JSON –æ–±—ä–µ–∫—Ç—ã
    badges_data = []
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ JSON –æ–±—ä–µ–∫—Ç—ã
    brace_count = 0
    current_obj = ""
    in_object = False
    
    for char in json_content:
        if char == '{':
            if not in_object:
                in_object = True
                current_obj = char
            else:
                current_obj += char
            brace_count += 1
        elif char == '}':
            current_obj += char
            brace_count -= 1
            if brace_count == 0 and in_object:
                # –ó–∞–≤–µ—Ä—à–∏–ª–∏ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç
                try:
                    obj = json.loads(current_obj)
                    badges_data.append(obj)
                except json.JSONDecodeError as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä–µ–∫—Ç–∞: {e}")
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –æ–±—ä–µ–∫—Ç
                    print(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–π –æ–±—ä–µ–∫—Ç (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): {current_obj[:100]}")
                current_obj = ""
                in_object = False
    
    print(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(badges_data)} –∑–Ω–∞—á–∫–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    new_structure = {
        "metadata": {
            "title": "–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å –†–µ–∞–ª—å–Ω–æ–≥–æ –õ–∞–≥–µ—Ä—è - –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            "version": "2.0",
            "lastUpdated": "2024-12-19",
            "description": "–ü–æ–ª–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∑–Ω–∞—á–∫–æ–≤ –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è –†–µ–∞–ª—å–Ω–æ–≥–æ –õ–∞–≥–µ—Ä—è",
            "totalBadges": len(badges_data),
            "sourceFile": "perfect_parsed_data1.json"
        },
        "categoryDescription": {
            "id": "1",
            "title": "–ö–ê–¢–ï–ì–û–†–ò–Ø 1: –ó–ê –õ–ò–ß–ù–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø",
            "content": markdown_content,
            "markdownLength": len(markdown_content)
        },
        "badges": badges_data
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    output_file = 'perfect_parsed_data_integrated.json'
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(new_structure, f, ensure_ascii=False, indent=2)
    
    print(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {output_file}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    try:
        with open(output_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        print("‚úÖ –ù–æ–≤—ã–π —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   - –í—Å–µ–≥–æ –∑–Ω–∞—á–∫–æ–≤: {len(data['badges'])}")
        print(f"   - –†–∞–∑–º–µ—Ä markdown: {len(data['categoryDescription']['content'])} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(json.dumps(data, ensure_ascii=False))} —Å–∏–º–≤–æ–ª–æ–≤")
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–æ–≤–æ–º —Ñ–∞–π–ª–µ: {e}")

if __name__ == "__main__":
    integrate_markdown_to_json()
