#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import os
import glob
import logging
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='[INFO] %(message)s')
logger = logging.getLogger(__name__)

GUIDE_PATH = "–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å.txt"
AI_DATA_DIR = "ai-data"
PERFECT_PARSED_PATH = "perfect_parsed_data.json"

def load_json_file(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON —Ñ–∞–π–ª."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return None

def save_json_file(file_path, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç JSON —Ñ–∞–π–ª."""
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        logger.info(f"üìÑ –§–∞–π–ª {file_path} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")

def load_guide():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å.txt."""
    try:
        with open(GUIDE_PATH, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {GUIDE_PATH}: {e}")
        return None

def extract_emoji_from_title(title):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —ç–º–æ–¥–∑–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑–Ω–∞—á–∫–∞."""
    # –ò—â–µ–º —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    emoji_pattern = r'^([^\w\s])'
    match = re.search(emoji_pattern, title)
    if match:
        return match.group(1)
    
    # –ò—â–µ–º —ç–º–æ–¥–∑–∏ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–≤ –∫–∞–≤—ã—á–∫–∞—Ö)
    emoji_in_quotes = re.search(r'¬´([^¬ª]*?)([^\w\s])[^¬ª]*¬ª', title)
    if emoji_in_quotes:
        return emoji_in_quotes.group(2)
    
    return None

def find_emoji_in_guide(guide_text, badge_id, title):
    """–ò—â–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –∑–Ω–∞—á–∫–∞ –≤ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª–µ."""
    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–æ–º–µ—Ä–æ–º –∑–Ω–∞—á–∫–∞ –∏ —ç–º–æ–¥–∑–∏
    patterns = [
        rf"{re.escape(badge_id)}\.?\s*–ó–Ω–∞—á–æ–∫\s*([^\w\s])",
        rf"{re.escape(badge_id)}\.?\s*–ó–Ω–∞—á–æ–∫\s*¬´[^¬ª]*?([^\w\s])[^¬ª]*¬ª",
        rf"{re.escape(badge_id)}\.?\s*([^\w\s])\s*¬´[^¬ª]+¬ª",
        rf"{re.escape(badge_id)}\.?\s*([^\w\s])\s*[^¬´]",
    ]
    
    for pattern in patterns:
        match = re.search(pattern, guide_text)
        if match:
            emoji = match.group(1)
            if len(emoji) <= 2:  # –≠–º–æ–¥–∑–∏ –æ–±—ã—á–Ω–æ 1-2 —Å–∏–º–≤–æ–ª–∞
                return emoji
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    return extract_emoji_from_title(title)

def find_badge_in_guide_alternative(guide_text, badge_id, title):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∑–Ω–∞—á–∫–∞ –≤ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª–µ."""
    # –ò—â–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –∑–Ω–∞—á–∫–∞
    pattern = rf"{re.escape(badge_id)}\.?\s*"
    match = re.search(pattern, guide_text)
    
    if not match:
        return None
    
    start_pos = match.start()
    
    # –ò—â–µ–º –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏
    next_badge_pattern = r"\n\d+\.\d+\.?\s*"
    next_match = re.search(next_badge_pattern, guide_text[start_pos + 1:])
    
    if next_match:
        end_pos = start_pos + 1 + next_match.start()
    else:
        end_pos = len(guide_text)
    
    badge_section = guide_text[start_pos:end_pos]
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = {
        'emoji': '',
        'description': '',
        'importance': '',
        'skillTips': '',
        'examples': '',
        'howToBecome': ''
    }
    
    # –ò—â–µ–º —ç–º–æ–¥–∑–∏
    emoji = find_emoji_in_guide(guide_text, badge_id, title)
    if emoji:
        data['emoji'] = emoji
    
    # –ò—â–µ–º "–¶–µ–ª—å:"
    goal_match = re.search(r'–¶–µ–ª—å:\s*([^\n]+(?:\n(?!\n)[^\n]+)*)', badge_section)
    if goal_match:
        data['description'] = f"–¶–µ–ª—å: {goal_match.group(1).strip()}"
    
    # –ò—â–µ–º "–ü–æ—á–µ–º—É —ç—Ç–æ—Ç –∑–Ω–∞—á–æ–∫ –≤–∞–∂–µ–Ω?"
    importance_match = re.search(r'–ü–æ—á–µ–º—É —ç—Ç–æ—Ç –∑–Ω–∞—á–æ–∫ –≤–∞–∂–µ–Ω\?\s*\n((?:üîπ[^\n]+\n?)+)', badge_section)
    if importance_match:
        data['importance'] = importance_match.group(1).strip()
    
    # –ò—â–µ–º "üí° –ö–∞–∫..." (skillTips)
    skill_tips_match = re.search(r'üí°\s*([^üí°\n]+(?:\n(?!\n)[^üí°\n]+)*)', badge_section)
    if skill_tips_match:
        data['skillTips'] = f"üí° {skill_tips_match.group(1).strip()}"
    
    # –ò—â–µ–º "–ö–∞–∫ –∑–∞–∫—Ä–µ–ø–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç?"
    examples_match = re.search(r'–ö–∞–∫ –∑–∞–∫—Ä–µ–ø–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç\?\s*\n((?:üìå[^\n]+\n?)+)', badge_section)
    if examples_match:
        data['examples'] = examples_match.group(1).strip()
    
    # –ò—â–µ–º "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–æ–∫"
    how_to_become_match = re.search(r'–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–æ–∫[^:]*:\s*\n((?:‚úÖ[^\n]+\n?)+)', badge_section)
    if how_to_become_match:
        data['howToBecome'] = how_to_become_match.group(1).strip()
    
    return data

def get_badge_id_from_path(file_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –∑–Ω–∞—á–∫–∞ –∏–∑ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É."""
    return os.path.basename(file_path).replace('.json', '')

def is_main_badge(badge_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã–º (–Ω–µ –ø–æ–¥—É—Ä–æ–≤–Ω–µ–º)."""
    parts = badge_id.split('.')
    return len(parts) == 2

def fix_remaining_issues(ai_data, guide_data, badge_id, title):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã –≤ –¥–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–∫–∞."""
    fixed = False
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏
    if not ai_data.get('emoji') and guide_data.get('emoji'):
        ai_data['emoji'] = guide_data['emoji']
        fixed = True
        logger.info(f"  üìù –î–æ–±–∞–≤–ª–µ–Ω —ç–º–æ–¥–∑–∏: {guide_data['emoji']}")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    if not ai_data.get('description') or not ai_data['description'].startswith('–¶–µ–ª—å:'):
        if guide_data.get('description'):
            ai_data['description'] = guide_data['description']
            fixed = True
            logger.info(f"  üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å
    if not ai_data.get('importance') or len(ai_data['importance'].strip()) < 50:
        if guide_data.get('importance'):
            ai_data['importance'] = guide_data['importance']
            fixed = True
            logger.info(f"  üìù –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–∂–Ω–æ—Å—Ç—å")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç—ã –ø–æ –Ω–∞–≤—ã–∫–∞–º
    if not ai_data.get('skillTips') or len(ai_data['skillTips'].strip()) < 30:
        if guide_data.get('skillTips'):
            ai_data['skillTips'] = guide_data['skillTips']
            fixed = True
            logger.info(f"  üìù –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–æ–≤–µ—Ç—ã –ø–æ –Ω–∞–≤—ã–∫–∞–º")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã
    if not ai_data.get('examples') and guide_data.get('examples'):
        ai_data['examples'] = guide_data['examples']
        fixed = True
        logger.info(f"  üìù –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∏–º–µ—Ä—ã")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å
    if not ai_data.get('howToBecome') and guide_data.get('howToBecome'):
        ai_data['howToBecome'] = guide_data['howToBecome']
        fixed = True
        logger.info(f"  üìù –î–æ–±–∞–≤–ª–µ–Ω–æ '–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å'")
    
    return fixed

def advanced_fix_remaining_issues():
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–æ–±–ª–µ–º.
    """
    logger.info("üîß –ü–†–û–î–í–ò–ù–£–¢–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–°–¢–ê–í–®–ò–•–°–Ø –ü–†–û–ë–õ–ï–ú")
    logger.info("===============================================")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å
    guide_text = load_guide()
    if not guide_text:
        return
    
    logger.info("üìñ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å.txt –∑–∞–≥—Ä—É–∂–µ–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ai-data —Ñ–∞–π–ª—ã
    ai_data_files = glob.glob(os.path.join(AI_DATA_DIR, '**', '*.json'), recursive=True)
    ai_data_files = [f for f in ai_data_files if not f.endswith('index.json') and not f.endswith('MASTER_INDEX.json')]
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–Ω–∞—á–∫–∏
    main_badge_files = []
    for file_path in ai_data_files:
        badge_id = get_badge_id_from_path(file_path)
        if is_main_badge(badge_id):
            main_badge_files.append((file_path, badge_id))
    
    logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(main_badge_files)} –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    fixed_count = 0
    total_fixes = 0
    
    for file_path, badge_id in main_badge_files:
        ai_data = load_json_file(file_path)
        if not ai_data:
            continue
        
        title = ai_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        logger.info(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–Ω–∞—á–æ–∫ {badge_id}: {title}")
        
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        guide_data = find_badge_in_guide_alternative(guide_text, badge_id, title)
        
        if not guide_data:
            logger.warning(f"  ‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–Ω–∞—á–∫–∞ {badge_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª–µ")
            continue
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        if fix_remaining_issues(ai_data, guide_data, badge_id, title):
            fixed_count += 1
            total_fixes += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            save_json_file(file_path, ai_data)
        else:
            logger.info(f"  ‚úÖ –ó–Ω–∞—á–æ–∫ {badge_id} —É–∂–µ –≤ –ø–æ—Ä—è–¥–∫–µ")
    
    logger.info(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    logger.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–Ω–∞—á–∫–æ–≤: {fixed_count}")
    logger.info(f"üìù –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {total_fixes}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º perfect_parsed_data.json
    logger.info(f"\nüîÑ –û–±–Ω–æ–≤–ª—è—é perfect_parsed_data.json...")
    update_perfect_parsed_data()
    
    logger.info(f"\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    logger.info("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    logger.info("2. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞")

def update_perfect_parsed_data():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç perfect_parsed_data.json —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    perfect_data = load_json_file(PERFECT_PARSED_PATH)
    if not perfect_data:
        return
    
    ai_data_files = glob.glob(os.path.join(AI_DATA_DIR, '**', '*.json'), recursive=True)
    ai_data_files = [f for f in ai_data_files if not f.endswith('index.json') and not f.endswith('MASTER_INDEX.json')]
    
    updated_count = 0
    
    for file_path in ai_data_files:
        badge_id = get_badge_id_from_path(file_path)
        if not is_main_badge(badge_id):
            continue
            
        ai_data = load_json_file(file_path)
        if not ai_data:
            continue
        
        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–Ω–∞—á–æ–∫ –≤ perfect_parsed_data.json
        if 'badges' in perfect_data:
            for badge in perfect_data['badges']:
                if isinstance(badge, dict) and badge.get('id') == badge_id:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –∏–∑ ai-data
                    fields_to_update = [
                        'description', 'importance', 'skillTips', 'examples', 
                        'philosophy', 'howToBecome', 'nameExplanation'
                    ]
                    
                    for field in fields_to_update:
                        if field in ai_data and ai_data[field]:
                            if badge.get(field) != ai_data[field]:
                                badge[field] = ai_data[field]
                                logger.info(f"  üìù –û–±–Ω–æ–≤–∏–ª {field} –¥–ª—è –∑–Ω–∞—á–∫–∞ {badge_id}")
                    
                    updated_count += 1
                    break
    
    save_json_file(PERFECT_PARSED_PATH, perfect_data)
    logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∑–Ω–∞—á–∫–æ–≤ –≤ perfect_parsed_data.json")

if __name__ == "__main__":
    advanced_fix_remaining_issues()
