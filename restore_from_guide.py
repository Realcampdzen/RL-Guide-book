#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è perfect_parsed_data.json –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è.txt
"""

import json
import re
from collections import defaultdict

def load_guide():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è.txt"""
    with open('–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å.txt', 'r', encoding='utf-8') as f:
        return f.read()

def load_perfect_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ perfect_parsed_data.json"""
    with open('perfect_parsed_data.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def extract_main_badges_from_guide():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–Ω–∞—á–∫–∏ –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è"""
    guide_text = load_guide()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤
    # –ü—Ä–∏–º–µ—Ä: "1.1 –ó–Ω–∞—á–æ–∫ üîπ ¬´–í–∞–ª—é—à–∞¬ª. –£ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–∫–∞ —Ç—Ä–∏ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏."
    main_badge_pattern = r'^([0-9]+\.[0-9]+) –ó–Ω–∞—á–æ–∫ ([^¬´]+) ¬´([^¬ª]+)¬ª\.(.*?)$'
    
    main_badges = {}
    
    for line in guide_text.split('\n'):
        match = re.match(main_badge_pattern, line.strip())
        if match:
            badge_id = match.group(1)
            emoji = match.group(2).strip()
            title = match.group(3)
            description = match.group(4).strip()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π
            levels = 1  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π
            if '—Ç—Ä–∏ —É—Ä–æ–≤–Ω—è' in description:
                levels = 3
            elif '–¥–≤–∞ —É—Ä–æ–≤–Ω—è' in description:
                levels = 2
            
            main_badges[badge_id] = {
                'id': badge_id,
                'title': title,
                'emoji': emoji,
                'levels': levels,
                'description': description
            }
    
    return main_badges

def extract_detailed_descriptions():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –∑–Ω–∞—á–∫–æ–≤ –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è"""
    guide_text = load_guide()
    
    # –ò—â–µ–º —Ä–∞–∑–¥–µ–ª—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
    # –ü—Ä–∏–º–µ—Ä: "11.12. –ó–Ω–∞—á–æ–∫ ¬´–®–æ–∫–æ–ª–∞–¥–Ω–∞—è –ú–µ–¥–∏—Ç–∞—Ü–∏—è¬ª."
    detailed_pattern = r'^([0-9]+\.[0-9]+)\. –ó–Ω–∞—á–æ–∫ ¬´([^¬ª]+)¬ª\.\s*$'
    
    detailed_descriptions = {}
    
    lines = guide_text.split('\n')
    for i, line in enumerate(lines):
        match = re.match(detailed_pattern, line.strip())
        if match:
            badge_id = match.group(1)
            title = match.group(2)
            
            # –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
            description_lines = []
            j = i + 1
            while j < len(lines) and not re.match(r'^[0-9]+\.[0-9]+', lines[j].strip()):
                if lines[j].strip() and not lines[j].strip().startswith('–ü–æ—á–µ–º—É —ç—Ç–æ—Ç –∑–Ω–∞—á–æ–∫ –≤–∞–∂–µ–Ω?'):
                    description_lines.append(lines[j].strip())
                j += 1
            
            description = ' '.join(description_lines[:3])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏
            
            detailed_descriptions[badge_id] = {
                'title': title,
                'description': description
            }
    
    return detailed_descriptions

def create_missing_main_badges():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–Ω–∞—á–∫–∏"""
    main_badges = extract_main_badges_from_guide()
    detailed_descriptions = extract_detailed_descriptions()
    
    perfect_data = load_perfect_data()
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤
    new_main_badges = []
    
    for badge_id, badge_info in main_badges.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–Ω–∞—á–æ–∫
        existing = False
        for badge in perfect_data['badges']:
            if badge['id'] == badge_id:
                existing = True
                break
        
        if not existing:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
            detailed = detailed_descriptions.get(badge_id, {})
            
            new_badge = {
                "id": badge_id,
                "title": detailed.get('title', badge_info['title']),
                "emoji": badge_info['emoji'],
                "category_id": badge_id.split('.')[0],
                "level": "–û–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π" if badge_info['levels'] == 1 else "–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π",
                "description": detailed.get('description', f"–û—Å–Ω–æ–≤–Ω–æ–π –∑–Ω–∞—á–æ–∫ {badge_info['title']}"),
                "criteria": f"–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–∫–∞ {badge_info['title']}",
                "confirmation": f"üìé –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–∫–∞ {badge_info['title']}"
            }
            
            new_main_badges.append(new_badge)
    
    return new_main_badges

def fix_wrong_descriptions():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
    guide_text = load_guide()
    
    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤
    fixes = {}
    
    # –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è 11.12.1
    lines = guide_text.split('\n')
    for i, line in enumerate(lines):
        if '11.12.1. –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å' in line:
            # –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
            description_lines = []
            j = i + 1
            while j < len(lines) and not re.match(r'^[0-9]+\.[0-9]+', lines[j].strip()):
                if lines[j].strip() and not lines[j].strip().startswith('üìé'):
                    description_lines.append(lines[j].strip())
                j += 1
            
            description = ' '.join(description_lines[:2])
            fixes['11.12.1'] = {
                'description': description,
                'criteria': '‚úÖ –í—ã–±—Ä–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –∫—É—Å–æ—á–µ–∫ —à–æ–∫–æ–ª–∞–¥–∞, —Ñ—Ä—É–∫—Ç–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –ª–∞–∫–æ–º—Å—Ç–≤–∞.\n‚úÖ –í —Ç–µ—á–µ–Ω–∏–µ 2‚Äì3 –º–∏–Ω—É—Ç —Å–º–∞–∫–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —É–∫—É—Å, –æ–±—Ä–∞—â–∞—è –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤–∫—É—Å, —Ç–µ–∫—Å—Ç—É—Ä—É, –∞—Ä–æ–º–∞—Ç.\n‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –æ—â—É—â–µ–Ω–∏—è –∏ –∑–∞–º–µ—Ç–∏—Ç—å, –∫–∞–∫ –º–µ–Ω—è–µ—Ç—Å—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –µ–¥—ã.',
                'confirmation': 'üìé 3‚Äì5 –ø—É–Ω–∫—Ç–æ–≤ –æ—â—É—â–µ–Ω–∏–π –ø–æ –≤–∏–¥—É/–∞—Ä–æ–º–∞—Ç—É/—Ç–µ–∫—Å—Ç—É—Ä–µ/–≤–∫—É—Å—É.\nüìé –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–∂–∞—Ç–æ–≥–æ –æ–± —É—á–∞—Å—Ç–∏–∏ –≤ –ø—Ä–∞–∫—Ç–∏–∫–µ.'
            }
            break
    
    # –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è 11.12.2
    for i, line in enumerate(lines):
        if '11.12.2. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å' in line:
            description_lines = []
            j = i + 1
            while j < len(lines) and not re.match(r'^[0-9]+\.[0-9]+', lines[j].strip()):
                if lines[j].strip() and not lines[j].strip().startswith('üìé'):
                    description_lines.append(lines[j].strip())
                j += 1
            
            description = ' '.join(description_lines[:2])
            fixes['11.12.2'] = {
                'description': description,
                'criteria': '‚úÖ –ü—Ä–æ–≤–µ—Å—Ç–∏ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–∞–∫—Ç–∏–∫–∏, –≤—ã–±—Ä–∞–≤ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.\n‚úÖ –°—Ä–∞–≤–Ω–∏—Ç—å –¥–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ —Å—ä–µ—Å—Ç—å —Ü–µ–ª–æ–µ –±–ª—é–¥–æ.\n‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ –Ω—é–∞–Ω—Å—ã –≤–∫—É—Å–∞, –æ—â—É—â–µ–Ω–∏–π, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã.',
                'confirmation': 'üìé –ó–∞–º–µ—Ç–∫–∏ –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–ª–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–º –ø–æ–µ–¥–∞–Ω–∏–∏.\nüìé –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –≤–∫—É—Å–∞.'
            }
            break
    
    return fixes

def main():
    print("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è")
    print("=" * 50)
    
    # 1. –°–æ–∑–¥–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–Ω–∞—á–∫–∏
    print("1. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤...")
    new_main_badges = create_missing_main_badges()
    print(f"   –ù–∞–π–¥–µ–Ω–æ {len(new_main_badges)} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤")
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
    print("2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π...")
    fixes = fix_wrong_descriptions()
    print(f"   –ù–∞–π–¥–µ–Ω–æ {len(fixes)} –∑–Ω–∞—á–∫–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    # 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    perfect_data = load_perfect_data()
    
    # 4. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–Ω–∞—á–∫–∏
    for new_badge in new_main_badges:
        perfect_data['badges'].append(new_badge)
    
    # 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–∫–∏
    for badge in perfect_data['badges']:
        if badge['id'] in fixes:
            fix = fixes[badge['id']]
            badge['description'] = fix['description']
            badge['criteria'] = fix['criteria']
            badge['confirmation'] = fix['confirmation']
    
    # 6. –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–∫–∏ –ø–æ ID
    perfect_data['badges'].sort(key=lambda x: x['id'])
    
    # 7. –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    perfect_data['metadata']['total_badges'] = len(perfect_data['badges'])
    perfect_data['metadata']['parsed_at'] = "2025-01-27 12:00:00"  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    
    # 8. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open('perfect_parsed_data_restored.json', 'w', encoding='utf-8') as f:
        json.dump(perfect_data, f, ensure_ascii=False, indent=2)
    
    print(f"3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ perfect_parsed_data_restored.json")
    print(f"   –í—Å–µ–≥–æ –∑–Ω–∞—á–∫–æ–≤: {len(perfect_data['badges'])}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤
    if new_main_badges:
        print("\n–ü—Ä–∏–º–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤:")
        for badge in new_main_badges[:5]:
            print(f"   {badge['id']}: {badge['emoji']} {badge['title']}")

if __name__ == "__main__":
    main()
