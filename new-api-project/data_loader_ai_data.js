// –ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ ai-data/ –¥–ª—è Vercel
import fs from 'fs';
import path from 'path';

// –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
let badgeDataCache = null;
let categoriesCache = new Map();
let badgesCache = new Map();

export class DataLoaderAIData {
  constructor() {
    // –í Vercel –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π JSON —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
    this.dataPath = path.join(process.cwd(), 'ai_data_complete.json');
    console.log('üìÅ –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º:', this.dataPath);
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–∫–æ–≤ –∏–∑ ai_data_complete.json
  loadAllData() {
    if (badgeDataCache) {
      console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      return badgeDataCache;
    }

    try {
      console.log('üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ ai_data_complete.json...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –µ–¥–∏–Ω–æ–≥–æ JSON —Ñ–∞–π–ª–∞
      const data = JSON.parse(fs.readFileSync(this.dataPath, 'utf8'));
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
        categories: data.totalCategories,
        badges: data.totalBadges,
        levels: data.totalLevels
      });
      
      // –°–æ–∑–¥–∞–µ–º –∫—ç—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      data.categories.forEach(category => {
        categoriesCache.set(category.id, category);
      });
      
      // –°–æ–∑–¥–∞–µ–º –∫—ç—à –∑–Ω–∞—á–∫–æ–≤
      data.badges.forEach(badge => {
        badgesCache.set(badge.id, badge);
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      badgeDataCache = {
        categories: data.categories,
        badges: data.badges,
        totalCategories: data.totalCategories,
        totalBadges: data.totalBadges,
        totalLevels: data.totalLevels
      };

      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã');
      return badgeDataCache;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
      console.error('üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:', this.dataPath);
      console.error('üìÇ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', fs.existsSync(this.dataPath));
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –∫—Ä–∞—à–∞
      return { categories: [], badges: [] };
    }
  }

  // –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
  getCategory(categoryId) {
    if (!badgeDataCache) {
      this.loadAllData();
    }
    return categoriesCache.get(categoryId);
  }

  // –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–æ–∫ –ø–æ ID
  getBadge(badgeId) {
    if (!badgeDataCache) {
      this.loadAllData();
    }
    return badgesCache.get(badgeId);
  }

  // –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  getAllCategories() {
    if (!badgeDataCache) {
      this.loadAllData();
    }
    return badgeDataCache.categories;
  }

  // –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–Ω–∞—á–∫–∏
  getAllBadges() {
    if (!badgeDataCache) {
      this.loadAllData();
    }
    return badgeDataCache.badges;
  }

  // –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  getBadgesByCategory(categoryId) {
    if (!badgeDataCache) {
      this.loadAllData();
    }
    return badgeDataCache.badges.filter(badge => badge.category_id === categoryId);
  }

  // –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  getStats() {
    if (!badgeDataCache) {
      this.loadAllData();
    }
    return {
      totalCategories: badgeDataCache.totalCategories,
      totalBadges: badgeDataCache.totalBadges,
      totalLevels: badgeDataCache.totalLevels
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const dataLoaderAIData = new DataLoaderAIData();
