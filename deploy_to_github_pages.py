#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ GitHub Pages
—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–∞—Ç-–±–æ—Ç–∞ –ù–µ–π—Ä–æ–í–∞–ª—é—à–∏
"""

import os
import shutil
import json
import subprocess
from pathlib import Path

def build_frontend():
    """–°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    print("üî® –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    subprocess.run(["npm", "install"], check=True)
    
    # –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    subprocess.run(["npm", "run", "build"], check=True)
    
    print("‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!")

def prepare_backend():
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±—ç–∫–µ–Ω–¥–∞ –¥–ª—è –¥–µ–ø–ª–æ—è"""
    print("üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±—ç–∫–µ–Ω–¥–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–µ–Ω–¥–∞ –≤ dist
    dist_dir = Path("dist")
    backend_dir = dist_dir / "api"
    backend_dir.mkdir(exist_ok=True)
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –±—ç–∫–µ–Ω–¥–∞
    backend_files = [
        "backend/app.py",
        "backend/requirements.txt",
        "perfect_parsed_data.json"
    ]
    
    for file_path in backend_files:
        if os.path.exists(file_path):
            dest_path = backend_dir / Path(file_path).name
            shutil.copy2(file_path, dest_path)
            print(f"üìÅ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {file_path} -> {dest_path}")
    
    # –ö–æ–ø–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ —á–∞—Ç-–±–æ—Ç–∞
    chatbot_src = Path("chatbot")
    chatbot_dest = backend_dir / "chatbot"
    
    if chatbot_src.exists():
        shutil.copytree(chatbot_src, chatbot_dest, dirs_exist_ok=True)
        print(f"ü§ñ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —á–∞—Ç-–±–æ—Ç: {chatbot_src} -> {chatbot_dest}")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ Vercel/Netlify
    create_vercel_config(backend_dir)
    create_netlify_config(backend_dir)
    
    print("‚úÖ –ë—ç–∫–µ–Ω–¥ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω!")

def create_vercel_config(backend_dir):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Vercel"""
    vercel_config = {
        "version": 2,
        "builds": [
            {
                "src": "api/app.py",
                "use": "@vercel/python"
            }
        ],
        "routes": [
            {
                "src": "/api/(.*)",
                "dest": "/api/app.py"
            },
            {
                "src": "/(.*)",
                "dest": "/$1"
            }
        ]
    }
    
    config_path = backend_dir / "vercel.json"
    with open(config_path, 'w', encoding='utf-8') as f:
        json.dump(vercel_config, f, indent=2, ensure_ascii=False)
    
    print(f"üìù –°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ñ–∏–≥ Vercel: {config_path}")

def create_netlify_config(backend_dir):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Netlify"""
    netlify_config = {
        "build": {
            "command": "npm run build",
            "publish": "dist"
        },
        "functions": {
            "directory": "api"
        },
        "redirects": [
            {
                "from": "/api/*",
                "to": "/.netlify/functions/app.py",
                "status": 200
            }
        ]
    }
    
    config_path = backend_dir / "netlify.toml"
    with open(config_path, 'w', encoding='utf-8') as f:
        f.write(f"[build]\n")
        f.write(f"command = \"npm run build\"\n")
        f.write(f"publish = \"dist\"\n\n")
        f.write(f"[functions]\n")
        f.write(f"directory = \"api\"\n\n")
        f.write(f"[[redirects]]\n")
        f.write(f"from = \"/api/*\"\n")
        f.write(f"to = \"/.netlify/functions/app.py\"\n")
        f.write(f"status = 200\n")
    
    print(f"üìù –°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ñ–∏–≥ Netlify: {config_path}")

def create_github_workflow():
    """–°–æ–∑–¥–∞–Ω–∏–µ GitHub Actions workflow –¥–ª—è –¥–µ–ø–ª–æ—è"""
    workflow_dir = Path(".github/workflows")
    workflow_dir.mkdir(parents=True, exist_ok=True)
    
    workflow_content = """name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install
      
    - name: Build frontend
      run: npm run build
      
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist
"""
    
    workflow_path = workflow_dir / "deploy.yml"
    with open(workflow_path, 'w', encoding='utf-8') as f:
        f.write(workflow_content)
    
    print(f"üöÄ –°–æ–∑–¥–∞–Ω GitHub Actions workflow: {workflow_path}")

def create_deployment_instructions():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –¥–µ–ø–ª–æ—é"""
    instructions = """# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–µ–ø–ª–æ—é –Ω–∞ GitHub Pages

## –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)

1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ–∞–π–ª `.github/workflows/deploy.yml`
2. –ó–∞–ø—É—à—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–µ—Ç–∫—É `main`
3. GitHub Actions –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–µ—Ä–µ—Ç –∏ –∑–∞–¥–µ–ø–ª–æ–∏—Ç –ø—Ä–æ–µ–∫—Ç

## –†—É—á–Ω–æ–π –¥–µ–ø–ª–æ–π

1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è:
   ```bash
   python deploy_to_github_pages.py
   ```

2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ `dist` –≤ –≤–µ—Ç–∫—É `gh-pages`

## –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã

### Vercel
1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫ Vercel
2. Vercel –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ `vercel.json`

### Netlify
1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫ Netlify
2. Netlify –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ `netlify.toml`

## –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è

- –ß–∞—Ç-–±–æ—Ç –ù–µ–π—Ä–æ–í–∞–ª—é—à–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ Flask API
- –î–ª—è —Ä–∞–±–æ—Ç—ã —á–∞—Ç-–±–æ—Ç–∞ –Ω—É–∂–µ–Ω OpenAI API –∫–ª—é—á
- –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, JSON) –∫–æ–ø–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
- CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GitHub Pages

## –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–ª–æ—è

–ü–æ—Å–ª–µ –¥–µ–ø–ª–æ—è –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:
- [ ] –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
- [ ] API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç (`/api/categories`, `/api/badges`)
- [ ] –ß–∞—Ç-–±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç (`/api/chat`)
- [ ] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
"""
    
    with open("DEPLOYMENT_INSTRUCTIONS.md", 'w', encoding='utf-8') as f:
        f.write(instructions)
    
    print("üìñ –°–æ–∑–¥–∞–Ω—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–µ–ø–ª–æ—é: DEPLOYMENT_INSTRUCTIONS.md")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ø–ª–æ—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ GitHub Pages...")
    
    try:
        # –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        build_frontend()
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±—ç–∫–µ–Ω–¥–∞
        prepare_backend()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ GitHub Actions workflow
        create_github_workflow()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        create_deployment_instructions()
        
        print("\n‚úÖ –î–µ–ø–ª–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ó–∞–ø—É—à—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        print("2. GitHub Actions –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–¥–µ–ø–ª–æ–∏—Ç –ø—Ä–æ–µ–∫—Ç")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–∞ https://yourusername.github.io/RL-Guide-book/")
        print("\nü§ñ –ß–∞—Ç-–±–æ—Ç –ù–µ–π—Ä–æ–í–∞–ª—é—à–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
