#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import os
import glob
from typing import Dict, List

def load_ai_data_file(file_path: str) -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ ai-data —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return {}

def update_perfect_parsed_data():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç perfect_parsed_data.json —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ ai-data —Ñ–∞–π–ª–æ–≤"""
    print("üîÑ –û–±–Ω–æ–≤–ª—è—é perfect_parsed_data.json —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ ai-data")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π perfect_parsed_data.json
    try:
        with open("perfect_parsed_data.json", 'r', encoding='utf-8') as f:
            perfect_data = json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è perfect_parsed_data.json: {e}")
        return
    
    updated_count = 0
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ ai-data —Ñ–∞–π–ª—ã
    ai_data_files = []
    for category_dir in glob.glob("ai-data/category-*"):
        for file_path in glob.glob(f"{category_dir}/*.json"):
            if not file_path.endswith("index.json") and not file_path.endswith("MASTER_INDEX.json"):
                ai_data_files.append(file_path)
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(ai_data_files)} —Ñ–∞–π–ª–æ–≤ –∑–Ω–∞—á–∫–æ–≤")
    
    for file_path in ai_data_files:
        badge_id = os.path.basename(file_path).replace('.json', '')
        ai_data = load_ai_data_file(file_path)
        
        if not ai_data:
            continue
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–Ω–∞—á–æ–∫ –≤ perfect_parsed_data.json
        badge_found = False
        for category in perfect_data.get('categories', []):
            for badge in category.get('badges', []):
                if isinstance(badge, dict) and badge.get('id') == badge_id:
                    badge_found = True
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –∏–∑ ai-data
                    fields_to_update = [
                        'description', 'importance', 'skillTips', 'examples', 
                        'philosophy', 'howToBecome', 'nameExplanation'
                    ]
                    
                    for field in fields_to_update:
                        if field in ai_data and ai_data[field]:
                            if badge.get(field) != ai_data[field]:
                                badge[field] = ai_data[field]
                                print(f"  üìù –û–±–Ω–æ–≤–∏–ª {field} –¥–ª—è –∑–Ω–∞—á–∫–∞ {badge_id}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º criteria –∏ confirmation –≤ levels
                    if 'levels' in ai_data and 'levels' in badge:
                        for ai_level in ai_data['levels']:
                            ai_level_id = ai_level.get('id')
                            for perfect_level in badge['levels']:
                                if perfect_level.get('id') == ai_level_id:
                                    # –û–±–Ω–æ–≤–ª—è–µ–º criteria
                                    if 'criteria' in ai_level and ai_level['criteria']:
                                        if perfect_level.get('criteria') != ai_level['criteria']:
                                            perfect_level['criteria'] = ai_level['criteria']
                                            print(f"  üìù –û–±–Ω–æ–≤–∏–ª criteria –¥–ª—è —É—Ä–æ–≤–Ω—è {ai_level_id}")
                                    
                                    # –û–±–Ω–æ–≤–ª—è–µ–º confirmation
                                    if 'confirmation' in ai_level and ai_level['confirmation']:
                                        if perfect_level.get('confirmation') != ai_level['confirmation']:
                                            perfect_level['confirmation'] = ai_level['confirmation']
                                            print(f"  üìù –û–±–Ω–æ–≤–∏–ª confirmation –¥–ª—è —É—Ä–æ–≤–Ω—è {ai_level_id}")
                                    break
                    
                    updated_count += 1
                    break
            if badge_found:
                break
        
        if not badge_found:
            print(f"‚ö†Ô∏è –ó–Ω–∞—á–æ–∫ {badge_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ perfect_parsed_data.json")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π perfect_parsed_data.json
    try:
        with open("perfect_parsed_data.json", 'w', encoding='utf-8') as f:
            json.dump(perfect_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∑–Ω–∞—á–∫–æ–≤ –≤ perfect_parsed_data.json")
        print("üìÑ –§–∞–π–ª perfect_parsed_data.json —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è perfect_parsed_data.json: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï PERFECT_PARSED_DATA.JSON")
    print("=" * 40)
    
    update_perfect_parsed_data()
    
    print("\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    print("2. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã –≤—Ä—É—á–Ω—É—é")

if __name__ == "__main__":
    main()
