// –ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ ai-data/ –¥–ª—è Vercel
import fs from 'fs';
import path from 'path';

// –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
let badgeDataCache = null;
let categoriesCache = new Map();
let badgesCache = new Map();

export class DataLoaderAIData {
  constructor() {
    // –í Vercel —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    this.aiDataPath = path.join(process.cwd(), 'ai-data');
    this.masterIndexPath = path.join(this.aiDataPath, 'MASTER_INDEX.json');
    console.log('üìÅ –ü—É—Ç—å –∫ ai-data:', this.aiDataPath);
    console.log('üìÅ –ü—É—Ç—å –∫ MASTER_INDEX:', this.masterIndexPath);
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–∫–æ–≤ –∏–∑ ai-data/
  loadAllData() {
    if (badgeDataCache) {
      console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ ai-data');
      return badgeDataCache;
    }

    try {
      console.log('üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ ai-data...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º MASTER_INDEX
      const masterIndex = JSON.parse(fs.readFileSync(this.masterIndexPath, 'utf8'));
      console.log('‚úÖ MASTER_INDEX –∑–∞–≥—Ä—É–∂–µ–Ω:', {
        categories: masterIndex.totalCategories,
        badges: masterIndex.totalBadges,
        levels: masterIndex.totalLevels
      });
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const categories = masterIndex.categories.map(catInfo => {
        const categoryPath = path.join(this.aiDataPath, catInfo.path);
        const categoryIndexPath = path.join(categoryPath, 'index.json');
        
        let categoryData = null;
        try {
          categoryData = JSON.parse(fs.readFileSync(categoryIndexPath, 'utf8'));
        } catch (error) {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${categoryIndexPath}:`, error.message);
          categoryData = {
            categoryId: catInfo.id,
            title: catInfo.title,
            badges: 0,
            levels: 0,
            badgesData: []
          };
        }
        
        const category = {
          id: catInfo.id,
          title: catInfo.title,
          emoji: catInfo.emoji,
          path: catInfo.path,
          badges: categoryData.badgesData || [],
          badge_count: categoryData.badges || 0,
          introduction: null,
          philosophy: null
        };
        
        categoriesCache.set(category.id, category);
        return category;
      });

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–Ω–∞—á–∫–∏ –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      let allBadges = [];
      categories.forEach(category => {
        category.badges.forEach(badgeData => {
          const badge = {
            id: badgeData.id,
            title: badgeData.title,
            emoji: badgeData.emoji,
            category_id: category.id,
            category_title: category.title,
            levels: badgeData.levels || [],
            description: `${badgeData.title} - –∑–Ω–∞—á–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category.title}"`,
            criteria: `–ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–∫–∞ "${badgeData.title}"`,
            benefits: `–ü–æ–ª—å–∑–∞ –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–∫–∞ "${badgeData.title}"`
          };
          
          badgesCache.set(badge.id, badge);
          allBadges.push(badge);
        });
      });

      // –°–æ–∑–¥–∞–µ–º –∫—ç—à –¥–∞–Ω–Ω—ã—Ö
      badgeDataCache = {
        categories: categories,
        badges: allBadges,
        totalCategories: masterIndex.totalCategories,
        totalBadges: masterIndex.totalBadges,
        totalLevels: masterIndex.totalLevels
      };

      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ ai-data –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
        categories: badgeDataCache.totalCategories,
        badges: badgeDataCache.totalBadges,
        levels: badgeDataCache.totalLevels
      });

      return badgeDataCache;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ ai-data:', error.message);
      console.error('üìÅ –ü—É—Ç—å –∫ ai-data:', this.aiDataPath);
      console.error('üìÇ –ü–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', fs.existsSync(this.aiDataPath));
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –∫—Ä–∞—à–∞
      return { categories: [], badges: [] };
    }
  }

  // –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
  getCategory(categoryId) {
    if (!badgeDataCache) {
      this.loadAllData();
    }
    return categoriesCache.get(categoryId);
  }

  // –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–æ–∫ –ø–æ ID
  getBadge(badgeId) {
    if (!badgeDataCache) {
      this.loadAllData();
    }
    return badgesCache.get(badgeId);
  }

  // –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  getAllCategories() {
    if (!badgeDataCache) {
      this.loadAllData();
    }
    return badgeDataCache.categories;
  }

  // –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–Ω–∞—á–∫–∏
  getAllBadges() {
    if (!badgeDataCache) {
      this.loadAllData();
    }
    return badgeDataCache.badges;
  }

  // –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  getBadgesByCategory(categoryId) {
    if (!badgeDataCache) {
      this.loadAllData();
    }
    return badgeDataCache.badges.filter(badge => badge.category_id === categoryId);
  }

  // –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  getStats() {
    if (!badgeDataCache) {
      this.loadAllData();
    }
    return {
      totalCategories: badgeDataCache.totalCategories,
      totalBadges: badgeDataCache.totalBadges,
      totalLevels: badgeDataCache.totalLevels
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const dataLoaderAIData = new DataLoaderAIData();
