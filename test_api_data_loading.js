// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ API
async function testDataLoading() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ API...\n');

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const response1 = await fetch('https://backend-fq5f9bm5c-nomorningst-2550s-projects.vercel.app/api/chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message: '–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–Ω–∞—á–∫–æ–≤ –≤ –ª–∞–≥–µ—Ä–µ? –ù–∞–∑–æ–≤–∏ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.',
        user_id: 'test_data_loading_' + Date.now(),
        context: {}
      })
    });

    const data1 = await response1.json();
    
    if (response1.ok) {
      console.log('‚úÖ –¢–µ—Å—Ç 1 - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:');
      console.log('ü§ñ –û—Ç–≤–µ—Ç:', data1.response);
      
      // –ò—â–µ–º —á–∏—Å–ª–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –æ—Ç–≤–µ—Ç–µ
      const categoryMatch = data1.response.match(/(\d+)\s*–∫–∞—Ç–µ–≥–æ—Ä–∏/i);
      if (categoryMatch) {
        const count = parseInt(categoryMatch[1]);
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${count}`);
        if (count === 14) {
          console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π!');
        } else {
          console.log(`‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ! –û–∂–∏–¥–∞–µ—Ç—Å—è 14, –ø–æ–ª—É—á–µ–Ω–æ ${count}`);
        }
      } else {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –æ—Ç–≤–µ—Ç–∞');
      }
    } else {
      console.log('‚ùå –¢–µ—Å—Ç 1 –Ω–µ –ø—Ä–æ—à–µ–ª:', data1.error);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ 1:', error.message);
  }

  console.log('\n' + '='.repeat(50));

  // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  try {
    console.log('\nüß™ –¢–µ—Å—Ç 2 - –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
    
    const response2 = await fetch('https://backend-fq5f9bm5c-nomorningst-2550s-projects.vercel.app/api/chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message: '–ù–∞–∑–æ–≤–∏ –ø–µ—Ä–≤—ã–µ 5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–Ω–∞—á–∫–æ–≤ –≤ –ª–∞–≥–µ—Ä–µ',
        user_id: 'test_categories_' + Date.now(),
        context: {}
      })
    });

    const data2 = await response2.json();
    
    if (response2.ok) {
      console.log('ü§ñ –û—Ç–≤–µ—Ç:', data2.response);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      const expectedCategories = [
        '–ó–∞ –ª–∏—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
        '–ó–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –¥–µ–ª–∞', 
        '–ú–µ–¥–∏–∞ –∑–Ω–∞—á–∫–∏',
        '–ë—Ä–æ-–∑–Ω–∞—á–∫–∏',
        '–ó–Ω–∞—á–∫–∏ –î–≤–∏–∂–∫–æ–≤'
      ];
      
      let foundCategories = 0;
      expectedCategories.forEach(category => {
        if (data2.response.includes(category)) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}`);
          foundCategories++;
        } else {
          console.log(`‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}`);
        }
      });
      
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${foundCategories}/${expectedCategories.length}`);
      
    } else {
      console.log('‚ùå –¢–µ—Å—Ç 2 –Ω–µ –ø—Ä–æ—à–µ–ª:', data2.error);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ 2:', error.message);
  }

  console.log('\n' + '='.repeat(50));

  // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
  try {
    console.log('\nüß™ –¢–µ—Å—Ç 3 - –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç...');
    
    const response3 = await fetch('https://backend-fq5f9bm5c-nomorningst-2550s-projects.vercel.app/api/chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message: '–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è, –Ω–∞–∑–æ–≤–∏ —Å–≤–æ–µ –∏–º—è –∏ –æ–±—ä—è—Å–Ω–∏, –∫—Ç–æ —Ç—ã',
        user_id: 'test_system_prompt_' + Date.now(),
        context: {}
      })
    });

    const data3 = await response3.json();
    
    if (response3.ok) {
      console.log('ü§ñ –û—Ç–≤–µ—Ç:', data3.response);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
      const systemChecks = [
        { key: '–ù–µ–π—Ä–æ–í–∞–ª—é—à–∞', found: data3.response.includes('–ù–µ–π—Ä–æ–í–∞–ª—é—à–∞') },
        { key: '–í–∞–ª—é—à–∞', found: data3.response.includes('–í–∞–ª—é—à–∞') },
        { key: '–†–µ–∞–ª—å–Ω—ã–π –õ–∞–≥–µ—Ä—å', found: data3.response.includes('–†–µ–∞–ª—å–Ω—ã–π –õ–∞–≥–µ—Ä—å') },
        { key: '—Ü–∏—Ñ—Ä–æ–≤–∞—è –≤–æ–∂–∞—Ç–∞—è', found: data3.response.includes('—Ü–∏—Ñ—Ä–æ–≤–∞—è –≤–æ–∂–∞—Ç–∞—è') },
        { key: '—ç–º–ø–∞—Ç–∏—á–Ω–∞—è', found: data3.response.includes('—ç–º–ø–∞—Ç–∏—á–Ω–∞—è') }
      ];
      
      systemChecks.forEach(check => {
        console.log(`${check.found ? '‚úÖ' : '‚ùå'} ${check.key}: ${check.found ? '–Ω–∞–π–¥–µ–Ω–æ' : '–ù–ï –Ω–∞–π–¥–µ–Ω–æ'}`);
      });
      
      const foundCount = systemChecks.filter(c => c.found).length;
      console.log(`üìä –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞: ${foundCount}/${systemChecks.length} (${Math.round(foundCount/systemChecks.length*100)}%)`);
      
    } else {
      console.log('‚ùå –¢–µ—Å—Ç 3 –Ω–µ –ø—Ä–æ—à–µ–ª:', data3.error);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ 3:', error.message);
  }
}

testDataLoading();
