#!/usr/bin/env node

const { GoogleGenerativeAI } = require('@google/generative-ai');
const readline = require('readline');

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ API –∫–ª—é—á–∞
const API_KEY = 'AIzaSyB2J0g6WOtvFLuoWyYwHJtfbxE56WN30Ug';
const genAI = new GoogleGenerativeAI(API_KEY);

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –≤–≤–æ–¥–∞
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

async function runGemini() {
  console.log('ü§ñ Gemini CLI –∑–∞–ø—É—â–µ–Ω!');
  console.log('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å (–∏–ª–∏ "exit" –¥–ª—è –≤—ã—Ö–æ–¥–∞):\n');
  
  const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
  
  while (true) {
    const question = await new Promise(resolve => {
      rl.question('> ', resolve);
    });
    
    if (question.toLowerCase() === 'exit') {
      console.log('–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã');
      break;
    }
    
    if (question.trim() === '') {
      continue;
    }
    
    try {
      console.log('ü§î –î—É–º–∞—é...\n');
      
      const result = await model.generateContent(question);
      const response = await result.response;
      const text = response.text();
      
      console.log('ü§ñ –û—Ç–≤–µ—Ç:');
      console.log(text);
      console.log('\n' + '='.repeat(50) + '\n');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
      console.log('\n' + '='.repeat(50) + '\n');
    }
  }
  
  rl.close();
}

runGemini().catch(console.error);
