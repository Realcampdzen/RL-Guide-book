import React, { useState, useEffect } from 'react';
import ChatBot from './components/ChatBot';
import ChatButton from './components/ChatButton';
import { 
  pluralizeRu, 
  fixDescriptionFormatting, 
  fixCriteriaFormatting, 
  extractEvidenceSection,
  shouldApplyFormatting
} from './utils/textFormatting';

// Normalize level values coming from AI data
const canonicalizeLevel = (lvl: unknown): string => {
  const raw = String(lvl ?? '').trim();
  if (!raw) return '';
  const low = raw.toLowerCase();
  if (low === '1' || low === '–±–∞–∑–æ–≤—ã–π' || low === '–±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å') return '–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å';
  if (low === '2' || low === '–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π' || low === '–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å') return '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å';
  if (low === '3' || low === '—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π' || low === '—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å' || low === '–≤–æ–∂–∞—Ç—Å–∫–∏–π' || low === '–≤–æ–∂–∞—Ç—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å') return '–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å';
  return raw;
};

// Split-safe badge id helpers
const splitId = (id: string | undefined | null): string[] => String(id ?? '').split('.');
const sameBaseTwoSegments = (a: string, b: string): boolean => {
  const as = splitId(a);
  const bs = splitId(b);
  return as.length >= 2 && bs.length >= 2 && as[0] === bs[0] && as[1] === bs[1];
};

// Fallback emoji mapping for categories when AI data lacks proper emojis
const getFallbackEmojiFor = (categoryId: string, _title?: string): string => {
  switch (categoryId) {
    case '12': // –ò–ò
      return 'ü§ñ';
    case '11': // –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä –ø–æ–ª—å–∑—ã
      return 'üïµÔ∏è';
    case '14': // –õ–∏–¥–µ—Ä—Å—Ç–≤–æ / –ë—Ä–æ-–¥–≤–∏–∂–µ–Ω–∏—è
      return '‚≠ê';
    default:
      return '‚ú®';
  }
};

// Function to get category icon (emoji or image)
const getCategoryIcon = (categoryId: string): string | JSX.Element => {
  switch (categoryId) {
    case '1': // –ö–∞—Ç–µ–≥–æ—Ä–∏—è 1
      return <img 
        className="category-1-icon"
        src="/category_1.png" 
        alt="–ö–∞—Ç–µ–≥–æ—Ä–∏—è 1" 
      />;
    case '2': // –ö–∞—Ç–µ–≥–æ—Ä–∏—è 2
      return <img 
        className="category-2-icon"
        src="/category_2.png" 
        alt="–ö–∞—Ç–µ–≥–æ—Ä–∏—è 2" 
      />;
    case '3': // –ö–∞—Ç–µ–≥–æ—Ä–∏—è 3
      return <img 
        className="category-3-icon"
        src="/category_3.png" 
        alt="–ö–∞—Ç–µ–≥–æ—Ä–∏—è 3" 
      />;
    case '4': // –ö–∞—Ç–µ–≥–æ—Ä–∏—è 4
      return <img 
        className="category-4-icon"
        src="/category_4.png" 
        alt="–ö–∞—Ç–µ–≥–æ—Ä–∏—è 4" 
      />;
    case '5': // –ö–∞—Ç–µ–≥–æ—Ä–∏—è 5
      return <img 
        className="category-5-icon"
        src="/category_5.png" 
        alt="–ö–∞—Ç–µ–≥–æ—Ä–∏—è 5" 
      />;
    case '6': // –ö–∞—Ç–µ–≥–æ—Ä–∏—è 6
      return <img 
        className="category-6-icon"
        src="/category_6.png" 
        alt="–ö–∞—Ç–µ–≥–æ—Ä–∏—è 6" 
      />;
    case '7': // –ö–∞—Ç–µ–≥–æ—Ä–∏—è 7
      return <img 
        className="category-7-icon"
        src="/category_7.png" 
        alt="–ö–∞—Ç–µ–≥–æ—Ä–∏—è 7" 
      />;
    case '8': // –ö–∞—Ç–µ–≥–æ—Ä–∏—è 8
      return <img 
        className="category-8-icon"
        src="/category_8.png" 
        alt="–ö–∞—Ç–µ–≥–æ—Ä–∏—è 8" 
      />;
    case '9': // –ö–∞—Ç–µ–≥–æ—Ä–∏—è 9
      return <img 
        className="category-9-icon"
        src="/category_9.png" 
        alt="–ö–∞—Ç–µ–≥–æ—Ä–∏—è 9" 
      />;
    case '10': // –ö–∞—Ç–µ–≥–æ—Ä–∏—è 10
      return <img 
        className="category-10-icon"
        src="/category_10.png" 
        alt="–ö–∞—Ç–µ–≥–æ—Ä–∏—è 10" 
      />;
    case '11': // –ö–∞—Ç–µ–≥–æ—Ä–∏—è 11
      return <img 
        className="category-11-icon"
        src="/category_11.png" 
        alt="–ö–∞—Ç–µ–≥–æ—Ä–∏—è 11" 
      />;
    case '12': // –ò–ò
      return <img 
        className="category-12-icon"
        src="/category_12.png" 
        alt="–ò–ò" 
      />;
    case '13': // –ö–∞—Ç–µ–≥–æ—Ä–∏—è 13
      return <img 
        className="category-13-icon"
        src="/category_13.png" 
        alt="–ö–∞—Ç–µ–≥–æ—Ä–∏—è 13" 
      />;
    case '14': // –ö–∞—Ç–µ–≥–æ—Ä–∏—è 14
      return <img 
        className="category-14-icon"
        src="/category_14.png" 
        alt="–ö–∞—Ç–µ–≥–æ—Ä–∏—è 14" 
      />;
    default:
      return 'üèÜ';
  }
};

// Feature toggles
const SHOW_RELATED = false; // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –±–ª–æ–∫ "–ü–æ—Ö–æ–∂–∏–µ –∑–Ω–∞—á–∫–∏"

// Layout configuration overrides for specific badge groups
const layoutOverrides = {
  '1.1': {
    tallOn: ['1.1.1', '1.1.2', '1.1.3'],
    textMaxEm: 32
  },
  '1.2': {
    tallOn: ['1.2.1', '1.2.2', '1.2.3'],
    textMaxEm: 32
  },
  '1.3': {
    tallOn: ['1.3.1', '1.3.2', '1.3.3'],
    textMaxEm: 32
  },
  '1.4': {
    tallOn: ['1.4.1', '1.4.2'],
    textMaxEm: 32
  },
  '1.5': {
    tallOn: ['1.5.1', '1.5.2', '1.5.3'],
    textMaxEm: 32
  },
  '2.1': {
    tallOn: ['2.1.1', '2.1.2'],
    textMaxEm: 32
  },
  '2.2': {
    tallOn: ['2.2.1', '2.2.2'],
    textMaxEm: 32
  },
  '2.3': {
    tallOn: ['2.3.1', '2.3.2'],
    textMaxEm: 32
  },
  '2.4': {
    tallOn: ['2.4.1', '2.4.2'],
    textMaxEm: 32
  },
  '2.5': {
    tallOn: ['2.5'],
    textMaxEm: 32
  },
  '2.6': {
    tallOn: ['2.6.1', '2.6.2'],
    textMaxEm: 32
  },
  '2.7': {
    tallOn: ['2.7.1', '2.7.2'],
    textMaxEm: 32
  },
  '2.8': {
    tallOn: ['2.8.1', '2.8.2'],
    textMaxEm: 32
  },
  '2.9': {
    tallOn: ['2.9.1', '2.9.2'],
    textMaxEm: 32
  },
  // Category 3 - Media Badges
  '3.1': {
    tallOn: ['3.1.1', '3.1.2', '3.1.3'],
    textMaxEm: 32
  },
  '3.2': {
    tallOn: ['3.2.1', '3.2.2', '3.2.3'],
    textMaxEm: 32
  },
  '3.3': {
    tallOn: ['3.3.1', '3.3.2', '3.3.3'],
    textMaxEm: 32
  },
  // Category 4 - Camp Activities
  '4.1': {
    tallOn: ['4.1'],
    textMaxEm: 32
  },
  '4.2': {
    tallOn: ['4.2.1', '4.2.2', '4.2.3'],
    textMaxEm: 32
  },
  '4.3': {
    tallOn: ['4.3.1', '4.3.2', '4.3.3'],
    textMaxEm: 32
  },
  '4.4': {
    tallOn: ['4.4.1', '4.4.2', '4.4.3'],
    textMaxEm: 32
  },
  // Category 5 - Squad Activities
  '5.1': {
    tallOn: ['5.1.1', '5.1.2', '5.1.3'],
    textMaxEm: 32
  },
  '5.2': {
    tallOn: ['5.2'],
    textMaxEm: 32
  },
  '5.3': {
    tallOn: ['5.3'],
    textMaxEm: 32
  },
                '5.4': {
                tallOn: ['5.4.1', '5.4.2', '5.4.3'],
                textMaxEm: 32
              },
              '5.5': {
                tallOn: ['5.5.1', '5.5.2', '5.5.3'],
                textMaxEm: 32
              },
              '5.6': {
                tallOn: ['5.6.1', '5.6.2', '5.6.3'],
                textMaxEm: 32
              },
                             '5.7': {
                 tallOn: ['5.7.1', '5.7.2', '5.7.3'],
                 textMaxEm: 32
               },
               // Category 6 - Harmony and Order
               '6.1': {
                 tallOn: ['6.1.1', '6.1.2', '6.1.3'],
                 textMaxEm: 32
               },
               '6.2': {
                 tallOn: ['6.2.1', '6.2.2', '6.2.3'],
                 textMaxEm: 32
               },
               '6.3': {
                 tallOn: ['6.3.1', '6.3.2', '6.3.3'],
                 textMaxEm: 32
               },
               '6.4': {
                 tallOn: ['6.4.1', '6.4.2', '6.4.3'],
                 textMaxEm: 32
               }
  // Add more groups as needed
};

interface Category {
  id: string;
  title: string;
  emoji?: string;
  badge_count: number;
  expected_badges: number;
  description?: string;
  introduction?: {
    markdown: string;
    html: string;
    has_introduction: boolean;
  };
  additional_materials?: {
    checklists?: {
      [key: string]: {
        title: string;
        markdown: string;
        html: string;
      };
    };
    methodology?: {
      [key: string]: {
        title: string;
        markdown: string;
        html: string;
      };
    };
  };
}

interface Badge {
  id: string;
  title: string;
  emoji: string;
  category_id: string;
  level: string;
  description?: string;
  criteria?: string;
  confirmation?: string;
  nameExplanation?: string; // –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–Ω–∞—á–∫–∞
  skillTips?: string; // –ö–∞–∫ –ø—Ä–æ–∫–∞—á–∞—Ç—å –Ω–∞–≤—ã–∫
  examples?: string; // –ü—Ä–∏–º–µ—Ä—ã –∏–¥–µ–π/–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  importance?: string; // –ü–æ—á–µ–º—É —ç—Ç–æ—Ç –∑–Ω–∞—á–æ–∫ –≤–∞–∂–µ–Ω
  philosophy?: string; // –§–∏–ª–æ—Å–æ—Ñ–∏—è –∑–Ω–∞—á–∫–∞
  howToBecome?: string; // –ö–∞–∫ —Å—Ç–∞—Ç—å...
}

type View = 'intro' | 'categories' | 'category' | 'badge' | 'badge-level' | 'introduction' | 'additional-material' | 'about-camp' | 'registration-form';

const App: React.FC = () => {
  const [categories, setCategories] = useState<Category[]>([]);
  const [badges, setBadges] = useState<Badge[]>([]);
  const [currentView, setCurrentView] = useState<View>('intro');
  const [selectedCategory, setSelectedCategory] = useState<Category | null>(null);
  const [selectedBadge, setSelectedBadge] = useState<Badge | null>(null);
  const [selectedLevel, setSelectedLevel] = useState<string>('');
  const [selectedAdditionalMaterial, setSelectedAdditionalMaterial] = useState<{
    type: 'checklists' | 'methodology';
    key: string;
    title: string;
    content: string;
  } | null>(null);
  const [loading, setLoading] = useState(true);
  const [isChatOpen, setIsChatOpen] = useState(false);
  
  // Form states
  const [formData, setFormData] = useState({
    childName: '',
    parentName: '',
    phone: '',
    email: '',
    childAge: '',
    specialRequests: ''
  });


  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    console.log('App: Component mounted, loading data');
    loadDataFromAi();
  }, []);

  // very small markdown to html (headings, lists, paragraphs, bold/italics)
  const markdownToHtml = (md: string): string => {
    if (!md) return '';

    // Normalize new lines
    let html = md.replace(/\r\n?/g, '\n');

    // Headings (support # to ######)
    html = html
      .replace(/^(#{1,6})\s+(.+)$/gm, (_m, hashes: string, text: string) => {
        const level = Math.min(6, Math.max(1, hashes.length));
        return `<h${level}>${text}<\/h${level}>`;
      })
      // Simple lists
      .replace(/^\*\s+(.*)$/gim, '<li>$1<\/li>')
      .replace(/^\-\s+(.*)$/gim, '<li>$1<\/li>')
      // Ordered list items like `1. text`
      .replace(/^\d+\.\s+(.*)$/gim, '<li>$1<\/li>')
      // Horizontal rule
      .replace(/^\s*---\s*$/gm, '<hr>')
      // Blockquote lines starting with `>`
      .replace(/^>\s+(.*)$/gm, '<blockquote>$1<\/blockquote>');

    // Inline formatting: bold and italics
    // Bold first to avoid interfering with italics
    html = html.replace(/\*\*(.+?)\*\*/g, '<strong>$1<\/strong>');
    // Italic: avoid matching list markers and bold
    html = html.replace(/(^|[^*])\*(?!\s)([^*]+?)\*(?!\*)/g, '$1<em>$2<\/em>');

    // Wrap plain lines to <p>
    html = html
      .split('\n')
      .map((line) => /<\/?(h\d|li|ul|ol|p|blockquote|pre|code|strong|em|hr)>/i.test(line) || /<\/li>/.test(line)
        ? line
        : (line.trim() ? `<p>${line}<\/p>` : ''))
      .join('\n');

    // Group list items into <ul> blocks (naive but sufficient for our simple md)
    html = html
      // Group list items into a single unordered list block (simple heuristic)
      .replace(/(<p><li>)/g, '<ul><li>')
      .replace(/<\/li><\/p>(\n?<p><li>)/g, '<\/li>$1')
      .replace(/<\/li><\/p>/g, '<\/li><\/ul>');

    return html;
  };


  const loadCategoryIntroduction = async (categoryId: string) => {
    try {
      const res = await fetch(`/ai-data/category-${categoryId}/introduction.md`);
      if (!res.ok) return;
      const md = await res.text();
      const html = markdownToHtml(md);
      const cleaned = cleanHtmlContent(html);
      setSelectedCategory(prev => prev && prev.id === categoryId
        ? ({ ...prev, introduction: { has_introduction: true, html: cleaned, markdown: '' } })
        : prev);
    } catch (e) {
      console.error('App: failed to load introduction.md for category', categoryId, e);
    }
  };

  const loadDataFromAi = async () => {
    try {
      console.log('App: Loading AI data...');
      setLoading(true);
      const masterRes = await fetch('/ai-data/MASTER_INDEX.json');
      const master = await masterRes.json();

      const categoriesData: any[] = [];
      const badgesData: any[] = [];

      for (const aiCategory of master.categories) {
        const idxRes = await fetch(`/ai-data/${aiCategory.path}index.json`);
        const catIndex = await idxRes.json();

        categoriesData.push({
          id: aiCategory.id,
          title: aiCategory.title,
          emoji: aiCategory.emoji,
          badge_count: catIndex.levels || catIndex.totalLevels || aiCategory.badges,
          expected_badges: catIndex.levels || catIndex.totalLevels || aiCategory.badges,
          introduction: { has_introduction: true, html: '' },
          additional_materials: catIndex.additional_materials
        });


        for (const badgeIndex of (catIndex.badgesData || [])) {
          const badgeRes = await fetch(`/ai-data/${aiCategory.path}${badgeIndex.id}.json`);
          const aiBadge = await badgeRes.json();

          if (aiBadge.levels && aiBadge.levels.length) {
            for (const level of aiBadge.levels) {
                const rawCriteria = (level as any).criteria as unknown;
                const rawConfirmation = (level as any).confirmation as unknown;
                const criteriaText = Array.isArray(rawCriteria)
                  ? (rawCriteria as any[]).map((s) => String(s).trim()).filter(Boolean).map((s) => `‚Ä¢ ${s}`).join('\n')
                  : (rawCriteria as string) || '';
                const confirmationText = Array.isArray(rawConfirmation)
                  ? (rawConfirmation as any[]).map((s) => String(s).trim()).filter(Boolean).map((s) => `‚Ä¢ ${s}`).join('\n')
                  : (rawConfirmation as string) || '';
              badgesData.push({
                id: (level as any).id,
                title: aiBadge.title,
                emoji: ((typeof ((level as any).emoji ?? aiBadge.emoji) === 'string' && (((level as any).emoji ?? aiBadge.emoji).replace(/\?/g, '').trim().length > 0)) ? ((level as any).emoji ?? aiBadge.emoji) : getFallbackEmojiFor(aiCategory.id, aiBadge.title)),
                category_id: aiCategory.id,
                  level: canonicalizeLevel((level as any).level ?? level),
                description: aiBadge.description,
                  criteria: criteriaText,
                  confirmation: confirmationText,
                nameExplanation: aiBadge.nameExplanation,
                skillTips: aiBadge.skillTips,
                examples: aiBadge.examples,
                importance: aiBadge.importance,
                philosophy: aiBadge.philosophy,
                howToBecome: aiBadge.howToBecome
              });
            }
          } else {
              const rawCriteria = (aiBadge as any).criteria as unknown;
              const rawConfirmation = (aiBadge as any).confirmation as unknown;
              const criteriaText = Array.isArray(rawCriteria)
                ? (rawCriteria as any[]).map((s) => String(s).trim()).filter(Boolean).map((s) => `‚Ä¢ ${s}`).join('\n')
                : (rawCriteria as string) || '';
              const confirmationText = Array.isArray(rawConfirmation)
                ? (rawConfirmation as any[]).map((s) => String(s).trim()).filter(Boolean).map((s) => `‚Ä¢ ${s}`).join('\n')
                : (rawConfirmation as string) || '';
            badgesData.push({
              id: aiBadge.id,
              title: aiBadge.title,
              emoji: ((typeof aiBadge.emoji === 'string' && aiBadge.emoji.replace(/\?/g, '').trim().length > 0) ? aiBadge.emoji : getFallbackEmojiFor(aiCategory.id, aiBadge.title)),
              category_id: aiCategory.id,
              level: '–û–ø–∏—Å–∞–Ω–∏–µ',
              description: aiBadge.description,
                criteria: criteriaText,
                confirmation: confirmationText,
              nameExplanation: aiBadge.nameExplanation,
              skillTips: aiBadge.skillTips,
              examples: aiBadge.examples,
              importance: aiBadge.importance,
              philosophy: aiBadge.philosophy,
              howToBecome: aiBadge.howToBecome
            });
          }
        }
      }

      setCategories(categoriesData);
      setBadges(badgesData);
      console.log('App: AI data loaded:', categoriesData.length, 'categories,', badgesData.length, 'badges');
    } catch (e) {
      console.error('App: Error loading AI data', e);
    } finally {
      setLoading(false);
    }
  };

  const loadData = async () => {
    try {
      console.log('App: Loading data...');
      setLoading(true);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—Ä–æ–≤–Ω–µ–π
      const categoriesData = [
        { id: '1', title: '–ó–∞ –ª–∏—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è', badge_count: 38, expected_badges: 38 },
        { id: '2', title: '–ó–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –¥–µ–ª–∞', badge_count: 9, expected_badges: 9 },
        { id: '3', title: '–ú–µ–¥–∏–∞ –∑–Ω–∞—á–∫–∏', badge_count: 9, expected_badges: 9 },
        { id: '4', title: '–ó–∞ –ª–∞–≥–µ—Ä–Ω—ã–µ –¥–µ–ª–∞', badge_count: 10, expected_badges: 10 },
        { id: '5', title: '–ó–∞ –æ—Ç—Ä—è–¥–Ω—ã–µ –¥–µ–ª–∞', badge_count: 20, expected_badges: 20 },
        { id: '6', title: '–ì–∞—Ä–º–æ–Ω–∏—è –∏ –ø–æ—Ä—è–¥–æ–∫', badge_count: 12, expected_badges: 12 },
        { id: '7', title: '–ó–∞ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è', badge_count: 24, expected_badges: 24 },
        { id: '8', title: '–ó–Ω–∞—á–∫–∏ –î–≤–∏–∂–∫–æ–≤', badge_count: 9, expected_badges: 9 },
        { id: '9', title: '–ó–Ω–∞—á–∫–∏ –ë—Ä–æ ‚Äì –î–≤–∏–∂–µ–Ω–∏—è', badge_count: 10, expected_badges: 10 },
        { id: '10', title: '–ó–Ω–∞—á–∫–∏ –Ω–∞ —Ñ–ª–∞–≥ –æ—Ç—Ä—è–¥–∞', badge_count: 3, expected_badges: 3 },
        { id: '11', title: '–†–µ–∞–ª—å–Ω–æ—Å—Ç—å: –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å', badge_count: 16, expected_badges: 16 },
        { id: '12', title: '–ò–ò: –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞', badge_count: 35, expected_badges: 35 },
        { id: '13', title: '–°–æ—Ñ—Ç-—Å–∫–∏–ª–ª–∑ –∏–Ω—Ç–µ–Ω—Å–∏–≤ ‚Äî —Ä–∞–∑–≤–∏—Ç–∏–µ –≥–∏–±–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤', badge_count: 26, expected_badges: 26 },
        { id: '14', title: '–ó–Ω–∞—á–∫–∏ –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ –ü–æ–ª—å–∑—ã', badge_count: 19, expected_badges: 19 }
      ];
      
      setCategories(categoriesData);
      setBadges([]);
      console.log('App: Data loaded:', categoriesData.length, 'categories');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      // Fallback –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—Ä–æ–≤–Ω–µ–π
      setCategories([
        { id: '1', title: '–ó–∞ –ª–∏—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è', badge_count: 38, expected_badges: 38 },
        { id: '2', title: '–ó–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –¥–µ–ª–∞', badge_count: 9, expected_badges: 9 },
        { id: '3', title: '–ú–µ–¥–∏–∞ –∑–Ω–∞—á–∫–∏', badge_count: 9, expected_badges: 9 },
        { id: '4', title: '–ó–∞ –ª–∞–≥–µ—Ä–Ω—ã–µ –¥–µ–ª–∞', badge_count: 10, expected_badges: 10 },
        { id: '5', title: '–ó–∞ –æ—Ç—Ä—è–¥–Ω—ã–µ –¥–µ–ª–∞', badge_count: 20, expected_badges: 20 },
        { id: '6', title: '–ì–∞—Ä–º–æ–Ω–∏—è –∏ –ø–æ—Ä—è–¥–æ–∫', badge_count: 12, expected_badges: 12 },
        { id: '7', title: '–ó–∞ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è', badge_count: 24, expected_badges: 24 },
        { id: '8', title: '–ó–Ω–∞—á–∫–∏ –î–≤–∏–∂–∫–æ–≤', badge_count: 9, expected_badges: 9 },
        { id: '9', title: '–ó–Ω–∞—á–∫–∏ –ë—Ä–æ ‚Äì –î–≤–∏–∂–µ–Ω–∏—è', badge_count: 10, expected_badges: 10 },
        { id: '10', title: '–ó–Ω–∞—á–∫–∏ –Ω–∞ —Ñ–ª–∞–≥ –æ—Ç—Ä—è–¥–∞', badge_count: 3, expected_badges: 3 },
        { id: '11', title: '–†–µ–∞–ª—å–Ω–æ—Å—Ç—å: –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å', badge_count: 16, expected_badges: 16 },
        { id: '12', title: '–ò–ò: –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞', badge_count: 35, expected_badges: 35 },
        { id: '13', title: '–°–æ—Ñ—Ç-—Å–∫–∏–ª–ª–∑ –∏–Ω—Ç–µ–Ω—Å–∏–≤ ‚Äî —Ä–∞–∑–≤–∏—Ç–∏–µ –≥–∏–±–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤', badge_count: 26, expected_badges: 26 },
        { id: '14', title: '–ó–Ω–∞—á–∫–∏ –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ –ü–æ–ª—å–∑—ã', badge_count: 19, expected_badges: 19 }
      ]);
    } finally {
      setLoading(false);
      console.log('App: Loading completed');
    }
  };

  // Prevent TS noUnusedLocals error for legacy helper
  void loadData;
  const handleIntroClick = () => {
    console.log('App: Intro clicked - switching to categories view');
    setCurrentView('categories');
    setSelectedCategory(null);
    setSelectedBadge(null);
    setSelectedLevel('');
  };

  const handleCategoryClick = (category: Category) => {
    console.log('–ö–ª–∏–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', category.title);
    setSelectedCategory(category);
    setCurrentView('category');
    setSelectedBadge(null);
    setSelectedLevel('');
    console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω currentView:', 'category');
  };

  const handleBadgeClick = (badge: Badge) => {
    console.log('App: Badge clicked:', badge.title);
    // Ensure selectedCategory matches the badge's category for proper navigation/back
    const cat = categories.find((c) => c.id === badge.category_id);
    if (cat) setSelectedCategory(cat);
    setSelectedBadge(badge);
    setCurrentView('badge');
    setSelectedLevel('');
  };

  const handleLevelClick = (level: string) => {
    console.log('App: Level clicked:', level);
    setSelectedLevel(level);
    setCurrentView('badge-level');
  };

  // Helper: get category title by id
  const categoryTitleById = (cid: string): string => {
    const c = categories.find((x) => x.id === cid);
    return c ? c.title : '';
  };

  const handleIntroductionClick = async () => {
    try {
      if (selectedCategory) {
        await loadCategoryIntroduction(selectedCategory.id);
      }
    } finally {
      setCurrentView('introduction');
    }
  };

  const handleTelegramContact = () => {
    setCurrentView('registration-form');
  };

  const handleFormSubmit = () => {
    const message = `üé™ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Å–µ–Ω–Ω—é—é —Å–º–µ–Ω—É "–û—Å–µ–Ω–Ω–∏–π 4–ö-–≤–∞–π–± –≤ –†–µ–∞–ª—å–Ω–æ–º –õ–∞–≥–µ—Ä–µ"

üë∂ –ò–º—è —Ä–µ–±—ë–Ω–∫–∞: ${formData.childName}
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è: ${formData.parentName}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
üìß Email: ${formData.email}
üéÇ –í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞: ${formData.childAge}
üí≠ –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è: ${formData.specialRequests}

–ì–æ—Ç–æ–≤—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–º–µ–Ω—É! üöÄ`;

    const telegramUrl = `https://t.me/Stivanovv?text=${encodeURIComponent(message)}`;
    window.open(telegramUrl, '_blank');
  };

  const handleFormInputChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleBackToAboutCamp = () => {
    setCurrentView('about-camp');
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ
  const processInteractiveLinks = (text: string): string => {
    // –ó–∞–º–µ–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ [—Ç–µ–∫—Å—Ç](checklist:filename.md) –∏–ª–∏ [—Ç–µ–∫—Å—Ç](methodology:filename.md)
    return text.replace(/\[([^\]]+)\]\((checklist|methodology|checklists):([^)]+)\)/g, (_, linkText, type, filename) => {
      const actualType = type === 'checklist' ? 'checklists' : type;
      return `<a href="#" onclick="window.handleMaterialClick('${actualType}', '${filename}'); return false;" style="color: #4ecdc4; text-decoration: underline; cursor: pointer;">${linkText}</a>`;
    });
  };

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –¥–æ–±–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ—Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–Ω–∞—á–∫–∏ –ø–æ —à–∞–±–ª–æ–Ω–∞–º "—Å–º. 11.1", "—Å–º. —Ä–∞–∑–¥–µ–ª 3.2"
  const processInteractiveLinksPlus = (text: string): string => {
    const base = processInteractiveLinks(text || '');
    return base.replace(/\b—Å–º\.?\s*(?:—Ä–∞–∑–¥–µ–ª|–∑–Ω–∞—á–æ–∫)?\s*(\d{1,2}\.\d{1,2}(?:\.\d{1,2})?)\b/gi, (_m: string, bid: string) => {
      const safeId = bid;
      return `<a href="#" onclick="window.openBadgeById('${safeId}'); return false;" style="color: #4ecdc4; text-decoration: underline; cursor: pointer;">—Å–º. ${safeId}</a>`;
    });
  };
  // CSP-safe version without inline JS/CSS
  const processInteractiveLinksSafe = (text: string): string => {
    return text.replace(/\[([^\]]+)\]\((checklist|methodology|checklists):([^)]+)\)/g, (_, linkText, type, filename) => {
      const actualType = type === 'checklist' ? 'checklists' : type;
      return `<a href=\"#\" data-material-type=\"${actualType}\" data-filename=\"${filename}\" class=\"interactive-link\">${linkText}</a>`;
    });
  };

  // CSP-safe extended linking: also link references like "—Å–º. 11.1" or "—Å–º. —Ä–∞–∑–¥–µ–ª 3.2"
  const processInteractiveLinksPlusSafe = (text: string): string => {
    const base = processInteractiveLinksSafe(text || '');
    return base.replace(/\b—Å–º\.?\s*(?:—Ä–∞–∑–¥–µ–ª|–∑–Ω–∞—á–æ–∫)?\s*(\d{1,2}\.\d{1,2}(?:\.\d{1,2})?)\b/gi, (_m: string, bid: string) => {
      const safeId = bid;
      return `<a href=\"#\" data-badge-id=\"${safeId}\" class=\"interactive-link\">—Å–º. ${safeId}</a>`;
    });
  };
  // Keep referenced to avoid TS noUnusedLocals error if not used
  void processInteractiveLinksSafe;

  // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º
  (window as any).handleMaterialClick = (type: string, filename: string) => {
    handleAdditionalMaterialClick(type as 'checklists' | 'methodology', filename);
  };

  // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ—Ç–∫—Ä—ã—Ç—å –∑–Ω–∞—á–æ–∫ –ø–æ –µ–≥–æ ID (–¥–ª—è –∞–≤—Ç–æ—Å—Å—ã–ª–æ–∫)
  (window as any).openBadgeById = (rawId: string) => {
    try {
      const parts = (rawId || '').split('.');
      const baseKey = parts.length >= 2 ? `${parts[0]}.${parts[1]}` : rawId;
      const group = badges.filter((b) => (b.id || '').startsWith(baseKey + '.') || b.id === baseKey);
      if (!group.length) return;
      const base = group.find((b) => String(b.level || '').toLowerCase().includes('–±–∞–∑–æ–≤')) || group[0];
      const cat = categories.find((c) => c.id === base.category_id);
      if (cat) {
        setSelectedCategory(cat);
        setCurrentView('category');
      }
      handleBadgeClick(base);
    } catch (e) {
      console.warn('openBadgeById error', e);
    }
  };

  // Delegated click handler for CSP-safe interactive links
  const handleInteractiveLinkClick = (e: React.MouseEvent) => {
    const target = e.target as HTMLElement | null;
    if (!target) return;
    const anchor = target.closest('a') as HTMLAnchorElement | null;
    if (!anchor) return;
    const matType = anchor.getAttribute('data-material-type');
    const matFile = anchor.getAttribute('data-filename');
    const badgeId = anchor.getAttribute('data-badge-id');

    if (matType && matFile) {
      e.preventDefault();
      handleAdditionalMaterialClick(matType as 'checklists' | 'methodology', matFile);
      return;
    }
    if (badgeId) {
      e.preventDefault();
      (window as any).openBadgeById?.(badgeId);
      return;
    }
  };


  const handleAdditionalMaterialClick = async (type: 'checklists' | 'methodology', key: string) => {
    console.log('App: Additional material clicked:', type, key);
    if (!selectedCategory) return;
    
    try {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã —Ñ–∞–π–ª–æ–≤
      const alias = (k: string) => {
        const map: Record<string, string> = {
          'inspector-codex.md': 'inspector-methodology.md',
          'i-messages-guide.md': 'inspector-methodology.md',
          'friendship-rules.md': 'inspector-methodology.md',
          'friendship-guide.md': 'inspector-methodology.md',
        };
        return map[k] || k;
      };
      const normalizedKey = alias(key);

      // –ü—É—Ç—å –ø–æ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const primaryPath = `/ai-data/category-${selectedCategory.id}/${type}/${normalizedKey}`;
      let response = await fetch(primaryPath);
      
      // –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–∞–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 14
      if (!response.ok) {
        const fallbackPath = `/ai-data/category-14/${type}/${normalizedKey}`;
        console.warn('Primary material not found, trying fallback:', primaryPath, '->', fallbackPath);
        response = await fetch(fallbackPath);
        if (!response.ok) {
          console.error('Failed to load additional material:', response.status, response.statusText);
          return;
        }
      }

      if (!response.ok) {
        console.error('Failed to load additional material:', response.status, response.statusText);
        return;
      }
      
      const markdownContent = await response.text();

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º markdown –≤ HTML, –∏—Å–ø–æ–ª—å–∑—É—è –æ–±—â–∏–π –º–∏–Ω–∏‚Äë–ø–∞—Ä—Å–µ—Ä
      const htmlContent = markdownToHtml(markdownContent);
      
      // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
      const titleMap: { [key: string]: string } = {
        'general-checklist.md': 'üìã –û–±—â–∏–π —á–µ–∫-–ª–∏—Å—Ç',
        'challenges-checklist.md': 'üéØ –ß–µ–∫-–ª–∏—Å—Ç —Å —á–µ–ª–ª–µ–Ω–¥–∂–∞–º–∏', 
        'active-checklist.md': 'üöÄ –ê–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞',
        'inspector-methodology.md': 'üìö –ú–µ—Ç–æ–¥–∏–∫–∞ –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ –ü–æ–ª—å–∑—ã',
        'inspector-codex.md': 'üìú –ö–æ–¥–µ–∫—Å –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ –†–µ–∞–ª—å–Ω–æ–≥–æ –õ–∞–≥–µ—Ä—è',
        'friendship-guide.md': 'ü§ù –ü–∞–º—è—Ç–∫–∞ –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–∫–∏ –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ –î—Ä—É–∂–±—ã',
        'i-messages-guide.md': 'üí¨ –ü–∞–º—è—Ç–∫–∞ –Ø —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ –î—Ä—É–∂–±—ã',
        'friendship-rules.md': 'üìã –°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ –î—Ä—É–∂–±—ã'
      };
      
      setSelectedAdditionalMaterial({
        type,
        key,
        title: titleMap[key] || key.replace('.md', '').replace(/-/g, ' '),
        content: htmlContent
      });
      setCurrentView('additional-material');
    } catch (error) {
      console.error('Error loading additional material:', error);
    }
  };

  const handleBackToCategories = () => {
    console.log('App: Back to categories clicked');
    setCurrentView('categories');
    setSelectedCategory(null);
    setSelectedBadge(null);
    setSelectedLevel('');
  };

  const handleBackToBadge = () => {
    console.log('App: Back to badge clicked');
    setCurrentView('badge');
    setSelectedLevel('');
  };

  const handleBackToIntro = () => {
    setCurrentView('intro');
    setSelectedCategory(null);
    setSelectedBadge(null);
    setSelectedLevel('');
  };

  const handleLogoClick = () => {
    setCurrentView('about-camp');
  };

  const handleBackToCategory = () => {
    console.log('App: Back to category clicked');
    setCurrentView('category');
    setSelectedBadge(null);
    setSelectedLevel('');
    setSelectedAdditionalMaterial(null);
  };

  const handleBackToCategoryFromIntroduction = () => {
    console.log('App: Back to category from introduction clicked');
    setCurrentView('category');
  };

  const handleBackToCategoryFromAdditional = () => {
    console.log('App: Back to category from additional material clicked');
    setCurrentView('category');
    setSelectedAdditionalMaterial(null);
  };



  // –≠–ö–†–ê–ù 1: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
  const renderIntro = () => (
    <div className="intro-screen">
      <div className="intro-logo" onClick={handleLogoClick}>
        <img src="/–¥–æ–º–∏–∫_AI.jpg" alt="–õ–æ–≥–æ—Ç–∏–ø" />
        <div className="logo-hover-text">–û–°–ï–ù–ù–Ø–Ø –°–ú–ï–ù–ê 2025</div>
      </div>
      <div className="intro-content">
        <h1>–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å –ø–æ –†–µ–∞–ª—å–Ω–æ–º—É –õ–∞–≥–µ—Ä—é</h1>
        <p>
          –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ —Å–∏—Å—Ç–µ–º–µ –∑–Ω–∞—á–∫–æ–≤ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!
          –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ 242 –∑–Ω–∞—á–∫–∞ –≤ 14 –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö.
        </p>
        <div className="philosophy-section">
          <p className="philosophy-main">
            <strong>–ó–Ω–∞—á–∫–∏ –∑–¥–µ—Å—å ‚Äî –Ω–µ –Ω–∞–≥—Ä–∞–¥—ã, –∞ –º–∞—Ä—à—Ä—É—Ç—ã —Ä–∞–∑–≤–∏—Ç–∏—è.</strong>
          </p>
          <p>
            –í –†–µ–∞–ª—å–Ω–æ–º –õ–∞–≥–µ—Ä–µ –∑–Ω–∞—á–∫–∏ ‚Äî –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´–∞—á–∏–≤–∫–∏¬ª –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π. 
            –≠—Ç–æ –ø—É—Ç–µ–≤–æ–¥–Ω—ã–µ –∑–≤—ë–∑–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—É—Ç—å. 
            –ö–∞–∂–¥—ã–π –∑–Ω–∞—á–æ–∫ ‚Äî –Ω–µ –º–µ–¥–∞–ª—å –∑–∞ –ø—Ä–æ—à–ª–æ–µ, –∞ –º–∞—è–∫, –æ—Å–≤–µ—â–∞—é—â–∏–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–≤–æ–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è.
          </p>
          <div className="philosophy-points">
            <div className="point">
              <span className="point-icon">üéØ</span>
              <div>
                <strong>–†–µ–∞–ª—å–Ω—ã–π –ó–Ω–∞—á–æ–∫ = –û–ø—ã—Ç.</strong><br/>
                –ó–¥–µ—Å—å –≥–ª–∞–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ ‚Äî –Ω–µ –∑–Ω–∞—á–æ–∫, –∞ –æ–ø—ã—Ç –∏ –Ω–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è. 
                –ù–æ–≤—ã–µ –¥—Ä—É–∑—å—è, –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã, –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –∏–¥–µ–∏ ‚Äî –≤—Å—ë —ç—Ç–æ –æ—Å—Ç–∞—ë—Ç—Å—è —Å —Ç–æ–±–æ–π.
              </div>
            </div>
            <div className="point">
              <span className="point-icon">üß≠</span>
              <div>
                <strong>–†–µ–∞–ª—å–Ω—ã–π –ó–Ω–∞—á–æ–∫ ‚Äî –Ω–µ –Ω–∞–≥—Ä–∞–¥–∞, –∞ –∫–æ–º–ø–∞—Å.</strong><br/>
                –¢–æ–ª—å–∫–æ —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å, –∫–∞–∫–∏–µ –∑–Ω–∞—á–∫–∏ –±—É–¥—É—Ç –Ω–∞ —Ç–≤–æ—ë–º –ø—É—Ç–∏. –í–æ–∂–∞—Ç—ã–µ –∏ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–µ–¥–ª–æ–∂–∞—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã, 
                –Ω–æ –≤—ã–±–æ—Ä –∏ –¥–≤–∏–∂–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –∑–∞ —Ç–æ–±–æ–π.
              </div>
            </div>
          </div>
          <p className="philosophy-ending">
            <strong>üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –†–µ–∞–ª—å–Ω—ã–π –õ–∞–≥–µ—Ä—å.</strong><br/>
            –í—ã–±–∏—Ä–∞–π –∑–≤–µ–∑–¥—É, –¥–≤–∏–≥–∞–π—Å—è –≤–ø–µ—Ä—ë–¥, –æ—Å—Ç–∞–≤–ª—è–π —Å–ª–µ–¥.<br/>
            –¢–≤–æ–π –æ–ø—ã—Ç ‚Äî —Ç–≤–æ–π –ø—É—Ç—å. –†–µ–∞–ª—å–Ω—ã–µ –ó–Ω–∞—á–∫–∏ –ø–æ–¥—Å–∫–∞–∂—É—Ç, –∫—É–¥–∞ –∏–¥—Ç–∏.
          </p>
        </div>
        <p className="start-instruction">
          –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–æ–∑–≤–µ–∑–¥–∏–π –∑–Ω–∞—á–∫–æ–≤.
        </p>
        <button onClick={handleIntroClick} className="start-button">
          –ù–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ
        </button>
      </div>
    </div>
  );

     // –≠–ö–†–ê–ù 2: 14 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   const renderCategories = () => {
    // const getConstellationPosition = (index: number, _total: number) => {
    //       // –ü—Ä–æ—Å—Ç–∞—è —Å–µ—Ç–∫–∞ 4x4 —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
    //       const marginX = 20; // –û—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞–µ–≤ –ø–æ X (%)
    //       const marginY = 15; // –û—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞–µ–≤ –ø–æ Y (%)
    //       
    //       // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–∑–∏—Ü–∏—é –≤ —Å—Ç—Ä–æ–∫–µ
    //       let row, col;
    //       
    //       if (index < 2) {
    //         // –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞ - 2 –ø—É–∑—ã—Ä—è
    //         row = 0;
    //         col = index;
    //       } else if (index < 6) {
    //         // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - 4 –ø—É–∑—ã—Ä—è
    //         row = 1;
    //         col = index - 2;
    //       } else if (index < 10) {
    //         // –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ - 4 –ø—É–∑—ã—Ä—è
    //         row = 2;
    //         col = index - 6;
    //       } else {
    //         // –ù–∏–∂–Ω—è—è —Å—Ç—Ä–æ–∫–∞ - 4 –ø—É–∑—ã—Ä—è
    //         row = 3;
    //         col = index - 10;
    //       }
    //       
    //       const availableWidth = 100 - 2 * marginX;
    //       const availableHeight = 100 - 2 * marginY;
    //       
    //       // –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    //       let x, y;
    //       
    //       if (row === 0) {
    //         // –î–ª—è –≤–µ—Ä—Ö–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ (2 –ø—É–∑—ã—Ä—è) - —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –≤—Å–µ–π —à–∏—Ä–∏–Ω–µ
    //         x = marginX + (col / 1) * availableWidth;
    //       } else {
    //         // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ (4 –ø—É–∑—ã—Ä—è) - —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –≤—Å–µ–π —à–∏—Ä–∏–Ω–µ
    //         x = marginX + (col / 3) * availableWidth;
    //       }
    //       
    //       // –†–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    //       y = marginY + (row / 3) * availableHeight;
    //       
    //       // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ò–ò (–∏–Ω–¥–µ–∫—Å 11 –≤ –º–∞—Å—Å–∏–≤–µ) - –æ–ø—É—Å–∫–∞–µ–º –Ω–∏–∂–µ, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º
    //       if (index === 11) {
    //         y += 8; // –û–ø—É—Å–∫–∞–µ–º –Ω–∞ 8% –Ω–∏–∂–µ (—É–º–µ–Ω—å—à–∏–ª–∏ —Å 15%)
    //       }
    //       
    //       return { x, y };
    //     };

                                                                                                                                                                                               const getCircleSize = (badgeCount: number) => {
            // –†–∞–∑–º–µ—Ä—ã –∫—Ä—É–≥–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–Ω–∞—á–∫–æ–≤
            const minSize = 72;   // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (–ø–∏–∫—Å–µ–ª–∏)
            const maxSize = 140;  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (–ø–∏–∫—Å–µ–ª–∏)
            const minBadges = 3;  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–∫–æ–≤
            const maxBadges = 40; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–∫–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
            
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–∫–æ–≤ –æ—Ç 0 –¥–æ 1
            const normalized = Math.min(Math.max((badgeCount - minBadges) / (maxBadges - minBadges), 0), 1);
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Å –ø–ª–∞–≤–Ω—ã–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º
            const size = minSize + normalized * (maxSize - minSize);
            
            return Math.round(size);
          };

                               // const getTextLines = (title: string) => {
           // // –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫
           // if (title.length > 35) return 3; // –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è - 3 —Å—Ç—Ä–æ–∫–∏
           // if (title.length > 20) return 2; // –î–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è - 2 —Å—Ç—Ä–æ–∫–∏
           // return 1; // –ö–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è - 1 —Å—Ç—Ä–æ–∫–∞
         // };

             

               return (
          <div className="categories-screen">
           <div className="header">
             <button onClick={handleBackToIntro} className="back-button">
              ‚Üê –ù–∞–∑–∞–¥ –∫ –≤–≤–µ–¥–µ–Ω–∏—é
            </button>
            <div className="header-content">
             <h1 className="heading-gold">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–Ω–∞—á–∫–æ–≤</h1>
             <p className="subtitle-orange">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è</p>
            </div>
           </div>
                       <div className="categories-grid">
              {categories.slice().sort((a,b) => Number(a.id) - Number(b.id)).map((category, index) => {
                const circleSize = getCircleSize(category.badge_count);
                // const textLines = getTextLines(category.title);
                
                return (
                  <div 
                    key={category.id} 
                    className="category-container floating"
                    style={{
                      animationDelay: `${index * 0.2}s`
                    }}
                  >
                    <div 
                      className="category-card"
                      style={{
                        width: `${circleSize}px`,
                        height: `${circleSize}px`
                      }}
                      onClick={() => handleCategoryClick(category)}
                    >
                      <div className="category-icon">{getCategoryIcon(category.id)}</div>
                    </div>
                                         <div className="category-text">
                       <h3 style={{ whiteSpace: 'pre-line' }}>
                         {category.id === '5' ? '–ó–∞ –û—Ç—Ä—è–¥–Ω—ã–µ –î–µ–ª–∞\n–û–î—ç üòà' : category.title}
                       </h3>
                       <p>{category.badge_count} –∑–Ω–∞—á–∫–æ–≤</p>
                     </div>
                  </div>
                );
              })}
            </div>
         </div>
       );
   };

  // –≠–ö–†–ê–ù 3: –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (—Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ/–æ–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –∑–Ω–∞—á–∫–∏)
  const renderCategory = () => {
    console.log('renderCategory –≤—ã–∑–≤–∞–Ω, selectedCategory:', selectedCategory);
    if (!selectedCategory) {
      console.log('selectedCategory –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null');
      return null;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–∞–∑–æ–≤–æ–º—É –∫–ª—é—á—É (–ø–µ—Ä–≤—ã–µ –¥–≤–µ —á–∞—Å—Ç–∏ id)
    const grouped: Record<string, any[]> = {};
    badges.forEach((b) => {
      if (b.category_id !== selectedCategory.id) return;
      const parts = (b.id || '').split('.');
      const baseKey = parts.length >= 2 ? `${parts[0]}.${parts[1]}` : (b.id || '');
      if (!grouped[baseKey]) grouped[baseKey] = [];
      grouped[baseKey].push(b);
    });
    const categoryBadges = Object.values(grouped).map((list: any[]) => {
      const base = list.find(x => (x.level || '').toLowerCase().includes('–±–∞–∑')) || list[0];
      (base as any).allLevels = list.length > 1 ? list.sort((a: any,b: any)=> (a.id||'').localeCompare(b.id||'')) : [];
      return base;
    });

    return (
      <div className="category-screen">
        <div className="header">
          <button onClick={handleBackToCategories} className="back-button">
            ‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
          </button>
          <div className="header-content">
            <h1 className="heading-gold">{selectedCategory.title}</h1>
            <p className="subtitle-orange">{categoryBadges.length} –±–∞–∑–æ–≤—ã—Ö –∑–Ω–∞—á–∫–æ–≤</p>
            {selectedCategory.introduction?.has_introduction && (
              <button 
                onClick={handleIntroductionClick} 
                className="hint-button"
                title="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
              >
                üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞
              </button>
            )}
            {selectedCategory.id === '14' && (
              <div className="additional-materials-buttons">
                  <>
                    <button 
                    onClick={() => handleAdditionalMaterialClick('checklists', 'general-checklist.md')}
                      className="material-button"
                      title="–û–±—â–∏–π —á–µ–∫-–ª–∏—Å—Ç"
                    >
                      üìã –ß–µ–∫-–ª–∏—Å—Ç
                    </button>
                    <button 
                    onClick={() => handleAdditionalMaterialClick('checklists', 'challenges-checklist.md')}
                      className="material-button"
                      title="–ß–µ–∫-–ª–∏—Å—Ç —Å —á–µ–ª–ª–µ–Ω–¥–∂–∞–º–∏"
                    >
                      üéØ –ß–µ–ª–ª–µ–Ω–¥–∂–∏
                    </button>
                                   <button
                    onClick={() => handleAdditionalMaterialClick('checklists', 'active-checklist.md')}
                 className="material-button"
                 title="–ê–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞"
               >
                 üöÄ –ê–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è
               </button>
                  <button 
                    onClick={() => handleAdditionalMaterialClick('methodology', 'inspector-methodology.md')}
                    className="material-button"
                    title="–ú–µ—Ç–æ–¥–∏–∫–∞ –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ –ü–æ–ª—å–∑—ã"
                  >
                    üìö –ú–µ—Ç–æ–¥–∏–∫–∞
                  </button>
                  <button 
                    onClick={() => handleAdditionalMaterialClick('methodology', 'inspector-codex.md')}
                    className="material-button"
                    title="–ö–æ–¥–µ–∫—Å –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ –†–µ–∞–ª—å–Ω–æ–≥–æ –õ–∞–≥–µ—Ä—è"
                  >
                    üìú –ö–æ–¥–µ–∫—Å
                  </button>
                  <button 
                    onClick={() => handleAdditionalMaterialClick('methodology', 'friendship-guide.md')}
                    className="material-button"
                    title="–ü–∞–º—è—Ç–∫–∞ –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–∫–∏ –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ –î—Ä—É–∂–±—ã"
                  >
                    ü§ù –ü–∞–º—è—Ç–∫–∞ –î—Ä—É–∂–±—ã
                  </button>
                  <button 
                    onClick={() => handleAdditionalMaterialClick('methodology', 'i-messages-guide.md')}
                    className="material-button"
                    title="–ü–∞–º—è—Ç–∫–∞ –Ø —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ –î—Ä—É–∂–±—ã"
                  >
                    üí¨ –Ø-—Å–æ–æ–±—â–µ–Ω–∏—è
                  </button>
                  <button 
                    onClick={() => handleAdditionalMaterialClick('methodology', 'friendship-rules.md')}
                    className="material-button"
                    title="–°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ –î—Ä—É–∂–±—ã"
                  >
                    üìã –ü—Ä–∞–≤–∏–ª–∞ –î—Ä—É–∂–±—ã
                  </button>
                </>
              </div>
            )}
          </div>
        </div>
        <div className="badges-grid">
          {categoryBadges.map((badge, index) => (
            <article 
              key={badge.id} 
              className="badge-card floating"
              style={{
                animationDelay: `${index * 0.1}s`
              }}
              onClick={() => handleBadgeClick(badge)}
            >
                             <div className="badge-card__icon">
                 <div className="badge-emoji">{badge.emoji || (badge.id === '1.11' ? '‚ôæÔ∏è' : '')}</div>
               </div>
              <h3 className="badge-card__title">{badge.title}</h3>
              <div className="badge-card__level">
                {Array.isArray((badge as any).allLevels) && (badge as any).allLevels.length > 1
                  ? `${(badge as any).allLevels.length} ${pluralizeRu((badge as any).allLevels.length, ['—É—Ä–æ–≤–µ–Ω—å', '—É—Ä–æ–≤–Ω—è', '—É—Ä–æ–≤–Ω–µ–π'])}`
                  : '–æ–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π'}
              </div>
            </article>
          ))}
        </div>
      </div>
    );
  };

  // –≠–ö–†–ê–ù 4: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–Ω–∞—á–æ–∫ —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ–π –∏ —É—Ä–æ–≤–Ω—è–º–∏
  const renderBadge = () => {
    if (!selectedBadge) return null;

    // –í—Å–µ —É—Ä–æ–≤–Ω–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–∫–∞ (–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É ID, –Ω–∞–ø—Ä–∏–º–µ—Ä 1.1.x)
    const idSegments = (selectedBadge.id || '').split('.');
    const isMultiLevel = idSegments.length === 3;
    // const baseKey = isMultiLevel ? idSegments.slice(0, 2).join('.') + '.' : selectedBadge.id;

    const badgeLevels = badges.filter(b => {
      if (b.category_id !== selectedBadge.category_id) return false;
      if (isMultiLevel) {
        // –¢–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–∫–∞: —Å–æ–≤–ø–∞–¥–∞—é—Ç –ø–µ—Ä–≤—ã–µ –¥–≤–µ —á–∞—Å—Ç–∏ ID –∏ –≤—Å–µ–≥–æ 3 —Å–µ–≥–º–µ–Ω—Ç–∞
        const seg = (b.id || '').split('.');
        return seg.length === 3 && sameBaseTwoSegments(b.id, selectedBadge.id);
      }
      // –û–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º –∑–Ω–∞—á–æ–∫
      return (b.id || '') === (selectedBadge.id || '');
    });

    // –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å (–µ—Å–ª–∏ –µ—Å—Ç—å), –¥–ª—è –æ–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö ‚Äî —Å–∞–º –∑–Ω–∞—á–æ–∫
    const baseLevelBadge = isMultiLevel
      ? badgeLevels.find(b => (b.level || '').toLowerCase().includes('–±–∞–∑–æ–≤—ã–π')) || null
      : selectedBadge;

    // –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –±–∞–∑–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    // const _getCriteriaFromBadge = (badge: Badge | null) => {
    //   if (!badge || !badge.criteria) return [] as string[];
    //   const criteriaText = badge.criteria.replace(/^–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–æ–∫ ¬´[^¬ª]+¬ª:\s*/, '');
    //   const shouldFormat = shouldApplyFormatting(badge.id);
    //   const processedCriteria = shouldFormat ? fixCriteriaFormatting(criteriaText) : criteriaText;
    //   return processedCriteria
    //     .split('‚úÖ')
    //     .filter(c => c.trim())
    //     .map(c => c.trim());
    // };

    // –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–∫–∞
    let evidenceText: string | null = null;
    let baseCriteria: string[] = [];
    
    // –î–ª—è –æ–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –∑–Ω–∞—á–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∞–º–æ–≥–æ –∑–Ω–∞—á–∫–∞
    const sourceBadge = baseLevelBadge || selectedBadge;
    
    if (sourceBadge) {
      try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ confirmation –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ criteria
      if (sourceBadge.confirmation) {
        evidenceText = sourceBadge.confirmation;
      }
      
      if (sourceBadge.criteria) {
        const raw = sourceBadge.criteria.replace(/^–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–æ–∫ ¬´[^¬ª]+¬ª:\s*/, '');
        const shouldFormat = shouldApplyFormatting(sourceBadge.id);
        const processedRaw = shouldFormat ? fixCriteriaFormatting(raw) : raw;
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å confirmation, —Ç–æ –∏–∑–≤–ª–µ–∫–∞–µ–º evidence –∏–∑ criteria, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
        if (sourceBadge.confirmation) {
          const { mainText, evidenceText: extractedEvidence } = extractEvidenceSection(processedRaw);
          evidenceText = extractedEvidence || sourceBadge.confirmation;
          const criteriaText = mainText;
          baseCriteria = criteriaText
            .split('‚úÖ')
            .filter((c: string) => c.trim())
            .map((c: string) => c.trim());
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ confirmation, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç criteria
          const { mainText, evidenceText: extractedEvidence } = extractEvidenceSection(processedRaw);
          evidenceText = extractedEvidence;
          const criteriaText = mainText;
          baseCriteria = criteriaText
            .split('‚úÖ')
            .filter((c: string) => c.trim())
            .map((c: string) => c.trim());
        }
      }
      } catch (err) {
        const rawCriteriaAny = (sourceBadge as any)?.criteria;
        if (Array.isArray(rawCriteriaAny)) {
          baseCriteria = rawCriteriaAny.map((c: any) => String(c).trim()).filter(Boolean);
        }
        const confAny = (sourceBadge as any)?.confirmation;
        if (!evidenceText && confAny) {
          evidenceText = Array.isArray(confAny) ? confAny.map((c: any) => String(c)).join('\n') : String(confAny);
        }
      }
    }

    // –û—Ü–µ–Ω–∫–∞ –¥–ª–∏–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—ã—Å–æ–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const baseDescriptionText = (baseLevelBadge?.description || selectedBadge.description || '');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É –∑–Ω–∞—á–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2.1 –∏–∑ 2.1.1)
    const badgeGroup = selectedBadge.id?.split('.').slice(0, 2).join('.');
    const groupOverride = layoutOverrides[badgeGroup as keyof typeof layoutOverrides];
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–µ—Å—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    const isTallInfo = groupOverride?.tallOn?.includes(selectedBadge.id) || 
                      baseDescriptionText.length > 400 || 
                      baseDescriptionText.split('\n').length > 6;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç—ã —Ç–µ–∫—Å—Ç–∞
    const textMaxEm = groupOverride?.textMaxEm || 28;

    // –î—Ä—É–≥–∏–µ —É—Ä–æ–≤–Ω–∏ (–∫—Ä—É–∂–æ—á–∫–∏)
    const otherLevels = badgeLevels.filter(b => {
      const isBase = baseLevelBadge && b.id === baseLevelBadge.id;
      const isSingle = (b.level || '').toLowerCase().includes('–æ–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤');
      return !isBase && !isSingle;
    });

    const selectedEmoji = selectedBadge.emoji || (selectedBadge.id === '1.11' ? '‚ôæÔ∏è' : '');

    return (
      <div className={`badge-screen ${selectedBadge.id?.startsWith('1.4.') ? 'badge--group-1-4' : ''}`}>
        <div className="header">
          <button onClick={handleBackToCategory} className="back-button">
            ‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          </button>
          <div className="badge-header">
            <div className="badge-emoji-large">{selectedEmoji}</div>
            <div>
              <h1 className="heading-gold">{selectedBadge.title}</h1>
              <p className="badge-category subtitle-orange">{selectedCategory?.title}</p>
            </div>
          </div>
        </div>

        <div className="badge-content" onClick={handleInteractiveLinkClick}>
          <section className="badge-summary">
                          <div 
              className={`badge-summary__block ${isTallInfo ? 'badge-summary__block--tall' : ''}`}
              style={isTallInfo ? { '--info-max-em': `${textMaxEm}em` } as React.CSSProperties : {}}
            >
                              <h3>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                <p className="badge-summary__text">
                  {(() => {
                    const rawDescription = baseLevelBadge?.description || selectedBadge.description || '–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö. –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ–¥–≥—Ä—É–∂–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è.';
                    const shouldFormat = shouldApplyFormatting(selectedBadge.id);
                    const processedDescription = shouldFormat ? fixDescriptionFormatting(rawDescription) : rawDescription;
                    const { mainText, evidenceText: descEvidenceText } = extractEvidenceSection(processedDescription);
                    return (
                      <>
                        <span dangerouslySetInnerHTML={{__html: processInteractiveLinksPlusSafe(mainText.replace(/\n/g, '<br>'))}}></span>
                        {descEvidenceText && (
                          <>
                            <br /><br />
                            <span className="badge-evidence">{descEvidenceText}</span>
                          </>
                        )}
                      </>
                    );
                  })()}
                </p>

                {/* New sections */}
                {baseLevelBadge?.nameExplanation && (
                  <>
                    <h4>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è</h4>
                    <p className="badge-summary__text">{baseLevelBadge.nameExplanation}</p>
                  </>
                )}

                {baseLevelBadge?.skillTips && (
                  <>
                    <h4>–ö–∞–∫ –ø—Ä–æ–∫–∞—á–∞—Ç—å –Ω–∞–≤—ã–∫</h4>
                    <p className="badge-summary__text" dangerouslySetInnerHTML={{__html: processInteractiveLinksPlusSafe(baseLevelBadge.skillTips.replace(/\n/g, '<br>'))}}></p>
                  </>
                )}

                {baseLevelBadge?.examples && (
                  <>
                    <h4>–ü—Ä–∏–º–µ—Ä—ã</h4>
                    <p className="badge-summary__text" dangerouslySetInnerHTML={{__html: processInteractiveLinksPlusSafe(baseLevelBadge.examples.replace(/\n/g, '<br>'))}}></p>
                  </>
                )}

                {baseLevelBadge?.importance && (
                  <>
                    <h4>–ü–æ—á–µ–º—É —ç—Ç–æ—Ç –∑–Ω–∞—á–æ–∫ –≤–∞–∂–µ–Ω</h4>
                    <p className="badge-summary__text">{baseLevelBadge.importance}</p>
                  </>
                )}

                {baseLevelBadge?.philosophy && (
                  <>
                    <h4>–§–∏–ª–æ—Å–æ—Ñ–∏—è –∑–Ω–∞—á–∫–∞</h4>
                    <p className="badge-summary__text">{baseLevelBadge.philosophy}</p>
                  </>
                )}

                {baseLevelBadge?.howToBecome && (
                  <>
                    <h4>–ö–∞–∫ —Å—Ç–∞—Ç—å</h4>
                    <p className="badge-summary__text" dangerouslySetInnerHTML={{__html: processInteractiveLinksPlusSafe(baseLevelBadge.howToBecome.replace(/\n/g, '<br>'))}}></p>
                  </>
                )}
              <div className="badge-meta">
                <div><span>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</span><strong>{selectedCategory?.title}</strong></div>
                <div><span>–í—Å–µ–≥–æ —É—Ä–æ–≤–Ω–µ–π</span><strong>{badgeLevels.length}</strong></div>
                <div><span>ID</span><strong>{selectedBadge.id}</strong></div>
              </div>
            </div>

            <div className="badge-summary__right">
                             <div className="badge-summary__block">
                 <h3>{isMultiLevel ? '–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å' : '–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–æ–∫'}</h3>
                {baseCriteria.length > 0 ? (
                  <ul className="badge-steps__list">
                    {baseCriteria.map((criterion, index) => (
                      <li key={index}>
                        <span dangerouslySetInnerHTML={{ __html: processInteractiveLinksPlusSafe(String(criterion).replace(/\n/g, '<br>')) }} />
                      </li>
                    ))}
                  </ul>
                ) : (
                  <p className="badge-summary__text">
                    –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã.
                  </p>
                )}
                {evidenceText && (
                  <>
                    <h4>–ß–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è</h4>
                    <p className="badge-summary__text badge-evidence">
                      {evidenceText}
                    </p>
                  </>
                )}
              </div>

              {otherLevels.length > 0 && (
                <div className="levels-grid-bottom levels-dock">
                  {otherLevels.map(level => (
                    <article key={level.id} className="level-card-bottom" onClick={() => handleLevelClick(String(level.level))}>
                      <div className="level-card__icon">
                        <span className="level-bubble__emoji">{level.emoji || 'üèÜ'}</span>
                      </div>
                      <h4 className="level-card__title">{level.title}</h4>
                      <div className="level-card__subtitle">{String(level.level)}</div>
                    </article>
                  ))}
                </div>
              )}

              {SHOW_RELATED && (() => {
                // Inline related-badges calculation using lightweight topical keywords
                const TOPICS: Record<string, string[]> = {
                  '–ò–ò/–ú–µ–¥–∏–∞': [' –∏–∏', '–Ω–µ–π—Ä–æ—Å–µ—Ç', 'chatgpt', '—á–∞—Çgpt', 'midjourney', 'stable', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω', '–≤–∏–¥–µ–æ', '–º–æ–Ω—Ç–∞–∂', '–∞—É–¥–∏–æ', '–ø–æ–¥–∫–∞—Å—Ç', '–∫–∞–Ω–∞–ª', '–ø–æ—Å—Ç', '—Å—Ç–∞—Ç—å—è', '–∫–æ–Ω—Ç–µ–Ω—Ç', '–º–µ–¥–∏–∞'],
                  '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ/–°—Ü–µ–Ω–∞': ['—Å—Ü–µ–Ω–∞', '–∫–æ–Ω—Ü–µ—Ä—Ç', '–º—É–∑—ã–∫', '—Ç–∞–Ω—Ü', '—Ç–µ–∞—Ç—Ä', '–ø–µ—Å–Ω—è', '—Ä–∏—Å—É', '–∂—é—Ä–∏', '–≤—ã—Å—Ç—É–ø', '—à–æ—É', '—Ç–≤–æ—Ä—á'],
                  '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è/–õ–∏–¥–µ—Ä—Å—Ç–≤–æ': ['–æ—Ä–≥–∞–Ω–∏–∑', '–ª–∏–¥–µ—Ä', '–≤–µ–¥—É—â', '–æ—Ç—Ä—è–¥', '–ø–ª–∞–Ω', '–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω', '–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤', '–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü', '—Ä–∞—Å–ø–∏—Å–∞–Ω'],
                  '–ö–æ–º–∞–Ω–¥–∞/–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏': ['–∫–æ–º–∞–Ω–¥', '–æ–±—â–µ–Ω', '–∫–æ–º–º—É–Ω–∏–∫', '–∫–æ–Ω—Ñ–ª–∏–∫—Ç', '–¥–æ–≥–æ–≤–æ—Ä', '–¥—Ä—É–∂–±', '—É–≤–∞–∂–µ–Ω', '–≤–µ–∂–ª–∏–≤', '–ø–æ–º–æ—â', '–≤–æ–≤–ª–µ—á', '–º–æ–¥–µ—Ä–∞—Ü', '–æ–±—Ä–∞—Ç–Ω'],
                  '–ü–æ—Ä—è–¥–æ–∫/–ë—ã—Ç': ['—É–±–æ—Ä–∫', '–ø–æ—Ä—è–¥', '—á–∏—Å—Ç', '—É—é—Ç', '–∑–æ–Ω–∞', '–¥–µ–∫–æ—Ä', '–≥–∞—Ä–º–æ–Ω–∏', '—Ä–∞—Å–ø–æ—Ä—è–¥–æ–∫'],
                  '–û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å/–ü—Å–∏—Ö–æ': ['–æ—Å–æ–∑–Ω–∞–Ω', '–≤–Ω–∏–º–∞—Ç–µ–ª', '—ç–º–æ—Ü–∏', '–Ω–∞—Å—Ç—Ä–æ–µ–Ω', '—Å—Ç—Ä–µ—Å—Å', '—Å–ø–æ–∫–æ–π—Å—Ç–≤', '—Ñ–æ–∫—É—Å', '–º–µ–¥–∏—Ç–∞', '—Ä–µ—Ñ–ª–µ–∫—Å'],
                };
                const textOf = (b: Badge | null | undefined): string => {
                  if (!b) return '';
                  const anyB = b as any;
                  return [anyB.description, anyB.importance, anyB.skillTips, anyB.examples, anyB.howToBecome]
                    .map((v) => (typeof v === 'string' ? v : ''))
                    .join('\n');
                };
                const topicsFor = (txt: string): string[] => {
                  const tset = new Set<string>();
                  const low = ` ${txt.toLowerCase()} `;
                  Object.entries(TOPICS).forEach(([t, keys]) => {
                    if (keys.some((k) => low.includes(k))) tset.add(t);
                  });
                  return Array.from(tset);
                };
                const baseKey = (id: string) => {
                  const parts = (id || '').split('.');
                  return parts.length >= 2 ? `${parts[0]}.${parts[1]}` : id;
                };
                const sameGroup = (a: string, b: string) => baseKey(a) === baseKey(b);
                const pickBase = (list: Badge[]): Badge => {
                  const found = list.find((x) => (x.level || '').toLowerCase().includes('–±–∞–∑–æ–≤—ã–π'));
                  return found || list.sort((a, b) => (a.id || '').localeCompare(b.id || ''))[0];
                };
                // Build representatives by group
                const grouped: Record<string, Badge[]> = {};
                badges.forEach((b) => {
                  const key = baseKey(b.id);
                  (grouped[key] ||= []).push(b);
                });
                const representatives = Object.entries(grouped).map(([, list]) => pickBase(list));
                // Topics of current
                const currentTopics = new Set(topicsFor(textOf(baseLevelBadge || selectedBadge)));
                if (currentTopics.size === 0) return null;
                // Score reps by overlap, prefer different categories
                type Scored = { badge: Badge; score: number };
                const scored: Scored[] = [];
                for (const rb of representatives) {
                  if (sameGroup(rb.id, selectedBadge.id)) continue;
                  if (rb.category_id === selectedBadge.category_id) continue; // –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–Ω—ã–µ ‚Äî –≤ –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                  const t = new Set(topicsFor(textOf(rb)));
                  let overlap = 0;
                  t.forEach((x) => { if (currentTopics.has(x)) overlap++; });
                  if (overlap > 0) scored.push({ badge: rb, score: overlap });
                }
                scored.sort((a, b) => b.score - a.score || a.badge.title.localeCompare(b.badge.title));
                const related = scored.slice(0, 6).map((s) => s.badge);
                if (related.length === 0) return null;
                return (
                  <div className="levels-grid-bottom levels-dock">
                    {related.map((rb) => (
                      <article key={rb.id} className="level-card-bottom" onClick={() => handleBadgeClick(rb)} title={categoryTitleById(rb.category_id)}>
                        <div className="level-card__icon">
                          <span className="level-bubble__emoji">{rb.emoji || 'üèÖ'}</span>
                        </div>
                        <h4 className="level-card__title">{rb.title}</h4>
                        <div className="level-card__subtitle">{categoryTitleById(rb.category_id)}</div>
                      </article>
                    ))}
                  </div>
                );
              })()}
            </div>
          </section>
        </div>
      </div>
    );
  };

     // –≠–ö–†–ê–ù 5: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∫–∞
     const renderBadgeLevel = () => {
    if (!selectedBadge || !selectedLevel) return null;

          // –ò—â–µ–º –∑–Ω–∞—á–æ–∫ —É—Ä–æ–≤–Ω—è –ø–æ ID –ø—Ä–µ—Ñ–∏–∫—Å—É –∏ —É—Ä–æ–≤–Ω—é
     const idSegments = (selectedBadge.id || '').split('.');
     const isMultiLevel = idSegments.length === 3;
     const baseKey = isMultiLevel ? idSegments.slice(0, 2).join('.') + '.' : selectedBadge.id;
     
     const levelBadge = badges.find(b => {
       if (b.category_id !== selectedBadge.category_id) return false;
       if (isMultiLevel) {
         return (b.id || '').startsWith(baseKey) && b.level === selectedLevel;
       }
       return b.id === selectedBadge.id && b.level === selectedLevel;
     });

    if (!levelBadge) return null;

                // –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–∫–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     const getLevelCriteria = (badge: Badge) => {
       if (!badge.criteria) {
         // Fallback –∫—Ä–∏—Ç–µ—Ä–∏–∏ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
         return [
           '–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –±–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–∫–∞.',
           '–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –Ω–∞–≤—ã–∫–∏.',
           '–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ —É–ª—É—á—à–µ–Ω–∏–µ.'
         ];
       }
       
       // –ü–∞—Ä—Å–∏–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
       const criteriaText = badge.criteria.replace(/^–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–æ–∫ ¬´[^¬ª]+¬ª:\s*/, '');
       const shouldFormat = shouldApplyFormatting(badge.id);
       const processedCriteria = shouldFormat ? fixCriteriaFormatting(criteriaText) : criteriaText;
       const criteria = processedCriteria.split('‚úÖ').filter((c: string) => c.trim()).map((c: string) => c.trim());
       
       return criteria.length > 0 ? criteria : [
         '–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –±–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–∫–∞.',
         '–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –Ω–∞–≤—ã–∫–∏.',
         '–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ —É–ª—É—á—à–µ–Ω–∏–µ.'
       ];
     };

     const levelCriteria = getLevelCriteria(levelBadge);
     
     // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —É—Ä–æ–≤–Ω—è
     const levelEvidenceText = levelBadge.confirmation || null;

           // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
      const getBackgroundImage = () => {
        if (selectedLevel === '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å' || selectedLevel === '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å ') {
          return 'url("/—ç–∫—Ä–∞–Ω 5 —Ñ–æ–Ω.png")';
        } else if (selectedLevel === '–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å') {
          return 'url("/—ç–∫—Ä–∞–Ω 6 —Ñ–æ–Ω.png")';
        }
        return 'url("/—ç–∫—Ä–∞–Ω 3 —Ñ–æ–Ω.png")'; // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –¥—Ä—É–≥–∏—Ö —É—Ä–æ–≤–Ω–µ–π
      };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É –∑–Ω–∞—á–∫–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è
    const levelBadgeGroup = levelBadge.id?.split('.').slice(0, 2).join('.');
    const levelGroupOverride = layoutOverrides[levelBadgeGroup as keyof typeof layoutOverrides];
    
    const isTallInfoLevel = levelGroupOverride?.tallOn?.includes(levelBadge.id) || (
      levelBadge.id === '1.1.2' ||
      levelBadge.id === '1.1.3' ||
      levelBadge.id === '1.2.2' ||
      levelBadge.id === '1.2.3' ||
      levelBadge.id === '1.3.2' ||
      levelBadge.id === '1.3.3' ||
      levelBadge.id === '1.4.2'
    );
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç—ã —Ç–µ–∫—Å—Ç–∞
    const levelTextMaxEm = levelGroupOverride?.textMaxEm || 28;
    // Keep level bubbles visible in level view as a quick switcher
    const siblingLevels = badges.filter(b => {
      if (b.category_id !== selectedBadge.category_id) return false;
      if (isMultiLevel) {
        const seg = (b.id || '').split('.');
        return seg.length === 3 && sameBaseTwoSegments(b.id, selectedBadge.id);
      }
      return (b.id || '') === (selectedBadge.id || '');
    });
    // Stable order: by numeric level if possible, then by id
    const toNum = (v: any) => {
      if (typeof v?.level === 'number') return v.level;
      if (typeof v?.level === 'string' && /^\d+$/.test(v.level)) return parseInt(v.level, 10);
      return Number.POSITIVE_INFINITY;
    };
    const levelsAll = siblingLevels.slice().sort((a: any, b: any) => {
      const an = toNum(a);
      const bn = toNum(b);
      if (an !== bn) return an - bn;
      return (a.id || '').localeCompare(b.id || '');
    });
    // Only show alternative levels (exclude currently selected)
    const otherLevels = levelsAll.filter(l => String(l.level) !== String(selectedLevel));

    return (
      <div 
        className="badge-level-screen"
        style={{
          background: `
            linear-gradient(135deg, rgba(12, 12, 12, 0.3) 0%, rgba(26, 26, 46, 0.3) 50%, rgba(22, 33, 62, 0.3) 100%),
            ${getBackgroundImage()} center center / 100% no-repeat
          `
        }}
      >
         <div className="header">
           <button onClick={handleBackToBadge} className="back-button">
             ‚Üê –ù–∞–∑–∞–¥ –∫ –∑–Ω–∞—á–∫—É
           </button>
           <div className="level-header">
             <div className="badge-emoji-large">{levelBadge.emoji || 'üèÜ'}</div>
             <div>
               <h1 className="heading-gold">{levelBadge.title}</h1>
               <p className="level-title subtitle-orange">{selectedLevel}</p>
             </div>
           </div>
         </div>
         
        <div className="level-content" onClick={handleInteractiveLinkClick}>
           <section className="badge-summary">
             <div 
               className={`badge-summary__block ${isTallInfoLevel ? 'badge-summary__block--tall' : ''}`}
               style={isTallInfoLevel ? { '--info-max-em': `${levelTextMaxEm}em` } as React.CSSProperties : {}}
             >
                               <h3>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                <p className="badge-summary__text">
                  {(() => {
                    const rawDescription = selectedBadge.description || levelBadge.description || '–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö. –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ–¥–≥—Ä—É–∂–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è.';
                    const shouldFormat = shouldApplyFormatting(levelBadge.id);
                    const processedDescription = shouldFormat ? fixDescriptionFormatting(rawDescription) : rawDescription;
                    const { mainText, evidenceText: descEvidenceText } = extractEvidenceSection(processedDescription);
                    return (
                      <>
                        <span dangerouslySetInnerHTML={{__html: processInteractiveLinksPlusSafe(mainText.replace(/\n/g, '<br>'))}}></span>
                        {descEvidenceText && (
                          <>
                            <br /><br />
                            <span className="badge-evidence">{descEvidenceText}</span>
                          </>
                        )}
                      </>
                    );
                  })()}
                </p>

                {/* New sections for level badge */}
                {levelBadge.nameExplanation && (
                  <>
                    <h4>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è</h4>
                    <p className="badge-summary__text">{levelBadge.nameExplanation}</p>
                  </>
                )}

                {levelBadge.skillTips && (
                  <>
                    <h4>–ö–∞–∫ –ø—Ä–æ–∫–∞—á–∞—Ç—å –Ω–∞–≤—ã–∫</h4>
                    <p className="badge-summary__text" dangerouslySetInnerHTML={{__html: processInteractiveLinksPlusSafe(levelBadge.skillTips.replace(/\n/g, '<br>'))}}></p>
                  </>
                )}

                {levelBadge.examples && (
                  <>
                    <h4>–ü—Ä–∏–º–µ—Ä—ã</h4>
                    <p className="badge-summary__text" dangerouslySetInnerHTML={{__html: processInteractiveLinksPlusSafe(levelBadge.examples.replace(/\n/g, '<br>'))}}></p>
                  </>
                )}

                {levelBadge.importance && (
                  <>
                    <h4>–ü–æ—á–µ–º—É —ç—Ç–æ—Ç –∑–Ω–∞—á–æ–∫ –≤–∞–∂–µ–Ω</h4>
                    <p className="badge-summary__text">{levelBadge.importance}</p>
                  </>
                )}

                {levelBadge.philosophy && (
                  <>
                    <h4>–§–∏–ª–æ—Å–æ—Ñ–∏—è –∑–Ω–∞—á–∫–∞</h4>
                    <p className="badge-summary__text">{levelBadge.philosophy}</p>
                  </>
                )}

                {levelBadge.howToBecome && (
                  <>
                    <h4>–ö–∞–∫ —Å—Ç–∞—Ç—å</h4>
                    <p className="badge-summary__text" dangerouslySetInnerHTML={{__html: processInteractiveLinksPlusSafe(levelBadge.howToBecome.replace(/\n/g, '<br>'))}}></p>
                  </>
                )}
               <div className="badge-meta">
                 <div><span>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</span><strong>{selectedCategory?.title}</strong></div>
                 <div><span>–£—Ä–æ–≤–µ–Ω—å</span><strong>{selectedLevel}</strong></div>
                 <div><span>ID</span><strong>{levelBadge.id}</strong></div>
               </div>
             </div>

             <div className="badge-summary__right">
               <div className="badge-summary__block">
                <h3>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å {selectedLevel.toLowerCase()}</h3>
                {levelCriteria.length > 0 ? (
                  <ul className="badge-steps__list">
                    {levelCriteria.map((criterion: string, index: number) => {
                      const hasExamples = criterion.includes('–ù–∞–ø—Ä–∏–º–µ—Ä:');
                      if (!hasExamples) {
                        return (
                          <li key={index}>
                            <span
                              dangerouslySetInnerHTML={{
                                __html: processInteractiveLinksPlus(String(criterion).replace(/\n/g, '<br>')),
                              }}
                            />
                          </li>
                        );
                      }

                                             const exampleSplit = criterion.split('–ù–∞–ø—Ä–∏–º–µ—Ä:');
                       const headText = exampleSplit[0].trim();
                       const tail = exampleSplit.slice(1).join('–ù–∞–ø—Ä–∏–º–µ—Ä:');
                       const exampleLines = tail
                         .split('\n')
                         .map((l: string) => l.trim())
                         .filter((l: string) => l.length > 0 && (l.startsWith('‚Ä¢') || l.startsWith('‚úÖ') || l.includes('–ü–æ–º–æ—á—å') || l.includes('–ü—Ä–æ—Å–ª–µ–¥–∏—Ç—å'))); // —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏

                       return (
                         <li key={index}>
                           <div className="criterion-text" dangerouslySetInnerHTML={{__html: processInteractiveLinksPlus(headText.replace(/\n/g, '<br>'))}}></div>
                           {exampleLines.length > 0 && (
                             <div className="criterion-examples">
                               <p className="criterion-example">–ù–∞–ø—Ä–∏–º–µ—Ä:</p>
                               {exampleLines.map((l: string, i: number) => (
                                 <p className="criterion-example" key={i}>{l}</p>
                               ))}
                             </div>
                           )}
                         </li>
                       );
                    })}
                  </ul>
                ) : (
                  <p className="badge-summary__text">
                    –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è {selectedLevel.toLowerCase()} –ø–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã. 
                    –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–æ–∂–∞—Ç—ã–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
                  </p>
                )}
                {levelEvidenceText && (
                  <>
                    <h4>–ß–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è</h4>
                    <p className="badge-summary__text badge-evidence">
                      {levelEvidenceText}
                    </p>
                  </>
                )}
              </div>

              {otherLevels.length > 0 && (
                <div className="levels-grid-bottom levels-dock">
                  {otherLevels.map(level => (
                    <article
                      key={level.id}
                      className="level-card-bottom"
                      onClick={() => handleLevelClick(String(level.level))}
                    >
                      <div className="level-card__icon">
                        <span className="level-bubble__emoji">{level.emoji || '??'}</span>
                      </div>
                      <h4 className="level-card__title">{level.title}</h4>
                      <div className="level-card__subtitle">{String(level.level)}</div>
                    </article>
                  ))}
                </div>
              )}

              {SHOW_RELATED && (() => {
                // –ü–æ—Ö–æ–∂–∏–µ –∑–Ω–∞—á–∫–∏ (—É—Ä–æ–≤–Ω–µ–≤—ã–π —ç–∫—Ä–∞–Ω): –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∑–Ω–∞—á–∫–∞
                const TOPICS: Record<string, string[]> = {
                  '–ò–ò/–ú–µ–¥–∏–∞': [' –∏–∏', '–Ω–µ–π—Ä–æ—Å–µ—Ç', 'chatgpt', '—á–∞—Çgpt', 'midjourney', 'stable', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω', '–≤–∏–¥–µ–æ', '–º–æ–Ω—Ç–∞–∂', '–∞—É–¥–∏–æ', '–ø–æ–¥–∫–∞—Å—Ç', '–∫–∞–Ω–∞–ª', '–ø–æ—Å—Ç', '—Å—Ç–∞—Ç—å—è', '–∫–æ–Ω—Ç–µ–Ω—Ç', '–º–µ–¥–∏–∞'],
                  '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ/–°—Ü–µ–Ω–∞': ['—Å—Ü–µ–Ω–∞', '–∫–æ–Ω—Ü–µ—Ä—Ç', '–º—É–∑—ã–∫', '—Ç–∞–Ω—Ü', '—Ç–µ–∞—Ç—Ä', '–ø–µ—Å–Ω—è', '—Ä–∏—Å—É', '–∂—é—Ä–∏', '–≤—ã—Å—Ç—É–ø', '—à–æ—É', '—Ç–≤–æ—Ä—á'],
                  '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è/–õ–∏–¥–µ—Ä—Å—Ç–≤–æ': ['–æ—Ä–≥–∞–Ω–∏–∑', '–ª–∏–¥–µ—Ä', '–≤–µ–¥—É—â', '–æ—Ç—Ä—è–¥', '–ø–ª–∞–Ω', '–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω', '–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤', '–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü', '—Ä–∞—Å–ø–∏—Å–∞–Ω'],
                  '–ö–æ–º–∞–Ω–¥–∞/–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏': ['–∫–æ–º–∞–Ω–¥', '–æ–±—â–µ–Ω', '–∫–æ–º–º—É–Ω–∏–∫', '–∫–æ–Ω—Ñ–ª–∏–∫—Ç', '–¥–æ–≥–æ–≤–æ—Ä', '–¥—Ä—É–∂–±', '—É–≤–∞–∂–µ–Ω', '–≤–µ–∂–ª–∏–≤', '–ø–æ–º–æ—â', '–≤–æ–≤–ª–µ—á', '–º–æ–¥–µ—Ä–∞—Ü', '–æ–±—Ä–∞—Ç–Ω'],
                  '–ü–æ—Ä—è–¥–æ–∫/–ë—ã—Ç': ['—É–±–æ—Ä–∫', '–ø–æ—Ä—è–¥', '—á–∏—Å—Ç', '—É—é—Ç', '–∑–æ–Ω–∞', '–¥–µ–∫–æ—Ä', '–≥–∞—Ä–º–æ–Ω–∏', '—Ä–∞—Å–ø–æ—Ä—è–¥–æ–∫'],
                  '–û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å/–ü—Å–∏—Ö–æ': ['–æ—Å–æ–∑–Ω–∞–Ω', '–≤–Ω–∏–º–∞—Ç–µ–ª', '—ç–º–æ—Ü–∏', '–Ω–∞—Å—Ç—Ä–æ–µ–Ω', '—Å—Ç—Ä–µ—Å—Å', '—Å–ø–æ–∫–æ–π—Å—Ç–≤', '—Ñ–æ–∫—É—Å', '–º–µ–¥–∏—Ç–∞', '—Ä–µ—Ñ–ª–µ–∫—Å'],
                };
                const textOf = (b: Badge | null | undefined): string => {
                  if (!b) return '';
                  const anyB = b as any;
                  return [anyB.description, anyB.importance, anyB.skillTips, anyB.examples, anyB.howToBecome]
                    .map((v) => (typeof v === 'string' ? v : ''))
                    .join('\n');
                };
                const topicsFor = (txt: string): string[] => {
                  const tset = new Set<string>();
                  const low = ` ${txt.toLowerCase()} `;
                  Object.entries(TOPICS).forEach(([t, keys]) => {
                    if (keys.some((k) => low.includes(k))) tset.add(t);
                  });
                  return Array.from(tset);
                };
                const baseKey = (id: string) => {
                  const parts = (id || '').split('.');
                  return parts.length >= 2 ? `${parts[0]}.${parts[1]}` : id;
                };
                const sameGroup = (a: string, b: string) => baseKey(a) === baseKey(b);
                const pickBase = (list: Badge[]): Badge => {
                  const found = list.find((x) => (x.level || '').toLowerCase().includes('–±–∞–∑–æ–≤—ã–π'));
                  return found || list.sort((a, b) => (a.id || '').localeCompare(b.id || ''))[0];
                };
                const grouped: Record<string, Badge[]> = {};
                badges.forEach((b) => {
                  const key = baseKey(b.id);
                  (grouped[key] ||= []).push(b);
                });
                 const representatives = Object.entries(grouped).map(([, list]) => pickBase(list));
                const currentTopics = new Set(topicsFor(textOf(levelBadge)));
                if (currentTopics.size === 0) return null;
                type Scored = { badge: Badge; score: number };
                const scored: Scored[] = [];
                for (const rb of representatives) {
                  if (sameGroup(rb.id, levelBadge.id)) continue;
                  if (rb.category_id === levelBadge.category_id) continue;
                  const t = new Set(topicsFor(textOf(rb)));
                  let overlap = 0;
                  t.forEach((x) => { if (currentTopics.has(x)) overlap++; });
                  if (overlap > 0) scored.push({ badge: rb, score: overlap });
                }
                scored.sort((a, b) => b.score - a.score || a.badge.title.localeCompare(b.badge.title));
                const related = scored.slice(0, 6).map((s) => s.badge);
                if (related.length === 0) return null;
                return (
                  <div className="levels-grid-bottom levels-dock">
                    {related.map((rb) => (
                      <article key={rb.id} className="level-card-bottom" onClick={() => handleBadgeClick(rb)} title={categoryTitleById(rb.category_id)}>
                        <div className="level-card__icon">
                          <span className="level-bubble__emoji">{rb.emoji || 'üèÖ'}</span>
                        </div>
                        <h4 className="level-card__title">{rb.title}</h4>
                        <div className="level-card__subtitle">{categoryTitleById(rb.category_id)}</div>
                      </article>
                    ))}
                  </div>
                );
              })()}
             </div>
           </section>
         </div>
       </div>
     );
   };

  if (loading) {
    return (
      <div className="loading-screen">
        <div className="loading-content">
          <div className="loading-spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã –∑–Ω–∞—á–∫–æ–≤...</p>
        </div>
      </div>
    );
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ HTML –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ä–∞–∑—Ä—ã–≤–æ–≤
  const cleanHtmlContent = (html: string) => {
    return html
      // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
      .replace(/\s+/g, ' ')
      // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
      .replace(/\n\s*\n\s*\n/g, '\n\n')
      // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
      .replace(/^\s+|\s+$/gm, '')
      // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
      .replace(/<p>\s*<\/p>/g, '')
      // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ <br>
      .replace(/(<br\s*\/?>)\s*(<br\s*\/?>)/g, '<br>')
      // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏
      .replace(/>\s+</g, '><')
      // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ
      .replace(/\s{2,}/g, ' ')
      .trim();
  };

  // –≠–ö–†–ê–ù: Introduction
  const renderIntroduction = () => {
    if (!selectedCategory?.introduction?.has_introduction) return null;
    
    const cleanedHtml = cleanHtmlContent(selectedCategory.introduction.html);
    
    return (
      <div className="introduction-screen">
        <div className="header">
          <button onClick={handleBackToCategoryFromIntroduction} className="back-button">
            ‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          </button>
          <h1 className="heading-gold">üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: {selectedCategory.title}</h1>
        </div>
        <div className="introduction-content">
          <div 
            className="introduction-text"
            dangerouslySetInnerHTML={{ __html: cleanedHtml }}
          />
        </div>
      </div>
    );
  };

  // –≠–ö–†–ê–ù: –û –ª–∞–≥–µ—Ä–µ
  const renderAboutCamp = () => (
    <div className="about-camp-screen">
      <div className="header">
        <button onClick={handleBackToIntro} className="back-button">
          ‚Üê –ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–π
        </button>
        <h1 className="heading-gold">üåü –†–µ–∞–ª—å–Ω—ã–π –õ–∞–≥–µ—Ä—å</h1>
      </div>
      <div className="about-camp-content">
        <div className="camp-description">
          <h2>üöÄ –†–µ–∞–ª—å–Ω—ã–π –õ–∞–≥–µ—Ä—å ‚Äî —Ä–∞–∑–≤–∏–≤–∞–µ–º –Ω–∞–≤—ã–∫–∏ –±—É–¥—É—â–µ–≥–æ!</h2>
          <p>
            –ó–∞ —Å–º–µ–Ω—É –ø–æ–¥—Ä–æ—Å—Ç–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –Ω–∞–≤—ã–∫–∏ –∏ –æ–ø—ã—Ç, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–ª–µ–∑–Ω—ã –¥–∞–ª–µ–∫–æ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –ª–∞–≥–µ—Ä—è –∏ —à–∫–æ–ª—ã: 
            <strong>–ª–∏–¥–µ—Ä—Å—Ç–≤–æ, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ä–∞–±–æ—Ç–∞ —Å –ò–ò –∏ —É–º–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ.</strong>
          </p>
          <p>
            <strong>7 —Å–æ–±—ã—Ç–∏–π –≤ –¥–µ–Ω—å</strong> ‚Äî –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º—É–∑—ã–∫–∏ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏ –¥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –¥—É—à–µ–≤–Ω—ã—Ö –≤–µ—á–µ—Ä–æ–≤ —Å –ø–µ—Å–Ω—è–º–∏ –ø–æ–¥ –≥–∏—Ç–∞—Ä—É –∏ —Å–∫—Ä–∏–ø–∫—É. 
            –í–∞—à —Ä–µ–±—ë–Ω–æ–∫ –≤–µ—Ä–Ω—ë—Ç—Å—è –¥–æ–º–æ–π <strong>—Å –Ω–æ–≤—ã–º –≤–∑–≥–ª—è–¥–æ–º –Ω–∞ —Å–µ–±—è –∏ –º–∏—Ä.</strong>
          </p>
          
          <h3>üéØ –ß—Ç–æ –º—ã —Ä–∞–∑–≤–∏–≤–∞–µ–º</h3>
          <div className="benefits-grid">
                            <div className="benefit-item clickable" style={{
                  background: 
                    'linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4)), url("/skills_4k.png") center/cover no-repeat',
                  cursor: 'pointer'
                }} onClick={() => {
                  const category = categories.find(c => c.id === "13");
                  if (category) {
                    handleCategoryClick(category);
                  }
                }}>
                  <h4 style={{
                    color: '#FFD700',
                    textShadow: '2px 2px 4px rgba(0, 0, 0, 0.8)',
                    fontWeight: 'bold'
                  }}>üß© –ù–∞–≤—ã–∫–∏ 4K</h4>
                  <p style={{
                    color: '#fff',
                    fontWeight: '600',
                    textShadow: '1px 1px 2px rgba(0, 0, 0, 0.8)'
                  }}>
                    üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å<br/>
                    üí¨ –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è<br/>
                    ü§ù –ö–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—è<br/>
                    üß† –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ
                  </p>
                </div>
            <div className="benefit-item clickable" style={{
              background: 
                'linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4)), url("/ai_camp.png") center/cover no-repeat',
              cursor: 'pointer'
            }} onClick={() => {
              const category = categories.find(c => c.id === "12");
              if (category) {
                handleCategoryClick(category);
              }
            }}>
              <h4 style={{
                color: '#FFD700',
                textShadow: '2px 2px 4px rgba(0, 0, 0, 0.8)',
                fontWeight: 'bold'
              }}>‚ú®–ù–µ–π—Ä–æ–ª–∞–≥–µ—Ä—å ‚Äì –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –¥–µ—Ç–µ–π</h4>
              <p style={{
                color: '#fff',
                fontWeight: '600',
                textShadow: '1px 1px 2px rgba(0, 0, 0, 0.8)'
              }}>–ò–∑—É—á–∞–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∫–∞–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞, –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.</p>
            </div>
            <div className="benefit-item clickable" style={{
              background: 
                'linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4)), url("/co_management.png") center/cover no-repeat',
              cursor: 'pointer'
            }} onClick={() => {
              const category = categories.find(c => c.id === "9");
              if (category) {
                handleCategoryClick(category);
              }
            }}>
              <h4 style={{
                color: '#FFD700',
                textShadow: '2px 2px 4px rgba(0, 0, 0, 0.8)',
                fontWeight: 'bold'
              }}>üî• –°–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ª–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞</h4>
              <p style={{
                color: '#fff',
                fontWeight: '600',
                textShadow: '1px 1px 2px rgba(0, 0, 0, 0.8)'
              }}>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –ø–æ–º–æ—â—å –¥—Ä—É–≥–∏–º, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å ‚Äî –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –ª–∏–¥–µ—Ä–∞</p>
            </div>
          </div>



          <h3>üì∏ –ö–∞–∫ —ç—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ</h3>
          <div className="posts-section">
            <a href="https://vk.com/wall-57701087_9100" target="_blank" rel="noopener noreferrer" className="post-link">
              <div className="post-image">
                <img src="/pictures/Wr8s1lqBl95mo9__Pw4CSouLulbnCQRdCt31tWGcKWGlLmXRD60QviGdQG1ASrS3KkfW4t6wFumMhG4myCTZEaKT.jpg" alt="–ü–æ—Å—Ç 1" />
              </div>
              <div className="post-title">
                <div className="post-main-title">üî• –í–æ–∂–∞—Ç—Å–∫–∏–µ –∫–µ–π—Å—ã –∏ –ø–µ–¥–∞–≥–æ–≥–∏–∫–∞</div>
                <div className="post-subtitle">–†–∞–∑–±–æ—Ä —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π: –æ—Ç –Ω–æ—á–Ω—ã—Ö –ø–æ—Å–∏–¥–µ–ª–æ–∫ –¥–æ –±—É–ª–ª–∏–Ω–≥–∞</div>
                <div className="post-highlights">
                  <span className="highlight">üí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏</span>
                  <span className="highlight">üé≠ –†–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã</span>
                  <span className="highlight">üöÄ –ó–Ω–∞—á–æ–∫ "–†–µ–∞–ª—å–Ω—ã–π –§–∞—Å–∏–ª–∏—Ç–∞—Ç–æ—Ä"</span>
                </div>
              </div>
            </a>
            <a href="https://vk.com/wall-57701087_9080" target="_blank" rel="noopener noreferrer" className="post-link">
              <div className="post-image">
                <img src="/pictures/HvRgNN4EUqGaVKKmQYwOnSESzm3zhN8NLN7psGe2xTbuscFg5h0oIIxbtlYIkCIO1zj2TUQYoFAKy9pYquEpfGrR.jpg" alt="–ü–æ—Å—Ç 2" />
              </div>
              <div className="post-title">
                <div className="post-main-title">üöÄ –î–µ—Ç–∏ —Å–∞–º–∏ –æ—Ä–≥–∞–Ω–∏–∑—É—é—Ç –æ—Ç—Ä—è–¥–Ω—ã–µ –¥–µ–ª–∞!</div>
                <div className="post-subtitle">–ò–≥—Ä–∞ "–ë—Ä–æ—Å–≤—è—â–µ–Ω–∏–µ": –æ—Ç –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∞ –¥–æ –æ—Ä–∏–≥–∞–º–∏</div>
                <div className="post-highlights">
                  <span className="highlight">üé¨ –ò–≥—Ä–∞ –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º</span>
                  <span className="highlight">üé® –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã</span>
                  <span className="highlight">üî• –õ–∏–¥–µ—Ä—Å—Ç–≤–æ</span>
                </div>
              </div>
            </a>
            <a href="https://vk.com/wall-57701087_9072" target="_blank" rel="noopener noreferrer" className="post-link">
              <div className="post-image">
                <img src="/pictures/wa1Ma_l5j4S2gV8sBeNLTw0cftt3WLplAEvXI9RW-qd5-uWJCslMqRRXGcFhKFEIr0Ck2teKZBiFzyRIeMfWLiLE.jpg" alt="–ü–æ—Å—Ç 3" />
              </div>
              <div className="post-title">
                <div className="post-main-title">üé® –ù–µ–π—Ä–æ–¥–∏–∑–∞–π–Ω –∏ –∞–≥–µ–Ω—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã</div>
                <div className="post-subtitle">–û—Ç –∏–¥–µ–∏ –¥–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–∫–∞: Genspark, FLUX, ChatGPT</div>
                <div className="post-highlights">
                  <span className="highlight">ü§ñ –ò—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥</span>
                  <span className="highlight">üéØ –†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã</span>
                  <span className="highlight">üß† –ú–µ—Ç–∞–ø—Ä–æ–º—Ç–∏–Ω–≥</span>
                </div>
              </div>
            </a>
            <a href="https://vk.com/wall-57701087_9049" target="_blank" rel="noopener noreferrer" className="post-link">
              <div className="post-image">
                <img src="/pictures/2025-09-11_05-28-13.png" alt="–ü–æ—Å—Ç 4" />
              </div>
              <div className="post-title">
                <div className="post-main-title">üè¥‚Äç‚ò†Ô∏è –ü–∏—Ä–∞—Ç—ã –ø–æ—Ö–∏—Ç–∏–ª–∏ –ë—É—Ä—ã—á–∞!</div>
                <div className="post-subtitle">–§–æ—Ä—Ç –ë–æ—è—Ä–¥ –≤ –ª–∞–≥–µ—Ä–µ: —ç—Å—Ç–∞—Ñ–µ—Ç—ã, –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏, —Å–ø–∞—Å–µ–Ω–∏–µ</div>
                <div className="post-highlights">
                  <span className="highlight">‚öîÔ∏è –ö–æ–º–∞–Ω–¥–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è</span>
                  <span className="highlight">üß© –ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∏</span>
                  <span className="highlight">üéØ –§–æ—Ä—Ç –ë–æ—è—Ä–¥</span>
                </div>
              </div>
            </a>
            <a href="https://vk.com/wall-57701087_9009" target="_blank" rel="noopener noreferrer" className="post-link">
              <div className="post-image">
                <img src="/pictures/4pCDWvEw_uyf3q8yQbhfsPpfDSVOMYkkexIZCudbxTsmqN8iA3jIT8TwpNtXbGliD_YCpD2nZhQZXajz4-0KFg-1.jpg" alt="–ü–æ—Å—Ç 5" />
              </div>
              <div className="post-title">
                <div className="post-main-title">üé∂ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–¥—é—Å–µ—Ä —Å Suno AI</div>
                <div className="post-subtitle">–û—Ç —Ç–µ–∫—Å—Ç–∞ –¥–æ –≥–æ—Ç–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–∞: —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü</div>
                <div className="post-highlights">
                  <span className="highlight">üéπ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤</span>
                  <span className="highlight">üé§ –ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞</span>
                  <span className="highlight">üéµ –ó–Ω–∞—á–æ–∫ "AI-–ö–æ–º–ø–æ–∑–∏—Ç–æ—Ä"</span>
                </div>
              </div>
            </a>
            <a href="https://vk.com/wall-57701087_9006" target="_blank" rel="noopener noreferrer" className="post-link">
              <div className="post-image">
                <img src="/pictures/w38A7umTNl1ECHO8HtrN9KRFmpwNLoCd19DGmO1qdPcLBENPbYsFQuzJOoDej_zxEcHDnRvDGUayZgs1mOMSkam3.jpg" alt="–ü–æ—Å—Ç 6" />
              </div>
              <div className="post-title">
                <div className="post-main-title">ü•ä –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ —Å–∞–º–æ–æ–±–æ—Ä–æ–Ω–µ</div>
                <div className="post-subtitle">–° –¢–∏–º–æ—Ñ–µ–µ–º: —Ü–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ –∏ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞</div>
                <div className="post-highlights">
                  <span className="highlight">ü•ä –°–∞–º–æ–æ–±–æ—Ä–æ–Ω–∞</span>
                  <span className="highlight">üåü –ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ</span>
                  <span className="highlight">üôå –¶–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏</span>
                </div>
              </div>
            </a>
            <a href="https://vk.com/wall-57701087_8995" target="_blank" rel="noopener noreferrer" className="post-link">
              <div className="post-image">
                <img src="/pictures/2025-09-11_05-25-15.png" alt="–ü–æ—Å—Ç 7" />
              </div>
              <div className="post-title">
                <div className="post-main-title">üïØÔ∏è –û–≥–æ–Ω—ë–∫ –æ—Ç–∫—Ä–æ–≤–µ–Ω–∏–π</div>
                <div className="post-subtitle">–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –æ–±—â–µ–Ω–∏—è</div>
                <div className="post-highlights">
                  <span className="highlight">ü´Ç –ü—Ä–∏–Ω—è—Ç–∏–µ</span>
                  <span className="highlight">üéØ –î–æ–≤–µ—Ä–∏–µ</span>
                  <span className="highlight">üè° –°–µ–º–µ–π–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è</span>
                </div>
              </div>
            </a>
            <a href="https://vk.com/wall-57701087_8994" target="_blank" rel="noopener noreferrer" className="post-link">
              <div className="post-image">
                <img src="/pictures/vKjyH96aNgNYbg14n545f0j1tZqG12tBI3L83kyz-8ofHa9DnmG-p41grb0hrbwUoNGteh0fdssSerJNH2GXffZN.jpg" alt="–ü–æ—Å—Ç 8" />
              </div>
              <div className="post-title">
                <div className="post-main-title">üöÄ EggX: –ª—ë—Ç–Ω–æ-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—Å–∫–∏–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è</div>
                <div className="post-subtitle">–ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂: —è–π—Ü–µ–ª—ë—Ç—ã —Å –≤—ã—Å–æ—Ç—ã 3 –º–µ—Ç—Ä–æ–≤</div>
                <div className="post-highlights">
                  <span className="highlight">üß™ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—Å–∫–∏–µ –±—é—Ä–æ</span>
                  <span className="highlight">üî¨ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å–º–µ–∫–∞–ª–∫–∞</span>
                  <span className="highlight">üë®‚ÄçüöÄ –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞</span>
                </div>
              </div>
            </a>
            <a href="https://vk.com/wall-57701087_8927" target="_blank" rel="noopener noreferrer" className="post-link">
              <div className="post-image">
                <img src="/pictures/2025-09-11_05-21-21.png" alt="–ü–æ—Å—Ç 9" />
              </div>
              <div className="post-title">
                <div className="post-main-title">üòé –°–∏–≥–º–∞-–ë—Ä–æ –≤ –†–µ–∞–ª—å–Ω–æ–º –õ–∞–≥–µ—Ä–µ</div>
                <div className="post-subtitle">–õ–µ—Ç–æ, Soft Skills, –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏ –¥–æ–±—Ä–æ –∫—Ä—É–≥–ª—ã–π –≥–æ–¥</div>
                <div className="post-highlights">
                  <span className="highlight">‚òÄÔ∏è –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —á–∞—Å</span>
                  <span className="highlight">üíú –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞</span>
                  <span className="highlight">üåü –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è</span>
                </div>
              </div>
            </a>
          </div>

          <h3>üí¨ –û—Ç–∑—ã–≤—ã —Ä–æ–¥–∏—Ç–µ–ª–µ–π</h3>
          <div className="reviews-section">
            <div className="reviews-container">
              <div className="reviews-image">
                <div className="reviews-content">
                  <h4>üåü –ß—Ç–æ –≥–æ–≤–æ—Ä—è—Ç —Ä–æ–¥–∏—Ç–µ–ª–∏ –æ –†–µ–∞–ª—å–Ω–æ–º –õ–∞–≥–µ—Ä–µ</h4>
                  <p>–ß–∏—Ç–∞–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã —Ä–æ–¥–∏—Ç–µ–ª–µ–π, —á—å–∏ –¥–µ—Ç–∏ —É–∂–µ –ø–æ–±—ã–≤–∞–ª–∏ –≤ –Ω–∞—à–µ–º –ª–∞–≥–µ—Ä–µ –∏ –ø–æ–ª—É—á–∏–ª–∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è!</p>
                  <a href="https://vk.com/realcampspb?from=groups&ref=group_menu&w=app6326142_-57701087" target="_blank" rel="noopener noreferrer" className="reviews-button">
                    üìñ –ß–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã
                  </a>
                </div>
              </div>
            </div>
          </div>

          <h3>üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏</h3>
          <div className="links-section">
            <a href="https://realcampspb.ru" target="_blank" rel="noopener noreferrer" className="camp-link">
              üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç: realcampspb.ru
            </a>
            <a href="https://vk.com/realcampspb" target="_blank" rel="noopener noreferrer" className="camp-link">
              üì± –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: vk.com/realcampspb - –±–ª–æ–≥ –ª–∞–≥–µ—Ä—è
            </a>
            <a href="https://zen.yandex.ru/realcamp" target="_blank" rel="noopener noreferrer" className="camp-link">
              üìù –ù–∞—à –±–ª–æ–≥ –≤ –Ø–Ω–¥–µ–∫—Å.–î–∑–µ–Ω: zen.yandex.ru/realcamp
            </a>
            <a href="https://www.coo-molod.ru/" target="_blank" rel="noopener noreferrer" className="camp-link">
              üèõÔ∏è –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã: coo-molod.ru
            </a>
          </div>

          <h3>üìÖ –û–°–ï–ù–ù–Ø–Ø –°–ú–ï–ù–ê 2025</h3>
          <div className="session-info clickable cursor-pointer" onClick={handleTelegramContact}>
            <h4>üé™ "–û—Å–µ–Ω–Ω–∏–π 4–ö-–≤–∞–π–± –≤ –†–µ–∞–ª—å–Ω–æ–º –õ–∞–≥–µ—Ä–µ: –Ω–∞–≤—ã–∫–∏ –±—É–¥—É—â–µ–≥–æ + –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞"</h4>
            <p><strong>–ö–æ–≥–¥–∞:</strong> —Å 25 –æ–∫—Ç—è–±—Ä—è –ø–æ 2 –Ω–æ—è–±—Ä—è 2025 –≥–æ–¥–∞</p>
            <p><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å:</strong></p>
            <ul>
              <li>30 500 ‚ÇΩ ‚Äî —Å–æ —Å–∫–∏–¥–∫–æ–π –ø–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É –°–ü–±</li>
              <li>35 500 ‚ÇΩ ‚Äî –ø–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å</li>
            </ul>
            <p><em>–ß–∏—Ç–∞–π—Ç–µ –æ—Ç–∑—ã–≤—ã —Ä–æ–¥–∏—Ç–µ–ª–µ–π –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ!</em></p>
          </div>
        </div>
      </div>
    </div>
  );

  // –≠–ö–†–ê–ù: Additional Material
  const renderAdditionalMaterial = () => {
    if (!selectedAdditionalMaterial) return null;
    
    const cleanedHtml = cleanHtmlContent(selectedAdditionalMaterial.content);
    
    return (
      <div className="additional-material-screen">
        <div className="header">
          <button onClick={handleBackToCategoryFromAdditional} className="back-button">
            ‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          </button>
          <h1 className="heading-gold">{selectedAdditionalMaterial.title}</h1>
        </div>
        <div className="additional-material-content">
          <div 
            className="additional-material-text"
            dangerouslySetInnerHTML={{ __html: cleanedHtml }}
          />
        </div>
      </div>
    );
  };

  // –≠–ö–†–ê–ù: Registration Form
  const renderRegistrationForm = () => {
    return (
      <div className="registration-form-screen">
        <div className="header">
          <button onClick={handleBackToAboutCamp} className="back-button">
            ‚Üê –ù–∞–∑–∞–¥
          </button>
          <h1 className="heading-gold">
            üé™ –ó–∞–ø–∏—Å—å –Ω–∞ –æ—Å–µ–Ω–Ω—é—é —Å–º–µ–Ω—É
          </h1>
        </div>
        
        <div className="registration-form-content">
          <div className="form-container">
            <h2>üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è –∑–∞–ø–∏—Å–∏</h2>
            <p>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏</p>
            
            <div className="form-group">
              <label>üë∂ –ò–º—è —Ä–µ–±—ë–Ω–∫–∞ *</label>
              <input
                type="text"
                value={formData.childName}
                onChange={(e) => handleFormInputChange('childName', e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±—ë–Ω–∫–∞"
                required
              />
            </div>
            
            <div className="form-group">
              <label>üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è *</label>
              <input
                type="text"
                value={formData.parentName}
                onChange={(e) => handleFormInputChange('parentName', e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                required
              />
            </div>
            
            <div className="form-group">
              <label>üìû –¢–µ–ª–µ—Ñ–æ–Ω *</label>
              <input
                type="tel"
                value={formData.phone}
                onChange={(e) => handleFormInputChange('phone', e.target.value)}
                placeholder="+7 (999) 123-45-67"
                required
              />
            </div>
            
            <div className="form-group">
              <label>üìß Email</label>
              <input
                type="email"
                value={formData.email}
                onChange={(e) => handleFormInputChange('email', e.target.value)}
                placeholder="your@email.com"
              />
            </div>
            
            <div className="form-group">
              <label>üéÇ –í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞ *</label>
              <input
                type="number"
                value={formData.childAge}
                onChange={(e) => handleFormInputChange('childAge', e.target.value)}
                placeholder="8"
                min="6"
                max="17"
                required
              />
            </div>
            
            <div className="form-group">
              <label>üí≠ –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è</label>
              <textarea
                value={formData.specialRequests}
                onChange={(e) => handleFormInputChange('specialRequests', e.target.value)}
                placeholder="–ê–ª–ª–µ—Ä–≥–∏–∏, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–∏—Ç–∞–Ω–∏—è, –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è..."
                rows={3}
              />
            </div>
            
            <button 
              className="submit-button"
              onClick={handleFormSubmit}
              disabled={!formData.childName || !formData.parentName || !formData.phone || !formData.childAge}
            >
              üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ Telegram
            </button>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="app">
      {currentView === 'intro' && renderIntro()}
      {currentView === 'categories' && renderCategories()}
      {currentView === 'category' && renderCategory()}
      {currentView === 'badge' && renderBadge()}
      {currentView === 'badge-level' && renderBadgeLevel()}
      {currentView === 'introduction' && renderIntroduction()}
      {currentView === 'additional-material' && renderAdditionalMaterial()}
      {currentView === 'about-camp' && renderAboutCamp()}
      {currentView === 'registration-form' && renderRegistrationForm()}
      
      {/* –ß–∞—Ç-–±–æ—Ç –ù–µ–π—Ä–æ–í–∞–ª—é—à–∞ */}
      <ChatButton 
        onClick={() => setIsChatOpen(!isChatOpen)} 
        isOpen={isChatOpen}
      />
      <ChatBot 
        isOpen={isChatOpen}
        onClose={() => setIsChatOpen(false)}
        currentView={currentView}
        currentCategory={selectedCategory ? {
          id: selectedCategory.id,
          title: selectedCategory.title,
          emoji: selectedCategory.emoji
        } : undefined}
        currentBadge={selectedBadge ? {
          id: selectedBadge.id,
          title: selectedBadge.title,
          emoji: selectedBadge.emoji,
          categoryId: selectedBadge.category_id
        } : undefined}
        currentLevel={selectedLevel || undefined}
        currentLevelBadgeTitle={
          currentView === 'badge-level' && selectedBadge && selectedLevel ? (() => {
            const idSegments = (selectedBadge.id || '').split('.');
            const isMultiLevel = idSegments.length === 3;
            const baseKey = isMultiLevel ? idSegments.slice(0, 2).join('.') + '.' : selectedBadge.id;
            const lb = badges.find(b => {
              if (b.category_id !== selectedBadge.category_id) return false;
              if (isMultiLevel) {
                return (b.id || '').startsWith(baseKey) && String(b.level) === String(selectedLevel);
              }
              return b.id === selectedBadge.id && String(b.level) === String(selectedLevel);
            });
            return lb?.title;
          })() : undefined
        }
      />
      
      <style>{`
        .app {
          position: relative;
          width: 100vw;
          height: 100vh;
          overflow: hidden;
          font-family: 'Arial', sans-serif;
          color: white;
          background: linear-gradient(135deg, #0c0c0c 0%, #1a1a2e 50%, #16213e 100%);
        }

        /* Global scrollbar styling (WebKit) */
        *::-webkit-scrollbar {
          width: 10px;
          height: 10px;
        }
        *::-webkit-scrollbar-track {
          background: rgba(255, 255, 255, 0.06);
          border-radius: 8px;
        }
        *::-webkit-scrollbar-thumb {
          background: linear-gradient(180deg, rgba(78,205,196,0.9), rgba(46,134,222,0.9));
          border-radius: 8px;
          border: 2px solid rgba(0, 0, 0, 0.3);
        }
        *::-webkit-scrollbar-thumb:hover {
          background: linear-gradient(180deg, rgba(78,205,196,1), rgba(46,134,222,1));
        }

        /* Firefox */
        * {
          scrollbar-width: thin;               /* auto | thin | none */
          scrollbar-color: rgba(78,205,196,0.9) rgba(255,255,255,0.06);
        }

        .loading-screen {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          display: flex;
          justify-content: center;
          align-items: center;
          z-index: 1000;
        }

        .loading-content {
          text-align: center;
        }

        .loading-spinner {
          width: 50px;
          height: 50px;
          border: 3px solid rgba(255, 255, 255, 0.3);
          border-top: 3px solid #4ecdc4;
          border-radius: 50%;
          animation: spin 1s linear infinite;
          margin: 0 auto 20px;
        }

        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }

                 .intro-screen {
           position: absolute;
           top: 0;
           left: 0;
           width: 100%;
           height: 100%;
           display: flex;
           justify-content: center;
           align-items: center;
           background: 
             linear-gradient(135deg, rgba(12, 12, 12, 0.3) 0%, rgba(26, 26, 46, 0.3) 50%, rgba(22, 33, 62, 0.3) 100%),
            url('/—ç–∫—Ä–∞–Ω 1 —Ñ–æ–Ω copy.png') center top / 100% 100% no-repeat;
           backdrop-filter: blur(10px);
         }

        .intro-logo {
          position: absolute;
          top: 20px;
          left: 20px;
          z-index: 10;
          display: flex;
          flex-direction: column;
          align-items: flex-start;
          transition: all 0.3s ease;
        }

        .intro-logo img {
          width: 180px;
          height: 180px;
          object-fit: cover;
          object-position: center;
          border-radius: 18px;
          box-shadow: 
            0 6px 20px rgba(0, 0, 0, 0.4),
            0 0 0 2px rgba(255, 215, 0, 1),
            0 0 20px rgba(255, 215, 0, 0.5),
            0 0 40px rgba(255, 215, 0, 0.3),
            inset 0 0 0 1px rgba(255, 255, 0, 0.8),
            inset 0 0 20px rgba(255, 215, 0, 0.4),
            inset 0 0 40px rgba(255, 215, 0, 0.2);
          background: rgba(255, 255, 255, 0.1);
          padding: 0px;
          transition: all 0.3s ease;
        }

        .intro-logo:hover {
          transform: scale(1.02);
        }

        .intro-logo:hover img {
          box-shadow: 
            0 12px 32px rgba(0, 0, 0, 0.5),
            0 0 0 3px rgba(255, 215, 0, 1),
            0 0 30px rgba(255, 215, 0, 0.8),
            0 0 60px rgba(255, 215, 0, 0.6),
            0 0 100px rgba(255, 215, 0, 0.4),
            inset 0 0 0 2px rgba(255, 255, 0, 1),
            inset 0 0 30px rgba(255, 215, 0, 0.6),
            inset 0 0 60px rgba(255, 215, 0, 0.3);
        }

        .logo-hover-text {
          position: absolute;
          bottom: -40px;
          left: 50%;
          transform: translateX(-50%);
          color: #FFD700;
          font-size: 14px;
          font-weight: bold;
          text-shadow: 
            0 0 10px rgba(255, 215, 0, 0.8),
            0 0 20px rgba(255, 215, 0, 0.6),
            0 0 30px rgba(255, 215, 0, 0.4);
          opacity: 0;
          transition: all 0.3s ease;
          white-space: nowrap;
          letter-spacing: 1px;
        }

        .intro-logo:hover .logo-hover-text {
          opacity: 1;
          transform: translateX(-50%) translateY(-5px);
        }

        .about-camp-screen {
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: 
            linear-gradient(135deg, rgba(12, 12, 12, 0.3) 0%, rgba(26, 26, 46, 0.3) 50%, rgba(22, 33, 62, 0.3) 100%),
            url('/—ç–∫—Ä–∞–Ω 1 —Ñ–æ–Ω copy.png') center top / 100% 100% no-repeat;
          backdrop-filter: blur(10px);
          overflow-y: auto;
        }

        .about-camp-content {
          max-width: 1000px;
          margin: 0 auto;
          padding: 2rem;
          background: rgba(0, 0, 0, 0.3);
          border-radius: 20px;
          box-shadow: 0 8px 24px rgba(0, 0, 0, 0.25);
          backdrop-filter: blur(4px);
        }

        .camp-description h2 {
          color: #FFD700;
          font-size: 1.8rem;
          margin-bottom: 1rem;
          text-shadow: 2px 2px 4px rgba(0,0,0,0.8);
        }

        .camp-description h3 {
          color: #FFA500;
          font-size: 1.4rem;
          margin: 1.5rem 0 1rem 0;
          text-shadow: 1px 1px 2px rgba(0,0,0,0.6);
        }

        .camp-description p {
          color: #E6F7FF;
          line-height: 1.6;
          margin-bottom: 1rem;
          font-size: 1rem;
        }

        .camp-description ul {
          color: #E6F7FF;
          line-height: 1.6;
          margin-bottom: 1.5rem;
          padding-left: 1.5rem;
        }

        .camp-description li {
          margin-bottom: 0.5rem;
        }

        .links-section {
          display: flex;
          flex-direction: column;
          gap: 1rem;
          margin: 1.5rem 0;
        }

        .camp-link {
          color: #4ECDC4;
          text-decoration: none;
          padding: 0.8rem 1.2rem;
          background: rgba(78, 205, 196, 0.1);
          border: 1px solid rgba(78, 205, 196, 0.3);
          border-radius: 10px;
          transition: all 0.3s ease;
          font-weight: 500;
        }

        .camp-link:hover {
          background: rgba(78, 205, 196, 0.2);
          border-color: rgba(78, 205, 196, 0.5);
          transform: translateY(-2px);
          box-shadow: 0 4px 12px rgba(78, 205, 196, 0.3);
        }

        .session-info {
          background: rgba(255, 215, 0, 0.1);
          border: 1px solid rgba(255, 215, 0, 0.3);
          border-radius: 15px;
          padding: 1.5rem;
          margin-top: 1rem;
        }

        .session-info h4 {
          color: #FFD700;
          font-size: 1.2rem;
          margin-bottom: 1rem;
          text-shadow: 1px 1px 2px rgba(0,0,0,0.6);
        }

        .session-info p {
          margin-bottom: 0.8rem;
        }

        .session-info ul {
          margin: 0.5rem 0 1rem 1.5rem;
        }

        .session-info li {
          margin-bottom: 0.3rem;
        }

        .posts-section {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
          gap: 1rem;
          margin: 1.5rem 0;
        }

        .post-link {
          color: #FFA500;
          text-decoration: none;
          padding: 1rem;
          background: rgba(255, 165, 0, 0.1);
          border: 1px solid rgba(255, 165, 0, 0.3);
          border-radius: 10px;
          transition: all 0.3s ease;
          font-weight: 500;
          text-align: center;
          display: block;
        }

        .post-link:hover {
          background: rgba(255, 165, 0, 0.2);
          border-color: rgba(255, 165, 0, 0.5);
          transform: translateY(-3px);
          box-shadow: 0 6px 16px rgba(255, 165, 0, 0.3);
        }

        .post-image {
          width: 100%;
          height: 150px;
          overflow: hidden;
          border-radius: 8px;
          margin-bottom: 0.8rem;
        }

        .post-image img {
          width: 100%;
          height: 100%;
          object-fit: cover;
          object-position: center;
          transition: transform 0.3s ease;
        }

        .post-link:hover .post-image img {
          transform: scale(1.05);
        }

        /* Benefits Grid */
        .benefits-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
          gap: 20px;
          margin: 20px 0;
        }

        .benefit-item {
          background: linear-gradient(135deg, rgba(255, 215, 0, 0.1) 0%, rgba(255, 165, 0, 0.1) 100%);
          border: 2px solid rgba(255, 215, 0, 0.3);
          border-radius: 15px;
          padding: 20px;
          text-align: center;
          transition: all 0.3s ease;
        }

        .benefit-item:hover {
          transform: translateY(-5px);
          box-shadow: 0 10px 25px rgba(255, 215, 0, 0.2);
          border-color: rgba(255, 215, 0, 0.6);
        }

        .benefit-item.clickable {
          cursor: pointer;
          position: relative;
          overflow: hidden;
          background: 
            linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4)),
            url('/pictures/Stan_Pol__beutiful_camera__vector_logo_e16e2508-69e8-4bf6-9cdf-8b7012558c5e.png') center/cover no-repeat;
        }

        .benefit-item.clickable::after {
          content: 'üëÜ';
          position: absolute;
          top: 10px;
          right: 10px;
          font-size: 16px;
          opacity: 0.7;
          transition: all 0.3s ease;
        }

        .benefit-item.clickable:hover::after {
          opacity: 1;
          transform: scale(1.2);
        }

        .benefit-item.clickable:hover {
          transform: translateY(-8px) scale(1.02);
          box-shadow: 0 15px 35px rgba(255, 215, 0, 0.3);
          border-color: rgba(255, 215, 0, 0.8);
        }

        .benefit-item h4 {
          color: #FFD700;
          margin-bottom: 10px;
          font-size: 18px;
        }

        .benefit-item.clickable h4 {
          color: #FFD700;
          text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
          font-weight: bold;
        }

        .benefit-item p {
          color: #333;
          font-size: 14px;
          line-height: 1.4;
        }

        .benefit-item.clickable p {
          color: #fff;
          font-weight: 600;
          text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
        }

        /* Daily Activities */
        .daily-activities {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
          gap: 15px;
          margin: 20px 0;
        }

        .activity-item {
          display: flex;
          align-items: center;
          background: rgba(255, 255, 255, 0.9);
          border-radius: 12px;
          padding: 15px;
          box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
          transition: all 0.3s ease;
        }

        .activity-item:hover {
          transform: translateX(5px);
          box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
        }

        .activity-icon {
          font-size: 32px;
          margin-right: 15px;
          min-width: 40px;
        }

        .activity-item div {
          flex: 1;
        }

        .activity-item strong {
          color: #2c3e50;
          font-size: 16px;
          display: block;
          margin-bottom: 5px;
        }

        .activity-item p {
          color: #666;
          font-size: 13px;
          margin: 0;
          line-height: 1.3;
        }

        /* CTA Section */
        .cta-section {
          background: linear-gradient(135deg, rgba(255, 215, 0, 0.15) 0%, rgba(255, 165, 0, 0.15) 100%);
          border: 3px solid rgba(255, 215, 0, 0.4);
          border-radius: 20px;
          padding: 25px;
          text-align: center;
          margin: 30px 0;
          box-shadow: 0 8px 25px rgba(255, 215, 0, 0.2);
        }

        .cta-section h3 {
          color: #FFD700;
          font-size: 24px;
          margin-bottom: 15px;
          text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }

        .cta-section p {
          font-size: 16px;
          line-height: 1.6;
          margin-bottom: 10px;
        }

        .cta-section p:last-child {
          margin-bottom: 0;
          font-size: 14px;
          color: #e74c3c;
          font-weight: bold;
        }

        .post-link:nth-child(1) .post-image img {
          object-position: center 10%;
        }

        .post-link:nth-child(2) .post-image img {
          object-position: center 30%;
        }

        .post-link:nth-child(3) .post-image img {
          object-position: center 20%;
          transform: scale(1.4);
        }

        .post-link:nth-child(4) .post-image img {
          object-position: center 25%;
        }

        .post-link:nth-child(6) .post-image img {
          object-position: center 30%;
        }

        .post-link:nth-child(8) .post-image img {
          object-position: center 30%;
        }

        .post-link:nth-child(9) .post-image img {
          object-position: center 30%;
        }

        /* Reviews Section Styles */
        .reviews-section {
          margin: 2rem 0;
        }

        .reviews-container {
          background: rgba(255, 165, 0, 0.1);
          border: 1px solid rgba(255, 165, 0, 0.3);
          border-radius: 15px;
          padding: 0;
          transition: all 0.3s ease;
          overflow: hidden;
        }

        .reviews-container:hover {
          background: rgba(255, 165, 0, 0.15);
          border-color: rgba(255, 165, 0, 0.5);
          transform: translateY(-3px);
          box-shadow: 0 6px 16px rgba(255, 165, 0, 0.3);
        }

        .reviews-image {
          position: relative;
          width: 100%;
          height: 200px;
          border-radius: 15px;
          background: 
            linear-gradient(rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.2)),
            url('/pictures/nCaCWzejfe1KQgvdwHWHGKONG2w1lF7h9SxMAlW-iojQZrvq7_gmxF4ZJyNBFuXZkuPE5WE489c9OXvgknit3wsR.jpg') center/50% no-repeat;
          transition: all 0.3s ease;
          display: flex;
          align-items: flex-end;
          justify-content: center;
          padding-bottom: 1rem;
        }

        .reviews-container:hover .reviews-image {
          background: 
            linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.1)),
            url('/pictures/nCaCWzejfe1KQgvdwHWHGKONG2w1lF7h9SxMAlW-iojQZrvq7_gmxF4ZJyNBFuXZkuPE5WE489c9OXvgknit3wsR.jpg') center/50% no-repeat;
          transform: scale(1.02);
        }

        .reviews-content {
          position: relative;
          z-index: 2;
          text-align: center;
          padding: 1rem;
        }

        .reviews-content h4 {
          color: #FFD700;
          font-size: 1.3rem;
          margin-bottom: 0.8rem;
          font-weight: bold;
        }

        .reviews-content p {
          color: #ffffff;
          font-size: 1rem;
          line-height: 1.5;
          margin-bottom: 1.5rem;
        }

        .reviews-button {
          display: inline-block;
          background: rgba(255, 215, 0, 0.2);
          color: #FFD700;
          padding: 12px 24px;
          border-radius: 25px;
          text-decoration: none;
          font-weight: bold;
          font-size: 1rem;
          transition: all 0.3s ease;
          border: 2px solid rgba(255, 215, 0, 0.5);
        }

        .reviews-button:hover {
          background: rgba(255, 215, 0, 0.4);
          border-color: rgba(255, 215, 0, 0.8);
          transform: translateY(-2px);
          box-shadow: 0 6px 20px rgba(255, 215, 0, 0.3);
        }

        /* Mobile responsiveness for reviews */
        @media (max-width: 768px) {
          .reviews-image {
            height: 150px;
            background-size: 80%;
          }

          .reviews-content {
            padding: 0.8rem;
          }

          .reviews-content h4 {
            font-size: 1.1rem;
          }

          .reviews-content p {
            font-size: 0.9rem;
          }
        }

        .post-title {
          font-size: 0.9rem;
          line-height: 1.3;
        }

        .post-main-title {
          font-size: 1rem;
          font-weight: bold;
          color: #FFD700;
          margin-bottom: 0.3rem;
          text-shadow: 1px 1px 2px rgba(0,0,0,0.6);
        }

        .post-subtitle {
          font-size: 0.8rem;
          color: #E6F7FF;
          margin-bottom: 0.5rem;
          line-height: 1.2;
        }

        .post-highlights {
          display: flex;
          flex-wrap: wrap;
          gap: 0.3rem;
          justify-content: center;
        }

        .highlight {
          font-size: 0.7rem;
          background: rgba(78, 205, 196, 0.2);
          color: #4ECDC4;
          padding: 0.2rem 0.4rem;
          border-radius: 4px;
          border: 1px solid rgba(78, 205, 196, 0.3);
        }



                                                                       .intro-content {
             text-align: center;
             max-width: 1000px;
             padding: 1rem;
             background: rgba(0, 0, 0, 0.3);
             border-radius: 20px;
             border: 1px solid rgba(255, 255, 255, 0.1);
             box-shadow: 0 8px 24px rgba(0, 0, 0, 0.25);
             margin: 1rem;
             backdrop-filter: blur(4px);
           }

                 .intro-content h1 {
           font-size: 2rem;
           margin-bottom: 18px;
           font-weight: 800;
           letter-spacing: -0.01em;
           background: linear-gradient(45deg, #4ecdc4, #44a08d);
           -webkit-background-clip: text;
           -webkit-text-fill-color: transparent;
           background-clip: text;
         }

                 .intro-content p {
           font-size: 0.9rem;
           line-height: 1.45;
           margin-bottom: 0.6rem;
           color: #E6F7FF;
           max-width: 70ch;
           margin-left: auto;
           margin-right: auto;
         }

                                                                       .philosophy-section {
             margin: 1rem 0;
             padding: 0.6rem;
             background: rgba(255, 255, 255, 0.03);
             border: 1px solid rgba(255, 255, 255, 0.05);
             border-radius: 15px;
             backdrop-filter: blur(2px);
             gap: 16px;
           }

                 .philosophy-main {
           font-size: 1rem !important;
           color: #CFEAF5 !important;
           text-align: center;
           margin-bottom: 0.6rem !important;
         }

                 .philosophy-points {
           margin: 0.6rem 0;
         }

                                                                       .point {
             display: grid;
             grid-template-columns: auto 1fr;
             gap: 12px;
             align-items: flex-start;
             margin-bottom: 0.6rem;
             padding: 0.5rem;
             background: rgba(255, 255, 255, 0.02);
             border-radius: 10px;
             border-left: 3px solid #62FFD0;
           }

                 .point-icon {
           font-size: 1.1rem;
           grid-column: 1;
           align-self: start;
         }

        .point div {
          grid-column: 2;
        }

                 .point strong {
           color: #62FFD0;
           display: block;
           margin-bottom: 0.2rem;
         }

                                                                       .philosophy-ending {
             text-align: center;
             font-size: 0.9rem !important;
             color: #62FFD0 !important;
             margin-top: 0.6rem !important;
             padding: 0.5rem;
             background: rgba(98, 255, 208, 0.05);
             border-radius: 10px;
           }

                 .start-instruction {
           text-align: center;
           font-size: 0.9rem;
           color: #ccc;
           margin: 0.6rem 0;
         }

                 .start-button {
           background: linear-gradient(45deg, #4ecdc4, #44a08d);
           border: none;
           padding: 0.6rem 1.2rem;
           font-size: 0.95rem;
           color: white;
           border-radius: 50px;
           cursor: pointer;
           transition: all 0.3s ease;
           box-shadow: 0 10px 20px rgba(78, 205, 196, 0.3);
           margin-top: 0.2rem;
         }

        .start-button:hover {
          transform: translateY(-2px);
          box-shadow: 0 15px 30px rgba(78, 205, 196, 0.4);
        }

                                   .categories-screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
            padding: 1rem;
            background: 
              linear-gradient(135deg, rgba(12, 12, 12, 0.3) 0%, rgba(26, 26, 46, 0.3) 50%, rgba(22, 33, 62, 0.3) 100%),
                             url('/—ç–∫—Ä–∞–Ω 2 —Ñ–æ–Ω.png') center center / cover no-repeat;
          }

                   .category-screen,
          .badge-screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            overflow-x: hidden;
            overflow-y: auto;
            padding: 1rem;
            background: 
              linear-gradient(135deg, rgba(12, 12, 12, 0.3) 0%, rgba(26, 26, 46, 0.3) 50%, rgba(22, 33, 62, 0.3) 100%),
                             url('/—ç–∫—Ä–∞–Ω 3 —Ñ–æ–Ω.png') center top / cover no-repeat;
          }

          .badge-level-screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            overflow-x: hidden;
            overflow-y: auto;
            padding: 1rem;
          }

                                   .header {
            margin-bottom: 0.4rem; /* –£–º–µ–Ω—å—à–∏–ª–∏ –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É */
            background: 
              linear-gradient(135deg, rgba(0, 0, 0, 0.3) 0%, rgba(0, 0, 0, 0.2) 100%),
              url('/pattern_stickers.jpg') center center / 100% no-repeat;
            padding: 0.3rem; /* –£–º–µ–Ω—å—à–∏–ª–∏ padding */
            border-radius: 15px;
            backdrop-filter: blur(5px);
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            gap: 0.4rem;
          }

          .category-screen .header {
            background: 
              linear-gradient(135deg, rgba(0, 0, 0, 0.3) 0%, rgba(0, 0, 0, 0.2) 100%),
              url('/badges_photo.jpg') center 71% / 100% no-repeat !important;
            position: relative;
          }

          .category-screen .header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: 
              radial-gradient(circle at 15% 25%, rgba(0, 0, 0, 0.4) 0%, transparent 30%),
              radial-gradient(circle at 85% 15%, rgba(0, 0, 0, 0.3) 0%, transparent 25%),
              radial-gradient(circle at 25% 75%, rgba(0, 0, 0, 0.35) 0%, transparent 35%),
              radial-gradient(circle at 75% 85%, rgba(0, 0, 0, 0.3) 0%, transparent 30%),
              radial-gradient(circle at 50% 50%, rgba(0, 0, 0, 0.2) 0%, transparent 40%);
            filter: hue-rotate(270deg) saturate(1.5) brightness(0.8);
            pointer-events: none;
            z-index: 1;
          }

          .category-screen .header > * {
            position: relative;
            z-index: 2;
          }

                 .back-button {
           background: rgba(255, 255, 255, 0.1);
           border: 1px solid rgba(255, 255, 255, 0.2);
           color: white;
           padding: 0.4rem 0.8rem;
           border-radius: 25px;
           cursor: pointer;
           transition: all 0.3s ease;
           margin-bottom: 0.8rem;
           font-size: 0.9rem;
         }

        .back-button:hover {
          background: rgba(255, 255, 255, 0.2);
        }

                                   .header h1 {
            color: #4ecdc4;
            font-size: 1.1rem; /* –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ */
            margin: 0 0 0.1rem 0; /* –£–º–µ–Ω—å—à–∏–ª–∏ –æ—Ç—Å—Ç—É–ø */
            white-space: normal; /* –Ω–µ –ª–æ–º–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ */
            line-height: 1.25;
          }

                  .header p {
            color: #ccc;
            font-size: 0.7rem; /* –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ */
            margin: 0;
          }

                                                                                                                                                                               .categories-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 1.5rem;
                width: 100%;
                height: calc(100vh - 120px);
                padding: 1rem;
                overflow: hidden;
              }

category-container {
                   display: flex;
                   align-items: center;
                   gap: 0.8rem; /* –£–≤–µ–ª–∏—á–∏–ª–∏ –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –ø—É–∑—ã—Ä–µ–º –∏ —Ç–µ–∫—Å—Ç–æ–º */
                    cursor: pointer;
                    padding: 0;
                    background: transparent;
                    border: none;
                    border-radius: 0;
                    backdrop-filter: none;
                    transition: all 0.3s ease;
                 }

                                                                                                                                                                               .category-card {
                background: rgba(0, 0, 0, 0.8);
                border: 1px solid rgba(255, 255, 255, 0.2);
                border-radius: 50%;
                padding: 0.5rem;
                cursor: pointer;
                transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
                backdrop-filter: blur(10px);
                text-align: center;
                box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);
                aspect-ratio: 1;
                display: flex;
                justify-content: center;
                align-items: center;
                position: relative;
                min-width: 60px;
                min-height: 60px;
                overflow: hidden;
                flex-shrink: 0;
              }

                                       

                   display: flex;
                   align-items: center;
                   gap: 0;
                   cursor: pointer;
                   padding: 0;
                   background: transparent;
                   border: none;
                   border-radius: 0;
                   backdrop-filter: none;
                   transition: all 0.3s ease;
                 }

                                                                                                                                                                               .category-card {
                background: rgba(0, 0, 0, 0.8);
                border: 1px solid rgba(255, 255, 255, 0.2);
                border-radius: 50%;
                padding: 0.5rem;
                cursor: pointer;
                transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
                backdrop-filter: blur(10px);
                text-align: center;
                box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);
                aspect-ratio: 1;
                display: flex;
                justify-content: center;
                align-items: center;
                position: relative;
                min-width: 60px;
                min-height: 60px;
                overflow: hidden;
                flex-shrink: 0;
                animation: breath 3s ease-in-out infinite;
              }

                                       .category-container {
             z-index: 9999;
           }

                                       .category-container.floating {
             animation: float 6s ease-in-out infinite;
           }
 
           @keyframes float {
             0%, 100% {
               transform: translateY(0px);
             }
             50% {
               transform: translateY(-8px);
             }
           }

         .category-card::before {
           content: '';
           position: absolute;
           top: 50%;
           left: 50%;
           width: 80%;
           height: 80%;
           border: 1px solid rgba(78, 205, 196, 0.3);
           border-radius: 50%;
           transform: translate(-50%, -50%);
           pointer-events: none;
           animation: pulse 3s ease-in-out infinite;
           box-shadow: 0 0 15px rgba(78, 205, 196, 0.2);
         }
         
         .category-card::after {
           content: '';
           position: absolute;
           top: 50%;
           left: 50%;
           width: 60%;
           height: 60%;
           border: 1px solid rgba(78, 205, 196, 0.1);
           border-radius: 50%;
           transform: translate(-50%, -50%);
           pointer-events: none;
           animation: pulse 2s ease-in-out infinite reverse;
         }

         @keyframes pulse {
           0%, 100% { 
             transform: translate(-50%, -50%) scale(1);
             opacity: 0.3;
           }
           50% { 
             transform: translate(-50%, -50%) scale(1.1);
             opacity: 0.6;
           }
         }
         
         @keyframes emojiFloat {
           0%, 100% { 
             transform: scale(1.25) rotate(5deg) translateY(0px);
           }
           50% { 
             transform: scale(1.25) rotate(5deg) translateY(-3px);
           }
         }
         
         @keyframes activeGlow {
           0%, 100% { 
             box-shadow: 
               0 0 25px rgba(78, 205, 196, 0.6),
               0 0 40px rgba(78, 205, 196, 0.3),
               inset 0 0 15px rgba(78, 205, 196, 0.1);
           }
           50% { 
             box-shadow: 
               0 0 35px rgba(78, 205, 196, 0.8),
               0 0 60px rgba(78, 205, 196, 0.4),
               inset 0 0 20px rgba(78, 205, 196, 0.15);
           }
         }

          /* Pulsing glow for the currently selected badge bubble in header */
          @keyframes selectedGlow {
            0%, 100% {
              box-shadow:
                0 6px 18px rgba(0, 0, 0, 0.6),
                0 0 30px rgba(78, 205, 196, 0.68),
                0 0 55px rgba(78, 205, 196, 0.35),
                inset 0 0 16px rgba(78, 205, 196, 0.18);
            }
            50% {
              box-shadow:
                0 8px 22px rgba(0, 0, 0, 0.65),
                0 0 42px rgba(78, 205, 196, 0.9),
                0 0 75px rgba(78, 205, 196, 0.55),
                inset 0 0 22px rgba(78, 205, 196, 0.24);
            }
          }

                                    .category-container:hover .category-card {
            transform: translateY(-8px) scale(1.08);
            box-shadow: 
              0 0 30px rgba(78, 205, 196, 0.8),
              0 0 60px rgba(78, 205, 196, 0.4),
              inset 0 0 20px rgba(78, 205, 196, 0.1);
            border-color: #4ecdc4;
            filter: brightness(1.1);
          }

          .category-container:hover .category-card::before {
            border-color: rgba(78, 205, 196, 0.8);
            animation-duration: 1s;
            box-shadow: 0 0 25px rgba(78, 205, 196, 0.6);
          }
          
          .category-container:hover .category-card::after {
            border-color: rgba(78, 205, 196, 0.4);
            animation-duration: 0.8s;
            box-shadow: 0 0 15px rgba(78, 205, 196, 0.3);
          }

          .category-container:hover .category-text h3 {
            color: #4ecdc4;
          }
          
          .category-container:hover .category-icon {
            filter: drop-shadow(0 0 15px rgba(78, 205, 196, 0.6));
            transform: scale(1.1);
          }

                                                                                                                                                                                                                       .category-icon {
              font-size: clamp(1rem, 2vw, 2rem);
              flex-shrink: 0;
              display: flex;
              justify-content: center;
              align-items: center;
              width: 100%;
              height: 100%;
              transition: all 0.3s ease;
            }
            
            .category-icon img {
              width: 140%;
              height: 140%;
              object-fit: cover;
              object-position: center;
            }

            .category-2-icon {
              width: 140% !important;
              height: 140% !important;
            }

            .category-5-icon {
              width: 138% !important;
              height: 138% !important;
            }

            .category-8-icon {
              width: 138% !important;
              height: 138% !important;
            }

            .category-9-icon {
              width: 145% !important;
              height: 145% !important;
            }

            .category-14-icon {
              width: 138% !important;
              height: 138% !important;
            }

                .category-13-icon {
      width: 138% !important;
      height: 138% !important;
    }

    .category-11-icon {
      width: 160% !important;
      height: 160% !important;
    }

    .category-3-icon {
      width: 200% !important;
      height: 200% !important;
    }

    .category-4-icon {
      width: 140% !important;
      height: 140% !important;
    }

    .category-7-icon {
      width: 140% !important;
      height: 140% !important;
    }

    .category-6-icon {
      width: 140% !important;
      height: 140% !important;
    }

    .category-10-icon {
      width: 160% !important;
      height: 160% !important;
            }

                     .category-text {
             display: flex;
             flex-direction: column;
             gap: 0.1rem; /* –£–º–µ–Ω—å—à–∏–ª–∏ –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ */
             min-width: 0;
             flex: 1;
           }

truncated]
                      margin: 0;
                      color: #4ecdc4;
                      font-size: clamp(0.6rem, 1.5vw, 0.9rem);
                      line-height: 1.2;
                      word-wrap: break-word;
                      text-align: left;
                      max-width: 500px;
                    }

                                                                                       .category-text p {
               margin: 0;
               color: #ccc;
               font-size: clamp(0.4rem, 1vw, 0.6rem);
               text-align: left;
               margin-top: 0.05rem;
             }

                                     .badges-grid {
             display: grid;
             grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
             gap: 18px;
             align-items: start;
             justify-content: center;
             overflow-x: hidden;
             box-sizing: border-box;
             padding: 16px;
             width: 100%;
             height: auto;
             min-height: calc(100vh - 120px);
             overflow-y: visible;
             max-width: 1400px;
             margin: 0 auto;
           }

                                     .badge-card {
             display: flex;
             flex-direction: column;
             align-items: center;
             justify-content: space-between;
             padding: 0;
             border-radius: 0;
             background: transparent;
             backdrop-filter: none;
             box-shadow: none;
             min-height: auto;
             height: auto;
             cursor: pointer;
             transition: all 0.3s ease;
             box-sizing: border-box;
             z-index: 9999;
           }

        .badge-card:hover {
          transform: translateY(-8px) scale(1.02);
          box-shadow: 
            0 0 25px rgba(78, 205, 196, 0.6),
            0 0 50px rgba(78, 205, 196, 0.3);
          filter: brightness(1.05);
        }

                                     .badge-card__icon {
             width: 80px;
             height: 80px;
             border-radius: 50%;
             display: grid;
             place-items: center;
             flex: 0 0 auto;
             background: rgba(0, 0, 0, 0.4);
             border: 1px solid rgba(255, 255, 255, 0.2);
             transition: all 0.3s ease;
           }

                  .badge-card:hover .badge-card__icon {
            background: rgba(255, 255, 255, 0.15);
            border-color: #4ecdc4;
            box-shadow: 
              0 0 25px rgba(78, 205, 196, 0.5),
              0 0 40px rgba(78, 205, 196, 0.2),
              inset 0 0 15px rgba(78, 205, 196, 0.1);
            transform: scale(1.15);
          }

                                     .badge-card__title {
             margin-top: 16px;
             text-align: center;
             font-size: 15px;
             line-height: 1.2;
             max-width: 100%;
             white-space: pre-line !important;
             word-break: break-word;
             hyphens: auto;
             color: #4ecdc4;
             margin: 0;
           }

                                     .badge-card__level {
             margin-top: 12px;
             font-size: 13px;
             color: #ccc;
             opacity: 0.8;
             text-align: center;
           }

                                     .badge-emoji {
             font-size: 3.5rem;
             transition: all 0.3s ease;
           }

                  .badge-card:hover .badge-emoji {
            transform: scale(1.25) rotate(5deg);
            filter: 
              drop-shadow(0 0 15px rgba(78, 205, 196, 0.7))
              drop-shadow(0 0 25px rgba(78, 205, 196, 0.4))
              brightness(1.1);
            animation: emojiFloat 2s ease-in-out infinite;
          }

                                     @media (min-width: 576px) {
             .badges-grid { 
               grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); 
               max-width: 1200px;
             }
           }
           @media (min-width: 768px) {
             .badges-grid { 
               grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); 
               max-width: 1300px;
             }
           }
           @media (min-width: 1200px) {
             .badges-grid { 
               grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); 
               max-width: 1400px;
             }
           }



                                   .badge-card h3 {
            margin: 0 0 0.2rem 0;
            color: #4ecdc4;
            font-size: clamp(0.6rem, 1.5vw, 0.9rem);
            line-height: 1.2;
            word-wrap: break-word;
          }

                                   .badge-level {
            margin: 0;
            color: #ccc;
            font-size: clamp(0.4rem, 1vw, 0.6rem);
            margin-top: 0.05rem;
          }

        .badge-header,
        .level-header {
          display: flex;
          align-items: center;
          gap: 1rem;
        }

        /* Badge screen: keep the emoji inside a glowing bubble */
        .badge-emoji-large {
          width: 92px;
          height: 92px;
          border-radius: 50%;
          display: grid;
          place-items: center;
          background: radial-gradient(circle at 50% 45%, rgba(0, 0, 0, 0.85) 0%, rgba(0, 0, 0, 0.7) 65%, rgba(0, 0, 0, 0.55) 100%);
          border: 1.5px solid rgba(78, 205, 196, 0.5);
          box-shadow:
            0 6px 18px rgba(0, 0, 0, 0.6), /* –æ—Ç—Ä—ã–≤ –æ—Ç –±–∞–Ω–Ω–µ—Ä–∞ */
            0 0 30px rgba(78, 205, 196, 0.7),
            0 0 55px rgba(78, 205, 196, 0.35),
            inset 0 0 18px rgba(78, 205, 196, 0.18);
          font-size: 4rem; /* emoji size */
          line-height: 1;
          animation: selectedGlow 2.6s ease-in-out infinite;
        }

        /* Category screen: remove rectangular glow on hover; keep only circular bubble glow */
        .category-screen .badge-card:hover { box-shadow: none; }
        .category-screen .badge-card { box-shadow: none; }

        .badge-category,
        .level-title {
          color: #4ecdc4;
          font-size: 1.1rem;
          margin: 0;
        }

        .badge-content,
        .level-content {
          margin-top: 1rem;
        }

        .badge-summary {
          display: grid;
          grid-template-columns: 1fr;
          gap: 0.8rem;
        }
        @media (min-width: 992px) {
          .badge-summary {
            grid-template-columns: 1.2fr 0.8fr;
            align-items: start;
          }
        }

        .badge-summary__block {
          background: rgba(255, 255, 255, 0.05);
          border: 1px solid rgba(255, 255, 255, 0.1);
          border-radius: 12px;
          padding: 0.8rem;
          height: auto;
          min-height: fit-content;
        }
        .badge-summary__block--tall {
          min-height: 460px;
        }
        .badge-summary__right { 
          display: grid; 
          gap: 0.8rem; 
          align-items: start;
          height: auto;
          min-height: 100%;
          overflow: visible;
        }

        .badge-summary__text {
          color: #ddd;
          margin: 0.2rem 0 0.6rem 0;
          line-height: 1.6;
          white-space: pre-line;
          max-height: none;
          overflow: visible;
        }

        .badge-summary__block h4 {
          font-size: 18px;
          font-weight: 600;
          color: #4ecdc4;
          margin: 24px 0 12px 0;
          padding: 0;
          border-bottom: 1px solid rgba(255, 255, 255, 0.1);
          padding-bottom: 8px;
        }

        .badge-evidence {
          margin-top: 16px;
          padding-top: 16px;
          border-top: 1px solid rgba(255, 255, 255, 0.2);
          color: #9ec;
          font-style: italic;
        }

        .criterion-text {
          margin-bottom: 8px;
        }

        .criterion-examples {
          margin-top: 8px;
          padding-left: 16px;
        }

        .criterion-example {
          margin: 4px 0;
          font-size: 0.95em;
          opacity: 0.9;
        }
        .badge-summary__block--tall .badge-summary__text {
          max-height: var(--info-max-em, 28em);
        }
        .badge-summary__block--tall-override .badge-summary__text {
          max-height: 32em;
        }

        .badge-meta {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
          gap: 0.6rem;
        }
        .badge-meta div {
          background: rgba(255, 255, 255, 0.06);
          border: 1px solid rgba(255, 255, 255, 0.1);
          border-radius: 8px;
          padding: 0.6rem 0.8rem;
          display: flex;
          align-items: center;
          justify-content: space-between;
        }
        .badge-meta div + div { margin-left: 10px; }
        .badge-meta div span { margin-right: 8px; }
        .badge-meta span { color: #9ec; }
        .badge-meta strong { color: #fff; font-weight: 600; }

        .badge-description,
        .level-description,
        .level-criteria {
          background: rgba(255, 255, 255, 0.05);
          border: 1px solid rgba(255, 255, 255, 0.1);
          border-radius: 10px;
          padding: 1.5rem;
          margin-bottom: 1.5rem;
        }

        .badge-description h3,
        .level-description h3,
        .level-criteria h3 {
          color: #4ecdc4;
          margin: 0 0 1rem 0;
        }

        .badge-description p,
        .level-description p,
        .level-criteria p {
          color: #ccc;
          line-height: 1.6;
          margin: 0;
        }

        .badge-levels h3 {
          color: #4ecdc4;
          margin: 0 0 1rem 0;
        }

        .levels-grid {
          display: grid;
          grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
          gap: 1rem;
        }

        /* –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å–µ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —É—Ä–æ–≤–Ω–µ–π, –∏–¥–µ–Ω—Ç–∏—á–Ω–∞—è —Å—Ç–∏–ª—é –±–∞–∑–æ–≤—ã—Ö –∑–Ω–∞—á–∫–æ–≤ */
        .levels-grid-compact {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
          gap: 12px;
          align-items: start;
        }
        .level-compact {
          min-height: 120px;
        }
        .levels-grid-compact .badge-card__title {
          display: block;
          -webkit-line-clamp: initial;
          -webkit-box-orient: initial;
          white-space: normal;
          overflow: visible;
          font-size: 13px;
        }

        .level-card {
          background: rgba(255, 255, 255, 0.1);
          border: 1px solid rgba(255, 255, 255, 0.2);
          border-radius: 10px;
          padding: 1rem;
          cursor: pointer;
          transition: all 0.3s ease;
        }

        .level-card__head { display: flex; align-items: center; gap: 0.6rem; }
        .level-card__emoji { font-size: 1.4rem; }
        .level-card__criteria { color: #ccc; margin: 0.4rem 0 0.2rem 0; white-space: pre-line; max-height: 10em; overflow: hidden; }
        .level-card__desc { color: #bbb; margin: 0; }
        .level-card__btn {
          margin-top: 0.8rem;
          background: rgba(78, 205, 196, 0.2);
          color: #4ecdc4;
          border: 1px solid rgba(78, 205, 196, 0.6);
          border-radius: 8px;
          padding: 0.4rem 0.8rem;
          cursor: pointer;
        }
        .level-card__btn:hover { background: rgba(78, 205, 196, 0.35); }

        .level-card:hover {
          background: rgba(255, 255, 255, 0.2);
          border-color: #4ecdc4;
        }

        .level-card h4 {
          color: #4ecdc4;
          margin: 0 0 0.5rem 0;
        }

        .level-card p {
          color: #ccc;
          margin: 0;
          font-size: 0.9rem;
        }

        /* Steps (right panel) */
        .badge-steps { background: rgba(255,255,255,0.06); border-radius: 16px; padding: 20px 24px; backdrop-filter: blur(6px); }
        .badge-steps__title { margin: 0 0 12px; font-size: 20px; font-weight: 700; }
        .badge-steps__list { margin: 0; padding-left: 0; list-style: none; }
        .badge-steps__list li { position: relative; padding-left: 28px; margin: 10px 0; white-space: pre-line; }
        .badge-steps__list li::before { content: '‚úÖ'; position: absolute; left: 0; top: 0; line-height: 1.1; }

        /* Bottom levels grid */
        .levels-grid-bottom { display:flex; justify-content:flex-end; gap:24px; margin-top:0; margin-right: 300px; flex-wrap:nowrap; align-items:center; position: relative; z-index: 9999; }
        /* Stick by top so it visually sits near the bottom of the viewport,
           but keep it aligned to the viewport's right edge regardless of inner container width */
        .levels-dock {
          position: relative; /* sits right under the block above */
          right: auto;
          bottom: auto;
          z-index: 9999;
          display: flex;
          justify-content: flex-end;
          margin-top: 0;
          margin-right: 300px;
        }
        @media (max-width: 900px) {
          .levels-dock { margin-top: 0; margin-right: 300px; }
        }
        .level-card-bottom { display: flex; flex-direction: column; align-items: center; padding: 0; border-radius: 0; background: transparent; backdrop-filter: none; min-height: auto; cursor: pointer; transition: all 0.3s ease; position: relative; z-index: 9999; }
        .level-card-bottom:hover { 
          transform: translateY(-6px) scale(1.05); 
          background: transparent;
          filter: brightness(1.1);
        }
        .level-card__icon { width: 100px; height: 100px; border-radius: 50%; display: grid; place-items: center; margin-bottom: 16px; background: rgba(0,0,0,0.45); border: 1px solid rgba(255,255,255,0.25); transition: all 0.3s ease; z-index: 9999; }
                 .level-card__title { text-align: center; font-size: 17px; line-height: 1.2; margin: 6px 0 4px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis; word-break: break-word; hyphens: auto; color: #4ecdc4; white-space: pre-line !important; }
        .level-card__subtitle { opacity: .85; font-size: 14px; text-align: center; color: #ccc; }
        
        .level-card-bottom:hover .level-card__icon {
          background: rgba(255, 255, 255, 0.15);
          border-color: #4ecdc4;
          box-shadow: 
            0 0 25px rgba(78, 205, 196, 0.5),
            0 0 40px rgba(78, 205, 196, 0.2),
            inset 0 0 15px rgba(78, 205, 196, 0.1);
          transform: scale(1.15);
        }
        .level-card-bottom.active .level-card__icon {
          background: rgba(78, 205, 196, 0.2);
          border-color: #4ecdc4;
          box-shadow: 
            0 0 25px rgba(78, 205, 196, 0.6),
            0 0 40px rgba(78, 205, 196, 0.3),
            inset 0 0 15px rgba(78, 205, 196, 0.1);
          animation: activeGlow 2s ease-in-out infinite;
        }
        
                 .level-bubble__emoji {
           font-size: 2.5rem;
           transition: all 0.3s ease;
         }
         
         .level-card-bottom:hover .level-bubble__emoji {
           transform: scale(1.25) rotate(3deg);
           filter: 
             drop-shadow(0 0 15px rgba(78, 205, 196, 0.7))
             drop-shadow(0 0 25px rgba(78, 205, 196, 0.4))
             brightness(1.1);
           animation: emojiFloat 2s ease-in-out infinite;
         }

                 @media (max-width: 768px) {
           .intro-content {
             max-width: 95vw;
             max-height: 95vh;
             padding: 1rem;
             margin: 1rem;
           }

           .intro-content h1 {
             font-size: 1.8rem;
           }

           .intro-content p {
             font-size: 0.9rem;
           }

           .philosophy-main {
             font-size: 1rem !important;
           }

           .point {
             flex-direction: column;
             text-align: center;
             padding: 0.6rem;
           }

           .point-icon {
             align-self: center;
             font-size: 1.2rem;
           }

           .philosophy-ending {
             font-size: 0.9rem !important;
             padding: 0.6rem;
           }

           .start-instruction {
             font-size: 0.9rem;
           }

           .start-button {
             padding: 0.6rem 1.2rem;
             font-size: 1rem;
           }

           .categories-grid,
           .badges-grid {
             grid-template-columns: 1fr;
           }

                       .header h1 {
              font-size: 1.8rem;
            }

           .badge-header,
           .level-header {
             flex-direction: column;
             text-align: center;
           }
         }
        /* –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤—Å–µ—Ö —ç–∫—Ä–∞–Ω–æ–≤ –∑–Ω–∞—á–∫–æ–≤ - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø—É–∑—ã—Ä–µ–π */
        .badge-screen .badge-summary__right {
          height: auto;
          min-height: 100%;
          overflow: visible;
          padding-bottom: 24px;
        }
        /* –ï–î–ò–ù–´–ï —Å—Ç–∏–ª–∏ –¥–ª—è —ç–∫—Ä–∞–Ω–æ–≤ –∑–Ω–∞—á–∫–∞ –∏ —É—Ä–æ–≤–Ω—è ‚Äî –ø—É–∑—ã—Ä–∏ —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ */
        .badge-screen .levels-grid-bottom,
        .badge-level-screen .levels-grid-bottom { 
          display:flex !important; 
          justify-content:flex-start !important; 
          gap:24px !important; 
          margin-top:0 !important; 
          margin-right: 0 !important; 
          flex-wrap:nowrap !important; 
          align-items:center !important; 
          position: relative !important;
        }
        /* –°–Ω–∏–º–∞–µ–º –æ—Ç—Å—Ç—É–ø-¬´–ø—Ä–∏—à–≤–∞—Ä—Ç–æ–≤–∫—É¬ª —Å–ø—Ä–∞–≤–∞ –¥–ª—è –¥–æ–∫–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —É—Ä–æ–≤–Ω—è —Ç–æ–∂–µ */
        .badge-level-screen .levels-dock { 
          margin-right: 0 !important; 
          justify-content: flex-start !important;
        }
        
        /* –¢–æ—á–µ—á–Ω—ã–µ –ø—Ä–∞–≤–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã 1.4 */
        .badge--group-1-4 .badge-summary__right {
          height: auto;
          min-height: 100%;
          overflow: visible;
          padding-bottom: 24px;
        }
        .badge-evidence { margin-top: 0.6rem; border-top: 1px dashed rgba(255,255,255,0.2); padding-top: 0.6rem; }

        /* –°—Ç–∏–ª–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤ */
        .header-content {
          display: flex;
          flex-direction: column;
          align-items: flex-start;
          gap: 0.5rem;
        }
        /* Center header texts on screens 2 and 3 */
        .categories-screen .header-content,
        .category-screen .header-content {
          align-items: center;
          text-align: center;
          width: 100%;
        }

        .hint-button, .material-button {
          background: rgba(0, 0, 0, 0.2);
          color: white;
          border: 2px solid rgba(255, 255, 255, 0.3);
          padding: 0.5rem 1rem;
          border-radius: 20px;
          font-size: 0.9rem;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.3s ease;
          box-shadow: 0 0 15px rgba(255, 255, 255, 0.2), inset 0 0 10px rgba(0, 0, 0, 0.3);
        }

        .hint-button:hover, .material-button:hover {
          transform: translateY(-2px);
          border-color: rgba(255, 255, 255, 0.8);
          background: rgba(0, 0, 0, 0.3);
          box-shadow: 0 0 25px rgba(255, 255, 255, 0.4), inset 0 0 15px rgba(0, 0, 0, 0.4);
        }

        .additional-materials-buttons {
          display: flex;
          gap: 0.5rem;
          flex-wrap: wrap;
          justify-content: center;
          margin-top: 0.5rem;
          max-width: 100%;
        }
        
        .material-button {
          font-size: 0.8rem;
          padding: 0.4rem 0.6rem;
          white-space: nowrap;
          min-width: fit-content;
          transition: all 0.3s ease;
          border: 1px solid rgba(78, 205, 196, 0.3);
          background: rgba(78, 205, 196, 0.1);
        }
        
        .material-button:hover {
          background: rgba(78, 205, 196, 0.2);
          border-color: #4ecdc4;
          box-shadow: 0 0 15px rgba(78, 205, 196, 0.4);
          transform: translateY(-2px) scale(1.05);
        }

        .introduction-screen, .additional-material-screen {
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          overflow-x: hidden;
          overflow-y: auto;
          padding: 1rem;
          background: 
            linear-gradient(135deg, rgba(12, 12, 12, 0.3) 0%, rgba(26, 26, 46, 0.3) 50%, rgba(22, 33, 62, 0.3) 100%),
            url('/—ç–∫—Ä–∞–Ω 3 —Ñ–æ–Ω.png') center center / cover no-repeat;
        }

        .introduction-content, .additional-material-content {
          max-width: 700px;
          margin: 0 auto;
          background: rgba(0, 0, 0, 0.4);
          padding: 1.5rem;
          border-radius: 15px;
          backdrop-filter: blur(15px);
          box-shadow: 0 10px 40px rgba(0, 0, 0, 0.4);
          border: 1px solid rgba(255, 215, 0, 0.3);
          position: relative;
          overflow: hidden;
        }

        .introduction-content::before, .additional-material-content::before {
          content: '';
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          height: 2px;
          background: linear-gradient(90deg, #FFD700, #FFA500, #FFD700);
          background-size: 200% 100%;
          animation: shimmer 3s ease-in-out infinite;
        }

        .introduction-text, .additional-material-text {
          color: #ffffff;
          line-height: 1.5;
          font-size: 0.95rem;
          position: relative;
          z-index: 1;
          white-space: pre-line;
        }

        /* –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ - —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ä–∞–∑—Ä—ã–≤—ã */
        .introduction-text *, .additional-material-text * {
          white-space: normal;
        }

        .introduction-text p, .additional-material-text p {
          white-space: pre-line;
        }

        /* –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç */
        .introduction-text, .additional-material-text {
          text-rendering: optimizeLegibility;
          font-variant-ligatures: none;
        }

        /* –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–±–µ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ */
        .introduction-text p, .additional-material-text p {
          text-align: justify;
          word-spacing: normal;
          letter-spacing: normal;
        }

        /* –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ */
        .introduction-text p:first-child, .additional-material-text p:first-child {
          margin-top: 0;
        }

        .introduction-text p:last-child, .additional-material-text p:last-child {
          margin-bottom: 0;
        }

        /* –û–±—Ä–∞–±–æ—Ç–∫–∞ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ª–∏—à–Ω–∏–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏ */
        .introduction-text br + br, .additional-material-text br + br {
          display: none;
        }

        .introduction-text p:empty, .additional-material-text p:empty {
          display: none;
        }

        /* –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Ä–∞–∑—Ä—ã–≤—ã –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏ */
        .introduction-text p + p, .additional-material-text p + p {
          margin-top: 0.1rem !important;
        }

        /* –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Ä–∞–∑—Ä—ã–≤—ã –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ */
        .introduction-text h1 + p, .additional-material-text h1 + p,
        .introduction-text h2 + p, .additional-material-text h2 + p,
        .introduction-text h3 + p, .additional-material-text h3 + p,
        .introduction-text h4 + p, .additional-material-text h4 + p {
          margin-top: 0.1rem !important;
        }

        /* –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Ä–∞–∑—Ä—ã–≤—ã –ø–µ—Ä–µ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ */
        .introduction-text p + h1, .additional-material-text p + h1,
        .introduction-text p + h2, .additional-material-text p + h2,
        .introduction-text p + h3, .additional-material-text p + h3,
        .introduction-text p + h4, .additional-material-text p + h4 {
          margin-top: 0.2rem !important;
        }

        /* –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–±–µ–ª–æ–≤ –≤ HTML */
        .introduction-text, .additional-material-text {
          font-kerning: normal;
          text-transform: none;
        }

        /* –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–±–∏—Ä–∞–Ω–∏–µ –≤—Å–µ—Ö –ª–∏—à–Ω–∏—Ö –æ—Ç—Å—Ç—É–ø–æ–≤ */
        .introduction-text *, .additional-material-text * {
          margin-top: 0 !important;
          margin-bottom: 0 !important;
        }

        /* –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã —Ç–æ–ª—å–∫–æ —Ç–∞–º, –≥–¥–µ –Ω—É–∂–Ω–æ */
        .introduction-text p, .additional-material-text p {
          margin-top: 0.1rem !important;
          margin-bottom: 0.1rem !important;
        }

        .introduction-text h1, .additional-material-text h1 {
          margin-top: 0 !important;
          margin-bottom: 0.1rem !important;
        }

        .introduction-text h2, .additional-material-text h2 {
          margin-top: 0.2rem !important;
          margin-bottom: 0.1rem !important;
        }

        .introduction-text h3, .additional-material-text h3 {
          margin-top: 0.2rem !important;
          margin-bottom: 0.1rem !important;
        }

        .introduction-text h4, .additional-material-text h4 {
          margin-top: 0.1rem !important;
          margin-bottom: 0.05rem !important;
        }


        /* –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º–∏ */
        .introduction-text h1 + p, .additional-material-text h1 + p,
        .introduction-text h2 + p, .additional-material-text h2 + p,
        .introduction-text h3 + p, .additional-material-text h3 + p,
        .introduction-text h4 + p, .additional-material-text h4 + p {
          margin-top: 0.1rem;
        }

        .introduction-text p + h1, .additional-material-text p + h1,
        .introduction-text p + h2, .additional-material-text p + h2,
        .introduction-text p + h3, .additional-material-text p + h3,
        .introduction-text p + h4, .additional-material-text p + h4 {
          margin-top: 0.2rem;
        }

        .introduction-text h1 + h2, .additional-material-text h1 + h2,
        .introduction-text h2 + h3, .additional-material-text h2 + h3,
        .introduction-text h3 + h4, .additional-material-text h3 + h4 {
          margin-top: 0.1rem;
        }

        .introduction-text h1, .additional-material-text h1 {
          color: #FFD700;
          font-size: 1.8rem;
          margin-top: 0;
          margin-bottom: 0.1rem;
          text-align: center;
          text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
          font-weight: bold;
        }

        .introduction-text h2, .additional-material-text h2 {
          color: #FFA500;
          font-size: 1.4rem;
          margin-top: 0.2rem;
          margin-bottom: 0.1rem;
          text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
          font-weight: 600;
        }

        .introduction-text h3, .additional-material-text h3 {
          color: #FFD700;
          font-size: 1.1rem;
          margin-top: 0.2rem;
          margin-bottom: 0.1rem;
          font-weight: 600;
        }

        .introduction-text h4, .additional-material-text h4 {
          color: #FFA500;
          font-size: 1rem;
          margin-top: 0.1rem;
          margin-bottom: 0.05rem;
          font-weight: 600;
        }

        .introduction-text p, .additional-material-text p {
          margin-top: 0.1rem;
          margin-bottom: 0.1rem;
          color: #e8e8e8;
          opacity: 0.95;
        }

        .introduction-text ul, .additional-material-text ul,
        .introduction-text ol, .additional-material-text ol {
          margin-top: 0.1rem;
          margin-bottom: 0.1rem;
          padding-left: 1.2rem;
        }

        .introduction-text li, .additional-material-text li {
          margin-top: 0.02rem;
          margin-bottom: 0.02rem;
          color: #e8e8e8;
          opacity: 0.95;
        }

        .introduction-text strong, .additional-material-text strong {
          color: #FFD700;
          font-weight: bold;
          opacity: 1;
        }

        .introduction-text em, .additional-material-text em {
          color: #FFA500;
          font-style: italic;
          opacity: 1;
        }

        .introduction-text pre, .additional-material-text pre {
          background: rgba(0, 0, 0, 0.6);
          padding: 0.6rem;
          border-radius: 8px;
          overflow-x: auto;
          margin-top: 0.1rem;
          margin-bottom: 0.1rem;
          border: 1px solid rgba(255, 215, 0, 0.2);
        }

        .introduction-text code, .additional-material-text code {
          background: rgba(0, 0, 0, 0.6);
          padding: 0.2rem 0.4rem;
          border-radius: 4px;
          font-family: 'Courier New', monospace;
          color: #FFD700;
          border: 1px solid rgba(255, 215, 0, 0.2);
        }

        .introduction-text blockquote, .additional-material-text blockquote {
          border-left: 3px solid #FFD700;
          padding-left: 0.6rem;
          margin-top: 0.1rem;
          margin-bottom: 0.1rem;
          background: rgba(255, 215, 0, 0.1);
          padding: 0.6rem;
          border-radius: 0 8px 8px 0;
        }

        /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
        @media (max-width: 768px) {
          .additional-materials-buttons {
            flex-direction: column;
            align-items: center;
          }

          .material-button {
            width: 100%;
            max-width: 200px;
          }

          .introduction-content, .additional-material-content {
            padding: 1.2rem;
            margin: 0.5rem;
            max-width: 95%;
          }

          .introduction-text h1, .additional-material-text h1 {
            font-size: 1.6rem;
          }

          .introduction-text h2, .additional-material-text h2 {
            font-size: 1.3rem;
          }

          .introduction-text h3, .additional-material-text h3 {
            font-size: 1.1rem;
          }

          .introduction-text h4, .additional-material-text h4 {
            font-size: 1rem;
          }
        }

        /* Session Info Styles */
        .session-info {
          background: 
            linear-gradient(rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.3)),
            url('/pictures/Stan_Pol__beutiful_camera__vector_logo_e16e2508-69e8-4bf6-9cdf-8b7012558c5e.png') center 10%/50% no-repeat;
          border: 2px solid rgba(255, 215, 0, 0.6);
          border-radius: 15px;
          padding: 15px;
          margin: 15px 0;
          box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
          backdrop-filter: blur(5px);
          transition: all 0.3s ease;
          position: relative;
          overflow: hidden;
        }

        .session-info::before {
          content: '';
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          height: 3px;
          background: linear-gradient(90deg, #FFD700, #FFA500, #FFD700);
          background-size: 200% 100%;
          animation: shimmer 3s ease-in-out infinite;
        }

        @keyframes shimmer {
          0%, 100% { background-position: 200% 0; }
          50% { background-position: -200% 0; }
        }

        .session-info.clickable:hover {
          transform: translateY(-5px);
          box-shadow: 0 15px 40px rgba(255, 215, 0, 0.3);
          border-color: rgba(255, 215, 0, 0.9);
          background: 
            linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4)),
            url('/pictures/Stan_Pol__beutiful_camera__vector_logo_e16e2508-69e8-4bf6-9cdf-8b7012558c5e.png') center 10%/50% no-repeat;
        }

        .session-info h4 {
          color: #FFD700;
          margin-bottom: 10px;
          font-size: 16px;
          font-weight: bold;
          text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
        }

        .session-info p {
          color: #ffffff;
          margin-bottom: 8px;
          font-size: 13px;
          line-height: 1.4;
        }

        .session-info ul {
          color: #ffffff;
          margin: 10px 0;
          padding-left: 20px;
        }

        .session-info li {
          margin-bottom: 5px;
          font-size: 13px;
          line-height: 1.3;
        }

        .session-info em {
          color: #FFD700;
          font-weight: bold;
          text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
        }

        .session-image {
          width: 100%;
          max-width: 300px;
          height: auto;
          border-radius: 10px;
          margin-bottom: 12px;
          box-shadow: 0 6px 15px rgba(0, 0, 0, 0.3);
          transition: all 0.3s ease;
        }

        .session-info:hover .session-image {
          transform: scale(1.02);
          box-shadow: 0 12px 25px rgba(255, 215, 0, 0.2);
        }

        /* Registration Form Styles */
        .registration-form-screen {
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          overflow-x: hidden;
          overflow-y: auto;
          padding: 1rem;
          background: 
            linear-gradient(135deg, rgba(12, 12, 12, 0.3) 0%, rgba(26, 26, 46, 0.3) 50%, rgba(22, 33, 62, 0.3) 100%),
            url('/—ç–∫—Ä–∞–Ω 3 —Ñ–æ–Ω.png') center center / cover no-repeat;
        }

        .registration-form-content {
          max-width: 500px;
          margin: 0 auto;
          padding: 1.5rem 0;
        }

        .form-container {
          background: rgba(0, 0, 0, 0.4);
          padding: 1.5rem;
          border-radius: 15px;
          backdrop-filter: blur(15px);
          box-shadow: 0 10px 40px rgba(0, 0, 0, 0.4);
          border: 1px solid rgba(255, 215, 0, 0.5);
          position: relative;
          overflow: hidden;
        }

        .form-container::before {
          content: '';
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          height: 2px;
          background: linear-gradient(90deg, #FFD700, #FFA500, #FFD700);
          background-size: 200% 100%;
          animation: shimmer 3s ease-in-out infinite;
        }

        .form-container h2 {
          color: #FFD700;
          font-size: 22px;
          margin-bottom: 8px;
          text-align: center;
          text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
          font-weight: bold;
        }

        .form-container p {
          color: #ffffff;
          text-align: center;
          margin-bottom: 25px;
          font-size: 14px;
          opacity: 0.8;
          line-height: 1.4;
        }

        .form-group {
          margin-bottom: 16px;
        }

        .form-group label {
          display: block;
          color: #FFD700;
          font-size: 14px;
          font-weight: bold;
          margin-bottom: 6px;
          text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
        }

        .form-group input,
        .form-group textarea {
          width: 100%;
          padding: 10px 14px;
          border: 1px solid rgba(255, 215, 0, 0.4);
          border-radius: 8px;
          background: rgba(0, 0, 0, 0.3);
          color: #ffffff;
          font-size: 14px;
          transition: all 0.3s ease;
          box-sizing: border-box;
        }

        .form-group input:focus,
        .form-group textarea:focus {
          outline: none;
          border-color: rgba(255, 215, 0, 0.8);
          box-shadow: 0 0 10px rgba(255, 215, 0, 0.3);
          background: rgba(0, 0, 0, 0.5);
        }

        .form-group input::placeholder,
        .form-group textarea::placeholder {
          color: rgba(255, 255, 255, 0.4);
        }

        .form-group textarea {
          resize: vertical;
          min-height: 70px;
        }

        .submit-button {
          width: 100%;
          padding: 12px 20px;
          background: linear-gradient(135deg, #FFD700 0%, #FFA500 100%);
          color: #2c3e50;
          border: none;
          border-radius: 10px;
          font-size: 16px;
          font-weight: bold;
          cursor: pointer;
          transition: all 0.3s ease;
          box-shadow: 0 6px 20px rgba(255, 215, 0, 0.3);
          margin-top: 15px;
        }

        .submit-button:hover:not(:disabled) {
          transform: translateY(-2px);
          box-shadow: 0 8px 25px rgba(255, 215, 0, 0.4);
          background: linear-gradient(135deg, #FFE55C 0%, #FFB84D 100%);
        }

        .submit-button:disabled {
          opacity: 0.5;
          cursor: not-allowed;
          transform: none;
        }

        /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
        @media (max-width: 768px) {
          .registration-form-content {
            padding: 1rem 0;
            max-width: 90%;
          }

          .form-container {
            padding: 1.2rem;
            margin: 0 0.5rem;
          }

          .form-container h2 {
            font-size: 18px;
          }

          .form-container p {
            font-size: 13px;
          }

          .form-group input,
          .form-group textarea {
            font-size: 16px; /* –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∑—É–º –Ω–∞ iOS */
            padding: 12px 14px;
          }

          .submit-button {
            padding: 14px 20px;
            font-size: 16px;
          }
        }
        /* Override: banners */
        .header { 
          background: 
            linear-gradient(135deg, rgba(0, 0, 0, 0.3) 0%, rgba(0, 0, 0, 0.2) 100%),
            url('/pattern_stickers.jpg') center top / cover no-repeat !important;
        }
        .category-screen .header { 
          background: 
            linear-gradient(135deg, rgba(0, 0, 0, 0.3) 0%, rgba(0, 0, 0, 0.2) 100%),
            url('/badges_photo.jpg') center 40% / cover no-repeat !important;
        }
        .badge-screen .header { 
          background: 
            linear-gradient(135deg, rgba(0, 0, 0, 0.3) 0%, rgba(0, 0, 0, 0.2) 100%),
            url('/pattern_stickers.jpg') center top / cover no-repeat !important;
        }
        /* Unify header heights between categories (screen 2) and category (screen 3) */
        .categories-screen .header,
        .category-screen .header {
          min-height: 140px;
          display: block;
          padding: 0.6rem 0.8rem;
        }
        /* Center content within header on screens 2 and 3 */
        .categories-screen .header,
        .category-screen .header {
          display: flex;
          align-items: center;
          justify-content: center;
          position: relative;
        }
        .categories-screen .header .back-button,
        .category-screen .header .back-button {
          position: absolute;
          left: 8px;
          top: 8px;
          margin-bottom: 0;
          z-index: 5;
          pointer-events: auto;
        }
        /* Normalize About Camp banner and center content */
        .about-camp-screen .header {
          background:
            linear-gradient(135deg, rgba(0, 0, 0, 0.3) 0%, rgba(0, 0, 0, 0.2) 100%),
            url('/pattern_stickers.jpg') center top / cover no-repeat !important;
          min-height: 140px;
          padding: 0.6rem 0.8rem;
          display: flex;
          align-items: center;
          justify-content: center;
          position: relative;
        }
        .about-camp-screen .header .back-button {
          position: absolute;
          left: 8px;
          top: 8px;
          margin-bottom: 0;
          z-index: 5;
          pointer-events: auto;
        }
        /* Center header content on other screens as well */
        .introduction-screen .header,
        .additional-material-screen .header,
        .registration-form-screen .header,
        .badge-screen .header,
        .badge-level-screen .header {
          display: flex;
          align-items: center;
          justify-content: center;
          position: relative;
          padding: 0.6rem 0.8rem;
          min-height: 140px; /* align with other screens */
        }
        .introduction-screen .header .back-button,
        .additional-material-screen .header .back-button,
        .registration-form-screen .header .back-button,
        .badge-screen .header .back-button,
        .badge-level-screen .header .back-button {
          position: absolute;
          left: 8px;
          top: 8px;
          margin-bottom: 0;
          z-index: 5;
          pointer-events: auto;
        }
      `}</style>
    </div>
  );
};

export default App;
