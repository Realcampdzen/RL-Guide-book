#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ai-data/ —Å –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª–µ–º.txt
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è, —É–¥–∞–ª—è–µ—Ç –≤—ã–¥—É–º–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–∫–∏, –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ
"""

import json
import os
import re
import shutil
from pathlib import Path
from typing import Dict, List, Any, Tuple

def load_guide_data() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è.txt –∏ –ø–∞—Ä—Å–∏—Ç –∏—Ö"""
    guide_data = {}
    
    with open('–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å.txt', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ò—â–µ–º –≤—Å–µ –∑–Ω–∞—á–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "X.Y.Z. –£—Ä–æ–≤–µ–Ω—å ‚Äì emoji ¬´–ù–∞–∑–≤–∞–Ω–∏–µ¬ª"
    badge_patterns = [
        r'(\d+\.\d+(?:\.\d+)?)\.\s*(?:–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å|–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å|–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å|–ó–Ω–∞—á–æ–∫)?\s*‚Äì\s*([^\s]+)\s*¬´([^¬ª]+)¬ª',
        r'(\d+\.\d+(?:\.\d+)?)\.\s*([^\s]+)\s*¬´([^¬ª]+)¬ª',
        r'(\d+\.\d+(?:\.\d+)?)\s*–ó–Ω–∞—á–æ–∫\s*([^\s]+)\s*¬´([^¬ª]+)¬ª'
    ]
    
    for pattern in badge_patterns:
        badges = re.findall(pattern, content)
        for badge_id, emoji, title in badges:
            guide_data[badge_id] = {
                'id': badge_id,
                'title': title,
                'emoji': emoji
            }
    
    # –ò—â–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –∑–Ω–∞—á–∫–æ–≤
    detailed_pattern = r'(\d+\.\d+(?:\.\d+)?)\s*–ó–Ω–∞—á–æ–∫\s*([^\s]+)\s*¬´([^¬ª]+)¬ª\s*\n(.*?)(?=\n\d+\.\d+|\n\n|$)'
    detailed_sections = re.findall(detailed_pattern, content, re.DOTALL)
    
    for badge_id, emoji, title, description in detailed_sections:
        if badge_id not in guide_data:
            guide_data[badge_id] = {}
        
        guide_data[badge_id].update({
            'id': badge_id,
            'title': title,
            'emoji': emoji,
            'description': description.strip()
        })
    
    return guide_data

def load_ai_data() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ ai-data/"""
    ai_data = {}
    
    ai_data_dir = Path('ai-data')
    for category_dir in ai_data_dir.iterdir():
        if not category_dir.is_dir():
            continue
            
        for json_file in category_dir.glob('*.json'):
            if json_file.name == 'index.json':
                continue
                
            with open(json_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                ai_data[data['id']] = data
    
    return ai_data

def create_backup():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é ai-data/"""
    if Path('ai-data').exists():
        if Path('ai-data-backup').exists():
            shutil.rmtree('ai-data-backup')
        shutil.copytree('ai-data', 'ai-data-backup')
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è ai-data-backup/")

def fix_ai_data(guide_data: Dict[str, Any], ai_data: Dict[str, Any]):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç ai-data –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è"""
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    create_backup()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    stats = {
        'fixed_titles': 0,
        'fixed_emojis': 0,
        'removed_fake': 0,
        'added_missing': 0
    }
    
    # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–∫–∏
    for badge_id, ai_badge in ai_data.items():
        if badge_id in guide_data:
            guide_badge = guide_data[badge_id]
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            if ai_badge.get('title') != guide_badge.get('title'):
                print(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ {badge_id}: '{ai_badge.get('title')}' ‚Üí '{guide_badge.get('title')}'")
                ai_badge['title'] = guide_badge['title']
                stats['fixed_titles'] += 1
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏
            if ai_badge.get('emoji') != guide_badge.get('emoji'):
                print(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ {badge_id}: '{ai_badge.get('emoji')}' ‚Üí '{guide_badge.get('emoji')}'")
                ai_badge['emoji'] = guide_badge['emoji']
                stats['fixed_emojis'] += 1
    
    # 2. –£–¥–∞–ª—è–µ–º –≤—ã–¥—É–º–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–∫–∏ (–∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª–µ)
    fake_badges = []
    for badge_id, ai_badge in ai_data.items():
        if badge_id not in guide_data:
            fake_badges.append(badge_id)
            print(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤—ã–¥—É–º–∞–Ω–Ω—ã–π –∑–Ω–∞—á–æ–∫ {badge_id}: {ai_badge.get('title', 'Unknown')}")
            stats['removed_fake'] += 1
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤
    for badge_id in fake_badges:
        ai_badge = ai_data[badge_id]
        category_id = ai_badge.get('categoryId', badge_id.split('.')[0])
        file_path = Path(f'ai-data/category-{category_id}/{badge_id}.json')
        if file_path.exists():
            file_path.unlink()
        del ai_data[badge_id]
    
    # 3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–Ω–∞—á–∫–∏ (—Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
    for badge_id, guide_badge in guide_data.items():
        if badge_id not in ai_data:
            print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –∑–Ω–∞—á–æ–∫ {badge_id}: {guide_badge.get('title', 'Unknown')}")
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            category_id = badge_id.split('.')[0]
            new_badge = {
                "id": badge_id,
                "title": guide_badge.get('title', ''),
                "emoji": guide_badge.get('emoji', ''),
                "categoryId": category_id,
                "description": guide_badge.get('description', ''),
                "levels": [
                    {
                        "id": badge_id,
                        "level": "–û–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π",
                        "title": guide_badge.get('title', ''),
                        "emoji": guide_badge.get('emoji', ''),
                        "criteria": "–ö—Ä–∏—Ç–µ—Ä–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è",
                        "confirmation": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è"
                    }
                ],
                "skillTips": "–°–æ–≤–µ—Ç—ã –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –Ω–∞–≤—ã–∫–∞ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã",
                "importance": "–í–∞–∂–Ω–æ—Å—Ç—å –∑–Ω–∞—á–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞"
            }
            
            ai_data[badge_id] = new_badge
            stats['added_missing'] += 1
    
    return stats

def save_ai_data(ai_data: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ ai-data/"""
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–Ω–∞—á–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {}
    for badge_id, badge_data in ai_data.items():
        category_id = badge_data.get('categoryId', badge_id.split('.')[0])
        if category_id not in categories:
            categories[category_id] = []
        categories[category_id].append(badge_data)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
    for category_id, badges in categories.items():
        category_dir = Path(f'ai-data/category-{category_id}')
        category_dir.mkdir(parents=True, exist_ok=True)
        
        for badge in badges:
            badge_id = badge['id']
            file_path = category_dir / f'{badge_id}.json'
            
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(badge, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(ai_data)} –∑–Ω–∞—á–∫–æ–≤ –≤ ai-data/")

def main():
    print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ai-data/ —Å –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª–µ–º.txt...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("üìö –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è.txt...")
    guide_data = load_guide_data()
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(guide_data)} –∑–Ω–∞—á–∫–æ–≤ –≤ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª–µ")
    
    print("ü§ñ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ ai-data/...")
    ai_data = load_ai_data()
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(ai_data)} –∑–Ω–∞—á–∫–æ–≤ –≤ ai-data")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º ai-data
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ai-data...")
    stats = fix_ai_data(guide_data, ai_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    save_ai_data(ai_data)
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n" + "="*60)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ó–ú–ï–ù–ï–ù–ò–ô")
    print("="*60)
    print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–π: {stats['fixed_titles']}")
    print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —ç–º–æ–¥–∑–∏: {stats['fixed_emojis']}")
    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤: {stats['removed_fake']}")
    print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∑–Ω–∞—á–∫–æ–≤: {stats['added_missing']}")
    print(f"üìà –ò—Ç–æ–≥–æ –∑–Ω–∞—á–∫–æ–≤ –≤ ai-data: {len(ai_data)}")
    
    print("\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ ai-data-backup/")

if __name__ == "__main__":
    main()
