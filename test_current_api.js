const https = require('https');

async function testCurrentAPI() {
    const baseUrl = 'https://backend-fq5f9bm5c-nomorningst-2550s-projects.vercel.app';
    
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π Vercel API...');
    console.log('Base URL:', baseUrl);
    
    // –¢–µ—Å—Ç 1: –û—Å–Ω–æ–≤–Ω–æ–π chat endpoint
    console.log('\nüì° –¢–µ—Å—Ç 1: Chat API');
    try {
        const chatResponse = await fetch(`${baseUrl}/api/chat`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                message: '–ü—Ä–∏–≤–µ—Ç! –°–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–Ω–∞—á–∫–æ–≤ —É –≤–∞—Å –µ—Å—Ç—å?',
                context: {}
            })
        });
        
        const chatData = await chatResponse.json();
        console.log('Chat API –æ—Ç–≤–µ—Ç:', JSON.stringify(chatData, null, 2));
        
        if (chatData.response) {
            console.log('‚úÖ Chat API —Ä–∞–±–æ—Ç–∞–µ—Ç');
        } else {
            console.log('‚ùå Chat API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        }
    } catch (error) {
        console.log('‚ùå Chat API –æ—à–∏–±–∫–∞:', error.message);
    }
    
    // –¢–µ—Å—Ç 2: Debug endpoint
    console.log('\nüì° –¢–µ—Å—Ç 2: Debug API');
    try {
        const debugResponse = await fetch(`${baseUrl}/api/debug`);
        const debugData = await debugResponse.json();
        console.log('Debug API –æ—Ç–≤–µ—Ç:', JSON.stringify(debugData, null, 2));
    } catch (error) {
        console.log('‚ùå Debug API –æ—à–∏–±–∫–∞:', error.message);
    }
    
    // –¢–µ—Å—Ç 3: Test-data endpoint
    console.log('\nüì° –¢–µ—Å—Ç 3: Test-data API');
    try {
        const testResponse = await fetch(`${baseUrl}/api/test-data`);
        const testData = await testResponse.json();
        console.log('Test-data API –æ—Ç–≤–µ—Ç:', JSON.stringify(testData, null, 2));
        
        if (testData.status === 'success' && testData.data) {
            console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${testData.data.totalCategories} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, ${testData.data.totalBadges} –∑–Ω–∞—á–∫–æ–≤`);
        } else {
            console.log('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
        }
    } catch (error) {
        console.log('‚ùå Test-data API –æ—à–∏–±–∫–∞:', error.message);
    }
}

testCurrentAPI();
