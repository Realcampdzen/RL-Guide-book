#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ai-data
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—é
"""

import json
import os
import re
from pathlib import Path

def load_guidebook():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å –∏ –ø–∞—Ä—Å–∏—Ç –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
    guidebook_path = "–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å.txt"
    
    if not os.path.exists(guidebook_path):
        print(f"‚ùå –§–∞–π–ª {guidebook_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    
    with open(guidebook_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    return content

def parse_badge_from_guidebook(content, badge_id):
    """–ü–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–Ω–∞—á–∫–µ –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è"""
    # –ò—â–µ–º —Å–µ–∫—Ü–∏—é –∑–Ω–∞—á–∫–∞ –ø–æ ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1.1 –ó–Ω–∞—á–æ–∫")
    pattern = rf"{badge_id}\s+–ó–Ω–∞—á–æ–∫\s+([^\s]+)\s+¬´([^¬ª]+)¬ª"
    match = re.search(pattern, content)
    
    if not match:
        return None
    
    emoji = match.group(1)
    title = match.group(2)
    
    # –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–Ω–∞—á–∫–∞
    description_pattern = rf"{badge_id}\s+–ó–Ω–∞—á–æ–∫\s+[^\s]+\s+¬´[^¬ª]+¬ª\.\s*([^üí°\n]+?)(?=\n\n|\nüí°|\n\d+\.\d+\.\d+\.|$)"
    desc_match = re.search(description_pattern, content, re.DOTALL)
    description = desc_match.group(1).strip() if desc_match else ""
    
    # –ò—â–µ–º –ø—Ä–∏–º–µ—Ä—ã
    examples_pattern = rf"üí°\s+–ü—Ä–∏–º–µ—Ä—ã[^:]*:\s*([^1\.\d]+?)(?=\n\d+\.\d+\.\d+\.|$)"
    examples_match = re.search(examples_pattern, content, re.DOTALL)
    examples = examples_match.group(1).strip() if examples_match else ""
    
    # –ò—â–µ–º —É—Ä–æ–≤–Ω–∏
    levels = []
    level_pattern = rf"{badge_id}\.(\d+)\s*\.\s*([^‚Äì]+)\s*‚Äì\s*([^\s]+)\s*¬´([^¬ª]+)¬ª"
    level_matches = re.finditer(level_pattern, content)
    
    for match in level_matches:
        level_num = match.group(1)
        level_name = match.group(2).strip()
        level_emoji = match.group(3)
        level_title = match.group(4)
        
        levels.append({
            'id': f"{badge_id}.{level_num}",
            'level': level_name,
            'title': level_title,
            'emoji': level_emoji
        })
    
    return {
        'id': badge_id,
        'title': title,
        'emoji': emoji,
        'description': description,
        'examples': examples,
        'levels': levels
    }

def validate_badge_file(file_path, guidebook_content):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª –∑–Ω–∞—á–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—é"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            badge_data = json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        return False
    
    badge_id = badge_data.get('id', '')
    guidebook_badge = parse_badge_from_guidebook(guidebook_content, badge_id)
    
    if not guidebook_badge:
        print(f"‚ö†Ô∏è  –ó–Ω–∞—á–æ–∫ {badge_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª–µ")
        return False
    
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    if badge_data.get('title') != guidebook_badge['title']:
        issues.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ: '{badge_data.get('title')}' != '{guidebook_badge['title']}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–æ–¥–∑–∏
    if badge_data.get('emoji') != guidebook_badge['emoji']:
        issues.append(f"–≠–º–æ–¥–∑–∏: '{badge_data.get('emoji')}' != '{guidebook_badge['emoji']}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    description = badge_data.get('description', '')
    if not description.startswith('–¶–µ–ª—å:'):
        issues.append("–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '–¶–µ–ª—å:'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–Ω–∏
    ai_levels = badge_data.get('levels', [])
    guidebook_levels = guidebook_badge['levels']
    
    if len(ai_levels) != len(guidebook_levels):
        issues.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π: {len(ai_levels)} != {len(guidebook_levels)}")
    
    for i, (ai_level, guide_level) in enumerate(zip(ai_levels, guidebook_levels)):
        if ai_level.get('title') != guide_level['title']:
            issues.append(f"–£—Ä–æ–≤–µ–Ω—å {i+1} –Ω–∞–∑–≤–∞–Ω–∏–µ: '{ai_level.get('title')}' != '{guide_level['title']}'")
        
        if ai_level.get('emoji') != guide_level['emoji']:
            issues.append(f"–£—Ä–æ–≤–µ–Ω—å {i+1} —ç–º–æ–¥–∑–∏: '{ai_level.get('emoji')}' != '{guide_level['emoji']}'")
    
    if issues:
        print(f"‚ùå {badge_id}: {', '.join(issues)}")
        return False
    else:
        print(f"‚úÖ {badge_id}: OK")
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è ai-data –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—é...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å
    guidebook_content = load_guidebook()
    if not guidebook_content:
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –∑–Ω–∞—á–∫–æ–≤
    ai_data_path = Path("ai-data")
    badge_files = list(ai_data_path.glob("category-*/[0-9]*.json"))
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(badge_files)} —Ñ–∞–π–ª–æ–≤ –∑–Ω–∞—á–∫–æ–≤")
    
    valid_count = 0
    total_count = len(badge_files)
    
    for file_path in sorted(badge_files):
        if validate_badge_file(file_path, guidebook_content):
            valid_count += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {valid_count}/{total_count}")
    print(f"‚ùå –° –æ—à–∏–±–∫–∞–º–∏: {total_count - valid_count}/{total_count}")
    
    if valid_count == total_count:
        print("üéâ –í—Å–µ –∑–Ω–∞—á–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—é!")
    else:
        print("‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤")

if __name__ == "__main__":
    main()
