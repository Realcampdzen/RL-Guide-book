#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ ai-data
"""

import json
from pathlib import Path

def update_category_indexes():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç index.json —Ñ–∞–π–ª—ã –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    ai_data_path = Path("ai-data")
    updated_categories = []
    
    for category_dir in ai_data_path.glob("category-*"):
        if not category_dir.is_dir():
            continue
            
        category_id = category_dir.name.replace("category-", "")
        index_file = category_dir / "index.json"
        
        if not index_file.exists():
            print(f"‚ö†Ô∏è  {category_dir.name}: index.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
        with open(index_file, 'r', encoding='utf-8') as f:
            index_data = json.load(f)
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –∑–Ω–∞—á–∫–æ–≤
        badge_files = [f for f in category_dir.glob("*.json") if f.name != "index.json"]
        badge_ids = [f.stem for f in badge_files]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        index_data['badges'] = len(badge_ids)
        index_data['files'] = ["index.json"] + [f"{bid}.json" for bid in sorted(badge_ids)]
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏
        total_levels = 0
        badges_data = []
        
        for badge_file in badge_files:
            try:
                with open(badge_file, 'r', encoding='utf-8') as f:
                    badge_data = json.load(f)
                
                level_count = len(badge_data.get('levels', []))
                total_levels += level_count
                
                badges_data.append({
                    'id': badge_data['id'],
                    'title': badge_data['title'],
                    'emoji': badge_data['emoji'],
                    'levels': [level['level'] for level in badge_data.get('levels', [])]
                })
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {badge_file}: {e}")
        
        index_data['levels'] = total_levels
        index_data['badgesData'] = badges_data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        with open(index_file, 'w', encoding='utf-8') as f:
            json.dump(index_data, f, ensure_ascii=False, indent=2)
        
        updated_categories.append({
            'id': category_id,
            'title': index_data.get('title', f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_id}'),
            'emoji': index_data.get('emoji', 'üìÅ'),
            'path': f"category-{category_id}/",
            'badges': len(badge_ids),
            'levels': total_levels,
            'status': 'COMPLETED',
            'files': index_data['files']
        })
        
        print(f"‚úÖ {category_dir.name}: {len(badge_ids)} –∑–Ω–∞—á–∫–æ–≤, {total_levels} —É—Ä–æ–≤–Ω–µ–π")
    
    return updated_categories

def update_master_index(categories):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç MASTER_INDEX.json"""
    master_index_file = Path("ai-data/MASTER_INDEX.json")
    
    if not master_index_file.exists():
        print("‚ùå MASTER_INDEX.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    with open(master_index_file, 'r', encoding='utf-8') as f:
        master_data = json.load(f)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_badges = sum(cat['badges'] for cat in categories)
    total_levels = sum(cat['levels'] for cat in categories)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    master_data['totalCategories'] = len(categories)
    master_data['totalBadges'] = total_badges
    master_data['totalLevels'] = total_levels
    master_data['categories'] = categories
    master_data['progress'] = {
        'completed': total_badges,
        'remaining': 0,
        'percentage': 100
    }
    master_data['notes'] = f"–ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª—ë–Ω! –°–æ–∑–¥–∞–Ω–æ {total_badges} –±–∞–∑–æ–≤—ã—Ö –∑–Ω–∞—á–∫–æ–≤ –∏ {total_levels} –æ–±—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π. –í—Å–µ –∑–Ω–∞—á–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—é."
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    with open(master_index_file, 'w', encoding='utf-8') as f:
        json.dump(master_data, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìä –û–±–Ω–æ–≤–ª–µ–Ω MASTER_INDEX.json:")
    print(f"   üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
    print(f"   üéØ –ó–Ω–∞—á–∫–æ–≤: {total_badges}")
    print(f"   üìà –£—Ä–æ–≤–Ω–µ–π: {total_levels}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ ai-data...")
    
    categories = update_category_indexes()
    update_master_index(categories)
    
    print(f"\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
