// –ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤ –¥–ª—è Vercel
import fs from 'fs';
import path from 'path';

// –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
let badgeDataCache = null;
let categoriesCache = new Map();
let badgesCache = new Map();

export class DataLoader {
  constructor() {
    // –í Vercel —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    this.dataPath = path.join(process.cwd(), 'perfect_parsed_data.json');
    console.log('üìÅ –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º:', this.dataPath);
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–∫–æ–≤
  loadAllData() {
    if (badgeDataCache) {
      console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      return badgeDataCache;
    }

    try {
      console.log('üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞:', this.dataPath);
      const data = JSON.parse(fs.readFileSync(this.dataPath, 'utf8'));
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
        categories: data.categories?.length || 0,
        badges: data.badges?.length || 0
      });
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const categories = data.categories.map(catInfo => {
        const category = {
          id: catInfo.id,
          title: catInfo.title,
          emoji: this.getCategoryEmoji(catInfo.id),
          path: `category-${catInfo.id}`,
          badges: [],
          introduction: null,
          philosophy: null
        };
        
        categoriesCache.set(category.id, category);
        return category;
      });

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–Ω–∞—á–∫–∏
      const badgeGroups = new Map();
      
      data.badges.forEach(badgeData => {
        const badgeId = badgeData.id;
        const baseId = badgeId.includes('.') ? badgeId.split('.').slice(0, 2).join('.') : badgeId;
        
        if (!badgeGroups.has(baseId)) {
          badgeGroups.set(baseId, []);
        }
        badgeGroups.get(baseId).push(badgeData);
      });

      // –°–æ–∑–¥–∞–µ–º –∑–Ω–∞—á–∫–∏ —Å —É—Ä–æ–≤–Ω—è–º–∏
      badgeGroups.forEach((badgeGroup, baseId) => {
        const mainBadge = badgeGroup[0];
        
        // –°–æ–∑–¥–∞–µ–º —É—Ä–æ–≤–Ω–∏
        const levels = badgeGroup.map(levelData => ({
          id: levelData.id,
          level: levelData.level || "–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å",
          title: levelData.title,
          emoji: levelData.emoji,
          criteria: levelData.criteria || "",
          confirmation: levelData.confirmation || ""
        }));

        // –°–æ–∑–¥–∞–µ–º –∑–Ω–∞—á–æ–∫
        const badge = {
          id: baseId,
          title: mainBadge.title,
          emoji: mainBadge.emoji,
          categoryId: mainBadge.category_id,
          description: mainBadge.description || "",
          nameExplanation: mainBadge.nameExplanation || null,
          skillTips: mainBadge.skillTips || null,
          examples: mainBadge.examples || null,
          philosophy: mainBadge.philosophy || null,
          howToBecome: mainBadge.howToBecome || null,
          levels: levels
        };

        badgesCache.set(badge.id, badge);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–æ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const category = categoriesCache.get(badge.categoryId);
        if (category) {
          category.badges.push(badge);
        }
      });

      badgeDataCache = {
        project: "–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å",
        version: "1.0",
        totalCategories: categories.length,
        totalBadges: badgesCache.size,
        categories: categories
      };

      return badgeDataCache;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
      console.error('üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:', this.dataPath);
      console.error('üìÇ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', fs.existsSync(this.dataPath));
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –∫—Ä–∞—à–∞
      return { categories: [], badges: [] };
    }
  }

  // –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
  getCategory(categoryId) {
    if (!badgeDataCache) {
      this.loadAllData();
    }
    return categoriesCache.get(categoryId);
  }

  // –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–æ–∫ –ø–æ ID
  getBadge(badgeId) {
    if (!badgeDataCache) {
      this.loadAllData();
    }
    return badgesCache.get(badgeId);
  }

  // –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  getAllCategories() {
    if (!badgeDataCache) {
      this.loadAllData();
    }
    return badgeDataCache.categories;
  }

  // –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–Ω–∞—á–∫–∏
  getAllBadges() {
    if (!badgeDataCache) {
      this.loadAllData();
    }
    return Array.from(badgesCache.values());
  }

  // –ü–æ–∏—Å–∫ –∑–Ω–∞—á–∫–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
  searchBadges(query) {
    if (!badgeDataCache) {
      this.loadAllData();
    }
    
    const queryLower = query.toLowerCase();
    return Array.from(badgesCache.values()).filter(badge => 
      badge.title.toLowerCase().includes(queryLower) ||
      badge.description.toLowerCase().includes(queryLower)
    );
  }

  // –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  getCategoryEmoji(categoryId) {
    const emojis = {
      '1': '‚≠ê',
      '2': 'üåü', 
      '3': 'üì±',
      '4': 'üèï',
      '5': 'üë•',
      '6': 'üéµ',
      '7': 'üé®',
      '8': 'üöÄ',
      '9': 'üí™',
      '10': 'üèÅ',
      '11': 'üßò',
      '12': 'ü§ñ',
      '13': 'üí™',
      '14': 'üîç'
    };
    return emojis[categoryId] || 'üìã';
  }

  // –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  getStats() {
    if (!badgeDataCache) {
      this.loadAllData();
    }
    
    return {
      totalCategories: badgeDataCache.totalCategories,
      totalBadges: badgeDataCache.totalBadges,
      totalLevels: Array.from(badgesCache.values()).reduce((sum, badge) => sum + badge.levels.length, 0)
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const dataLoader = new DataLoader();
