#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–†–û–°–¢–û–ô –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–ê–†–°–ï–†
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ ai-data –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è
"""

import os
import json
import re
from pathlib import Path
from dataclasses import dataclass, asdict
from typing import List, Dict, Optional, Set
from datetime import datetime

@dataclass
class Badge:
    id: str
    title: str
    emoji: str
    category_id: str
    level: str
    description: Optional[str] = None
    importance: Optional[str] = None
    skill_tips: Optional[str] = None
    criteria: Optional[str] = None
    confirmation: Optional[str] = None
    subtasks: Optional[List['Badge']] = None

@dataclass
class Category:
    id: str
    title: str
    description: Optional[str] = None
    badge_count: int = 0
    expected_badges: int = 0

class SimpleCorrectParser:
    def __init__(self, ai_data_path: str, guide_file: str):
        self.ai_data_path = Path(ai_data_path)
        self.guide_file = guide_file
        self.categories: List[Category] = []
        self.badges: List[Badge] = []
        self.guide_content = ""
        
    def load_guide(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è"""
        try:
            with open(self.guide_file, 'r', encoding='utf-8') as f:
                self.guide_content = f.read()
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å: {len(self.guide_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª {self.guide_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        return True
    
    def extract_badge_info_from_guide(self, badge_id: str):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–Ω–∞—á–∫–µ –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è"""
        
        # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –∑–Ω–∞—á–∫–∞ - –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
        pattern = rf'{re.escape(badge_id)}\.?\s*–ó–Ω–∞—á–æ–∫\s*([^\s¬´]*)\s*¬´([^¬ª]+)¬ª'
        matches = list(re.finditer(pattern, self.guide_content))
        
        if not matches:
            return None
        
        # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ (–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç, –∞ –Ω–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ)
        match = matches[-1]
        
        emoji = match.group(1).strip() if match.group(1) else ""
        title = match.group(2)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ –∑–Ω–∞—á–∫–∞
        badge_start = match.start()
        
        # –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (–¶–µ–ª—å:) - –ø–æ—Å–ª–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
        desc_pattern = rf'–¶–µ–ª—å:\s*([^.\n]+(?:\.\s*[^.\n]+)*)'
        desc_match = re.search(desc_pattern, self.guide_content[badge_start:badge_start + 2000], re.DOTALL)
        description = desc_match.group(1).strip() if desc_match else ""
        
        # –ò—â–µ–º —Ä–∞–∑–¥–µ–ª "–ü–æ—á–µ–º—É —ç—Ç–æ—Ç –∑–Ω–∞—á–æ–∫ –≤–∞–∂–µ–Ω?" - –ø–æ—Å–ª–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
        importance_pattern = rf'–ü–æ—á–µ–º—É —ç—Ç–æ—Ç –∑–Ω–∞—á–æ–∫ –≤–∞–∂–µ–Ω\?\s*([^üí°]*?)(?=üí°|–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å|$)'
        importance_match = re.search(importance_pattern, self.guide_content[badge_start:badge_start + 2000], re.DOTALL)
        importance = ""
        if importance_match:
            importance_text = importance_match.group(1).strip()
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É–Ω–∫—Ç—ã —Å üîπ
            importance_points = re.findall(r'üîπ\s*([^üîπ\n]+)', importance_text)
            importance = '\n'.join([f"üîπ {point.strip()}" for point in importance_points])
        
        # –ò—â–µ–º —Ä–∞–∑–¥–µ–ª "üí° –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å..." - –ø–æ—Å–ª–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
        skill_tips_pattern = rf'üí°\s*–ö–∞–∫[^üìå]*?([^üìå]*?)(?=üìå|–ö–∞–∫ –∑–∞–∫—Ä–µ–ø–∏—Ç—å|–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å|$)'
        skill_tips_match = re.search(skill_tips_pattern, self.guide_content[badge_start:badge_start + 2000], re.DOTALL)
        skill_tips = ""
        if skill_tips_match:
            skill_tips_text = skill_tips_match.group(1).strip()
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É–Ω–∫—Ç—ã —Å üìå
            tips_points = re.findall(r'üìå\s*([^üìå\n]+)', skill_tips_text)
            if tips_points:
                skill_tips = f"üí° {skill_tips_text.split('üí°')[1].split('üìå')[0].strip() if 'üí°' in skill_tips_text else ''}\n" + '\n'.join([f"üìå {point.strip()}" for point in tips_points])
        
        # –ò—â–µ–º —Ä–∞–∑–¥–µ–ª "–ö–∞–∫ –∑–∞–∫—Ä–µ–ø–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç?" - –ø–æ—Å–ª–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
        consolidate_pattern = rf'–ö–∞–∫ –∑–∞–∫—Ä–µ–ø–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç\?\s*([^üìå]*?)(?=üìå|–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å|$)'
        consolidate_match = re.search(consolidate_pattern, self.guide_content[badge_start:badge_start + 2000], re.DOTALL)
        consolidate_tips = ""
        if consolidate_match:
            consolidate_text = consolidate_match.group(1).strip()
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É–Ω–∫—Ç—ã —Å üìå
            consolidate_points = re.findall(r'üìå\s*([^üìå\n]+)', consolidate_text)
            if consolidate_points:
                consolidate_tips = "–ö–∞–∫ –∑–∞–∫—Ä–µ–ø–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç?\n" + '\n'.join([f"üìå {point.strip()}" for point in consolidate_points])
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º skill_tips –∏ consolidate_tips
        if consolidate_tips:
            skill_tips = skill_tips + "\n\n" + consolidate_tips if skill_tips else consolidate_tips
        
        # –ò—â–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ (–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–æ–∫) - –ø–æ—Å–ª–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
        criteria_pattern = rf'–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–æ–∫[^:]*:\s*([^üìé]*?)(?=üìé|–ß–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è|$)'
        criteria_match = re.search(criteria_pattern, self.guide_content[badge_start:badge_start + 2000], re.DOTALL)
        criteria = ""
        if criteria_match:
            criteria_text = criteria_match.group(1).strip()
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É–Ω–∫—Ç—ã —Å ‚úÖ
            criteria_points = re.findall(r'‚úÖ\s*([^‚úÖ\n]+)', criteria_text)
            if criteria_points:
                criteria = '\n'.join([f"‚úÖ {point.strip()}" for point in criteria_points])
        
        # –ò—â–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–ß–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è) - –ø–æ—Å–ª–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
        confirmation_pattern = rf'–ß–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è:\s*([^üìé]*?)(?=üìé|$)'
        confirmation_match = re.search(confirmation_pattern, self.guide_content[badge_start:badge_start + 2000], re.DOTALL)
        confirmation = ""
        if confirmation_match:
            confirmation_text = confirmation_match.group(1).strip()
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É–Ω–∫—Ç—ã —Å üìé
            confirmation_points = re.findall(r'üìé\s*([^üìé\n]+)', confirmation_text)
            if confirmation_points:
                confirmation = '\n'.join([f"üìé {point.strip()}" for point in confirmation_points])
        
        return {
            'title': title,
            'emoji': emoji,
            'description': description,
            'importance': importance,
            'skill_tips': skill_tips,
            'criteria': criteria,
            'confirmation': confirmation
        }
    
    def process_ai_data_file(self, file_path: Path):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª ai-data"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            badge_id = data.get('id', '')
            if not badge_id:
                print(f"‚ö†Ô∏è –ù–µ—Ç ID –≤ —Ñ–∞–π–ª–µ {file_path}")
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è
            guide_info = self.extract_badge_info_from_guide(badge_id)
            
            if not guide_info:
                print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è {badge_id} –≤ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª–µ")
                return None
            
            # –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–æ–∫
            badge = Badge(
                id=badge_id,
                title=guide_info['title'],
                emoji=guide_info['emoji'],
                category_id=data.get('categoryId', ''),
                level=data.get('level', '–û–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π'),
                description=guide_info['description'],
                importance=guide_info['importance'],
                skill_tips=guide_info['skill_tips'],
                criteria=guide_info['criteria'],
                confirmation=guide_info['confirmation']
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—É—Ä–æ–≤–Ω–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'levels' in data and data['levels']:
                badge.subtasks = []
                for level_data in data['levels']:
                    level_id = level_data.get('id', '')
                    if level_id:
                        level_guide_info = self.extract_badge_info_from_guide(level_id)
                        if level_guide_info:
                            subtask = Badge(
                                id=level_id,
                                title=level_guide_info['title'],
                                emoji=level_guide_info['emoji'],
                                category_id=data.get('categoryId', ''),
                                level=level_data.get('level', ''),
                                description=level_guide_info['description'],
                                importance=level_guide_info['importance'],
                                skill_tips=level_guide_info['skill_tips'],
                                criteria=level_guide_info['criteria'],
                                confirmation=level_guide_info['confirmation']
                            )
                            badge.subtasks.append(subtask)
            
            return badge
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
            return None
    
    def parse(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        if not self.load_guide():
            return None
        
        print(f"–ü–∞—Ä—Å–∏–Ω–≥ ai-data –∏–∑: {self.ai_data_path}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ ai-data
        for category_dir in self.ai_data_path.iterdir():
            if not category_dir.is_dir():
                continue
                
            print(f"\nüìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_dir.name}")
            
            # –°–æ–∑–¥–∞—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category_id = category_dir.name.split('-')[1] if '-' in category_dir.name else category_dir.name
            category = Category(
                id=category_id,
                title=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_id}",
                expected_badges=0
            )
            
            badge_count = 0
            for json_file in category_dir.glob('*.json'):
                if json_file.name == 'index.json':
                    continue
                    
                badge = self.process_ai_data_file(json_file)
                if badge:
                    self.badges.append(badge)
                    badge_count += 1
                    print(f"  ‚úÖ {badge.id}: {badge.title}")
            
            category.badge_count = badge_count
            self.categories.append(category)
        
        return self._create_output()
    
    def _create_output(self) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ JSON"""
        return {
            "metadata": {
                "total_categories": len(self.categories),
                "total_badges": len(self.badges),
                "source_file": self.guide_file,
                "parsed_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            },
            "categories": [asdict(cat) for cat in self.categories],
            "badges": [asdict(badge) for badge in self.badges]
        }

def main():
    parser = SimpleCorrectParser("ai-data", "–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å.txt")
    result = parser.parse()
    
    if result:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        output_file = "perfect_parsed_data_simple.json"
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        
        print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_file}")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {result['metadata']['total_categories']}")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–Ω–∞—á–∫–æ–≤: {result['metadata']['total_badges']}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")

if __name__ == "__main__":
    main()
