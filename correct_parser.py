import json
import re
from pathlib import Path
from datetime import datetime

class CorrectParser:
    def __init__(self, guide_file: str, ai_data_path: str):
        self.guide_file = guide_file
        self.ai_data_path = Path(ai_data_path)
        self.parsed_data = {
            "metadata": {
                "total_categories": 0,
                "total_badges": 0,
                "source_file": "–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å.txt + ai-data",
                "parsed_at": ""
            },
            "categories": [],
            "badges": []
        }
        
    def parse_guide_structure(self):
        """–ü–∞—Ä—Å–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –ø–∞—Ä—Å–µ—Ä–µ)"""
        with open(self.guide_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∑–Ω–∞—á–∫–∏
        category_pattern = r'(\d+)\.\s*–ö–∞—Ç–µ–≥–æ—Ä–∏—è\s*¬´([^¬ª]+)¬ª\s*‚Äî\s*(\d+)\s*–∑–Ω–∞—á–∫–æ–≤?\.'
        badge_pattern = r'(\d+\.\d+(?:\.\d+)?)\.\s*(?:–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å|–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å|–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å|–û–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π|–í—ã—Å—à–∏–π|–ö–∞—Ç–µ–≥–æ—Ä–∏—è \d+).*?‚Äì\s*([^¬´]+)\s*¬´([^¬ª]+)¬ª\s*([^\n]*)'
        
        categories = {}
        badges = []
        
        # –ü–∞—Ä—Å–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for match in re.finditer(category_pattern, content):
            cat_id = match.group(1)
            cat_title = match.group(2)
            expected_badges = int(match.group(3))
            
            categories[cat_id] = {
                "id": cat_id,
                "title": cat_title,
                "description": None,
                "badge_count": 0,
                "expected_badges": expected_badges
            }
        
        # –ü–∞—Ä—Å–∏–º –∑–Ω–∞—á–∫–∏
        for match in re.finditer(badge_pattern, content):
            badge_id = match.group(1)
            level = match.group(2).strip()
            emoji = match.group(3).strip()
            title = match.group(4).strip()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
            category_id = badge_id.split('.')[0]
            
            badge = {
                "id": badge_id,
                "title": title,
                "emoji": emoji,
                "category_id": category_id,
                "level": level,
                "description": None,
                "criteria": None
            }
            
            badges.append(badge)
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∑–Ω–∞—á–∫–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category_id in categories:
                categories[category_id]["badge_count"] += 1
        
        return categories, badges
    
    def load_ai_data(self, badge_id: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ ai-data —Ñ–∞–π–ª–∞"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
        category_id = badge_id.split('.')[0]
        ai_file = self.ai_data_path / f"category-{category_id}" / f"{badge_id}.json"
        
        if ai_file.exists():
            try:
                with open(ai_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return None
        return None
    
    def parse(self):
        print("–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è...")
        categories, badges = self.parse_guide_structure()
        
        print("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ ai-data...")
        for badge in badges:
            ai_data = self.load_ai_data(badge["id"])
            if ai_data:
                # –ó–∞–ø–æ–ª–Ω—è–µ–º description –∏ criteria –∏–∑ ai-data
                badge["description"] = ai_data.get("description", "")
                badge["criteria"] = ai_data.get("criteria", "")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å levels, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ subtasks
                if "levels" in ai_data and ai_data["levels"]:
                    badge["subtasks"] = []
                    for level in ai_data["levels"]:
                        subtask = {
                            "id": level.get("id", ""),
                            "title": level.get("title", ""),
                            "emoji": level.get("emoji", ""),
                            "category_id": badge["category_id"],
                            "level": level.get("level", ""),
                            "description": level.get("description", ""),
                            "criteria": level.get("criteria", ""),
                            "confirmation": level.get("confirmation", "")
                        }
                        badge["subtasks"].append(subtask)
            else:
                print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω ai-data —Ñ–∞–π–ª –¥–ª—è –∑–Ω–∞—á–∫–∞ {badge['id']}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        self.parsed_data["categories"] = list(categories.values())
        self.parsed_data["badges"] = badges
        self.parsed_data["metadata"]["total_categories"] = len(categories)
        self.parsed_data["metadata"]["total_badges"] = len(badges)
        self.parsed_data["metadata"]["parsed_at"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        return self.parsed_data

def main():
    parser = CorrectParser("–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å.txt", "ai-data")
    result = parser.parse()
    
    output_file = "perfect_parsed_data.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)
    
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_file}")
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {result['metadata']['total_categories']}")
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–Ω–∞—á–∫–æ–≤: {result['metadata']['total_badges']}")
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for cat in result["categories"]:
        status = "‚úÖ" if cat["badge_count"] == cat["expected_badges"] else "‚ùå"
        print(f"  {status} {cat['title']}: {cat['badge_count']}/{cat['expected_badges']} –∑–Ω–∞—á–∫–æ–≤")

if __name__ == "__main__":
    main()