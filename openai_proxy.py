#!/usr/bin/env python3
"""
OpenAI API Proxy Server
–û–±—Ö–æ–¥–∏—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è OpenAI API
"""

import os
import json
import asyncio
import aiohttp
from aiohttp import web, ClientSession
from aiohttp.web import Request, Response
import logging
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PROXY_URLS = [
    "https://api.openai-proxy.com/v1",  # –ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ–∫—Å–∏
    "https://openai-api-proxy.vercel.app/v1",  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–∫—Å–∏
    "https://api.openai.com/v1"  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π API (–µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç)
]

# –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç)
FALLBACK_RESPONSES = {
    "–ø—Ä–∏–≤–µ—Ç": "–ü—Ä–∏–≤–µ—Ç! –Ø –ù–µ–π—Ä–æ–í–∞–ª—é—à–∞, —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –≤–æ–∂–∞—Ç—ã–π! –ö–∞–∫ –¥–µ–ª–∞? üòä",
    "–∫–∞—Ç–µ–≥–æ—Ä–∏–∏": "–£ –Ω–∞—Å –µ—Å—Ç—å 14 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–Ω–∞—á–∫–æ–≤! –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–∫–æ–π-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π?",
    "–∑–Ω–∞—á–∫–∏": "–í —Å–∏—Å—Ç–µ–º–µ '–†–µ–∞–ª—å–Ω–æ–≥–æ –õ–∞–≥–µ—Ä—è' –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤! –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
    "–ø–æ–º–æ—â—å": "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ –∑–Ω–∞—á–∫–æ–≤! –°–ø—Ä–∞—à–∏–≤–∞–π —á—Ç–æ —É–≥–æ–¥–Ω–æ! üåü"
}

class OpenAIProxy:
    def __init__(self):
        self.session = None
        
    async def init_session(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP —Å–µ—Å—Å–∏–∏"""
        if not self.session:
            self.session = ClientSession()
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.session:
            await self.session.close()
    
    def get_fallback_response(self, data):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            messages = data.get('messages', [])
            if messages:
                last_message = messages[-1]
                user_text = last_message.get('content', '').lower()
                
                # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç
                for key, response in FALLBACK_RESPONSES.items():
                    if key in user_text:
                        return web.json_response({
                            "choices": [{
                                "message": {
                                    "content": response,
                                    "role": "assistant"
                                }
                            }]
                        })
            
            # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
            return web.json_response({
                "choices": [{
                    "message": {
                        "content": "–ü—Ä–∏–≤–µ—Ç! –Ø –ù–µ–π—Ä–æ–í–∞–ª—é—à–∞! üåü –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ AI, –Ω–æ —è –≤—Å–µ —Ä–∞–≤–Ω–æ –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —Å–∏—Å—Ç–µ–º–æ–π –∑–Ω–∞—á–∫–æ–≤ '–†–µ–∞–ª—å–Ω–æ–≥–æ –õ–∞–≥–µ—Ä—è'! –°–ø—Ä–∞—à–∏–≤–∞–π!",
                        "role": "assistant"
                    }
                }]
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ fallback –æ—Ç–≤–µ—Ç–µ: {e}")
            return web.json_response({
                "choices": [{
                    "message": {
                        "content": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!",
                        "role": "assistant"
                    }
                }]
            })
    
    async def proxy_request(self, request: Request) -> Response:
        """–ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI API"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            data = await request.json()
            headers = dict(request.headers)
            
            # –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
            headers.pop('host', None)
            headers.pop('content-length', None)
            
            # –î–æ–±–∞–≤–ª—è–µ–º API –∫–ª—é—á
            headers['Authorization'] = f'Bearer {OPENAI_API_KEY}'
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ URL
            for proxy_url in PROXY_URLS:
                try:
                    logger.info(f"–ü—Ä–æ–±—É–µ–º –ø—Ä–æ–∫—Å–∏: {proxy_url}")
                    
                    async with self.session.post(
                        f"{proxy_url}/chat/completions",
                        json=data,
                        headers=headers,
                        timeout=aiohttp.ClientTimeout(total=30)
                    ) as response:
                        
                        if response.status == 200:
                            result = await response.json()
                            logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {proxy_url}")
                            return web.json_response(result)
                        else:
                            error_text = await response.text()
                            logger.warning(f"–û—à–∏–±–∫–∞ {response.status} –æ—Ç {proxy_url}: {error_text}")
                            continue
                            
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {proxy_url}: {e}")
                    continue
            
            # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –æ—Ç–≤–µ—Ç—ã
            logger.info("–í—Å–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –æ—Ç–≤–µ—Ç—ã")
            return self.get_fallback_response(data)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return web.json_response(
                {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"}, 
                status=500
            )

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–∫—Å–∏
proxy = OpenAIProxy()

async def handle_chat_completions(request: Request) -> Response:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /v1/chat/completions"""
    return await proxy.proxy_request(request)

async def handle_health(request: Request) -> Response:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–∫—Å–∏"""
    return web.json_response({
        "status": "healthy",
        "service": "OpenAI API Proxy",
        "openai_key_configured": bool(OPENAI_API_KEY)
    })

async def init_app():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    await proxy.init_session()
    
    app = web.Application()
    
    # –ú–∞—Ä—à—Ä—É—Ç—ã
    app.router.add_post('/v1/chat/completions', handle_chat_completions)
    app.router.add_get('/health', handle_health)
    app.router.add_get('/', handle_health)
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    app.on_cleanup.append(proxy.cleanup)
    
    return app

def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞"""
    if not OPENAI_API_KEY:
        logger.error("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ OpenAI API Proxy...")
    logger.info(f"üì° –ü—Ä–æ–∫—Å–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://localhost:8080")
    logger.info(f"üîë API –∫–ª—é—á: {'*' * 20}{OPENAI_API_KEY[-4:]}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    web.run_app(init_app(), host='0.0.0.0', port=8080)

if __name__ == "__main__":
    main()
