#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–µ—Ç –µ–¥–∏–Ω—ã–π JSON —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ø–∞–ø–∫–∏ ai-data/
–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Vercel API
"""

import json
import os
from pathlib import Path

def load_ai_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–ø–∫–∏ ai-data/"""
    ai_data_path = Path("ai-data")
    
    if not ai_data_path.exists():
        print("‚ùå –ü–∞–ø–∫–∞ ai-data –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return None
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º MASTER_INDEX
    master_index_path = ai_data_path / "MASTER_INDEX.json"
    if not master_index_path.exists():
        print("‚ùå MASTER_INDEX.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    
    with open(master_index_path, 'r', encoding='utf-8') as f:
        master_index = json.load(f)
    
    print(f"‚úÖ MASTER_INDEX –∑–∞–≥—Ä—É–∂–µ–Ω: {master_index['totalCategories']} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, {master_index['totalBadges']} –∑–Ω–∞—á–∫–æ–≤")
    
    categories = []
    badges = []
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for category_info in master_index['categories']:
        category_path = ai_data_path / category_info['path']
        category_index_path = category_path / "index.json"
        
        if not category_index_path.exists():
            print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω {category_index_path}")
            continue
        
        with open(category_index_path, 'r', encoding='utf-8') as f:
            category_data = json.load(f)
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = {
            "id": category_info['id'],
            "title": category_info['title'],
            "emoji": category_info['emoji'],
            "path": category_info['path'],
            "badge_count": category_data.get('badges', 0),
            "introduction": None,
            "philosophy": None,
            "badges": []
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–Ω–∞—á–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for badge_info in category_data.get('badgesData', []):
            badge = {
                "id": badge_info['id'],
                "title": badge_info['title'],
                "emoji": badge_info['emoji'],
                "category_id": category_info['id'],
                "category_title": category_info['title'],
                "levels": badge_info.get('levels', []),
                "description": f"{badge_info['title']} - –∑–Ω–∞—á–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category_info['title']}\"",
                "criteria": f"–ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–∫–∞ \"{badge_info['title']}\"",
                "benefits": f"–ü–æ–ª—å–∑–∞ –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–∫–∞ \"{badge_info['title']}\""
            }
            
            category['badges'].append(badge)
            badges.append(badge)
        
        categories.append(category)
        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_info['id']}: {category_info['title']} ({len(category['badges'])} –∑–Ω–∞—á–∫–æ–≤)")
    
    # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö
    result = {
        "categories": categories,
        "badges": badges,
        "totalCategories": len(categories),
        "totalBadges": len(badges),
        "totalLevels": sum(len(badge['levels']) for badge in badges),
        "version": "2.0.0",
        "source": "ai-data",
        "created": "2025-01-09"
    }
    
    print(f"\n‚úÖ –ò—Ç–æ–≥–æ —Å–æ–∑–¥–∞–Ω–æ:")
    print(f"   üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {result['totalCategories']}")
    print(f"   üèÜ –ó–Ω–∞—á–∫–æ–≤: {result['totalBadges']}")
    print(f"   üìä –£—Ä–æ–≤–Ω–µ–π: {result['totalLevels']}")
    
    return result

def main():
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ ai_data_complete.json –∏–∑ –ø–∞–ø–∫–∏ ai-data/...\n")
    
    data = load_ai_data()
    if not data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    output_file = "ai_data_complete.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    
    file_size = os.path.getsize(output_file) / 1024 / 1024
    print(f"\n‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
    print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.2f} MB")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    print(f"\nüìã –ü–µ—Ä–≤—ã–µ 3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    for i, category in enumerate(data['categories'][:3]):
        print(f"   {i+1}. {category['emoji']} {category['title']} ({category['badge_count']} –∑–Ω–∞—á–∫–æ–≤)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–æ–∫ "–í–∞–ª—é—à–∞"
    valusha = next((b for b in data['badges'] if b['id'] == '1.1'), None)
    if valusha:
        print(f"\n‚úÖ –ó–Ω–∞—á–æ–∫ '–í–∞–ª—é—à–∞' –Ω–∞–π–¥–µ–Ω: {valusha['title']} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{valusha['category_title']}'")
    else:
        print(f"\n‚ùå –ó–Ω–∞—á–æ–∫ '–í–∞–ª—é—à–∞' –ù–ï –Ω–∞–π–¥–µ–Ω!")

if __name__ == "__main__":
    main()
