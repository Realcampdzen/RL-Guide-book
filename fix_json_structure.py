#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import re

def fix_json_structure():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON —Ñ–∞–π–ª–∞, –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É—è markdown"""
    
    print("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞...")
    
    # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    with open('chatbot/perfect_parsed_data1.json', 'r', encoding='utf-8') as f:
        content = f.read()
    
    print(f"–§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ JSON –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç –∑–Ω–∞—á–∫–∞)
    json_start = content.find('{\n  "id": "1.1"')
    
    if json_start == -1:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞—á–∞–ª–æ JSON –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º markdown –∫–æ–Ω—Ç–µ–Ω—Ç
    markdown_content = content[:json_start].strip()
    
    # –ù–∞—Ö–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—É—é JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π } –∫–æ—Ç–æ—Ä—ã–π –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    last_brace = content.rfind('}')
    if last_brace == -1:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω–µ—Ü JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    main_json_content = content[json_start:last_brace + 1]
    
    # –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    try:
        main_data = json.loads(main_json_content)
        print(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    new_structure = {
        "metadata": {
            "title": "–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å –†–µ–∞–ª—å–Ω–æ–≥–æ –õ–∞–≥–µ—Ä—è - –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            "version": "2.0",
            "lastUpdated": "2024-12-19",
            "description": "–ü–æ–ª–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∑–Ω–∞—á–∫–æ–≤ –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è –†–µ–∞–ª—å–Ω–æ–≥–æ –õ–∞–≥–µ—Ä—è",
            "sourceFile": "perfect_parsed_data1.json"
        },
        "categoryDescription": {
            "id": "1",
            "title": "–ö–ê–¢–ï–ì–û–†–ò–Ø 1: –ó–ê –õ–ò–ß–ù–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø",
            "content": markdown_content,
            "markdownLength": len(markdown_content)
        },
        "badges": main_data if isinstance(main_data, list) else main_data.get('badges', [])
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
    if isinstance(main_data, dict):
        if 'additional_materials' in main_data:
            new_structure['additional_materials'] = main_data['additional_materials']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    output_file = 'perfect_parsed_data_integrated.json'
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(new_structure, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {output_file}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    try:
        with open(output_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        print("‚úÖ –ù–æ–≤—ã–π —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   - –í—Å–µ–≥–æ –∑–Ω–∞—á–∫–æ–≤: {len(data['badges'])}")
        print(f"   - –†–∞–∑–º–µ—Ä markdown: {len(data['categoryDescription']['content'])} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(json.dumps(data, ensure_ascii=False))} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–∫–æ–≤
        if data['badges']:
            print(f"   - –ü–µ—Ä–≤—ã–π –∑–Ω–∞—á–æ–∫: {data['badges'][0].get('title', 'N/A')}")
            if len(data['badges']) > 1:
                print(f"   - –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–Ω–∞—á–æ–∫: {data['badges'][-1].get('title', 'N/A')}")
                
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–æ–≤–æ–º —Ñ–∞–π–ª–µ: {e}")

if __name__ == "__main__":
    fix_json_structure()
