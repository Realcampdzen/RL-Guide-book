#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞—á–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è
"""

import json
import re
from pathlib import Path

def load_guidebook():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å"""
    with open('–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å.txt', 'r', encoding='utf-8') as f:
        return f.read()

def load_correct_badges():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–Ω–∞—á–∫–æ–≤"""
    with open('all_correct_badges.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def extract_badge_content_from_guidebook(content, badge_id):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–Ω–∞—á–∫–∞ –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è"""
    # –ò—â–µ–º —Å–µ–∫—Ü–∏—é –∑–Ω–∞—á–∫–∞
    pattern = rf'{badge_id}\s+–ó–Ω–∞—á–æ–∫\s+([^\s]+)\s+¬´([^¬ª]+)¬ª\.\s*([^üí°\n]+?)(?=\n\n|\nüí°|\n\d+\.\d+\.\d+\.|$)'
    match = re.search(pattern, content, re.DOTALL)
    
    if not match:
        return None
    
    emoji = match.group(1)
    title = match.group(2)
    description = match.group(3).strip()
    
    # –ò—â–µ–º –ø—Ä–∏–º–µ—Ä—ã
    examples_pattern = rf'üí°\s+–ü—Ä–∏–º–µ—Ä—ã[^:]*:\s*([^1\.\d]+?)(?=\n\d+\.\d+\.\d+\.|$)'
    examples_match = re.search(examples_pattern, content, re.DOTALL)
    examples = examples_match.group(1).strip() if examples_match else ""
    
    # –ò—â–µ–º —É—Ä–æ–≤–Ω–∏
    levels = []
    level_pattern = rf'{badge_id}\.(\d+)\s*\.\s*([^‚Äì]+)\s*‚Äì\s*([^\s]+)\s*¬´([^¬ª]+)¬ª'
    level_matches = re.finditer(level_pattern, content)
    
    for match in level_matches:
        level_num = match.group(1)
        level_name = match.group(2).strip()
        level_emoji = match.group(3)
        level_title = match.group(4)
        
        # –ò—â–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è
        criteria_pattern = rf'{badge_id}\.{level_num}\.\s*[^‚Äì]+‚Äì\s*[^\s]+\s*¬´[^¬ª]+¬ª\s*\n([^üìé]+?)(?=üìé|$)'
        criteria_match = re.search(criteria_pattern, content, re.DOTALL)
        criteria = criteria_match.group(1).strip() if criteria_match else ""
        
        confirmation_pattern = rf'üìé\s*([^üìé]+?)(?=üìé|\n\d+\.\d+\.\d+\.|$)'
        confirmation_match = re.search(confirmation_pattern, content, re.DOTALL)
        confirmation = confirmation_match.group(1).strip() if confirmation_match else ""
        
        levels.append({
            'id': f"{badge_id}.{level_num}",
            'level': level_name,
            'title': level_title,
            'emoji': level_emoji,
            'criteria': criteria,
            'confirmation': confirmation
        })
    
    return {
        'id': badge_id,
        'title': title,
        'emoji': emoji,
        'description': description,
        'examples': examples,
        'levels': levels
    }

def create_badge_file(badge_data, category_id):
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –∑–Ω–∞—á–∫–∞"""
    category_dir = Path(f"ai-data/category-{category_id}")
    category_dir.mkdir(exist_ok=True)
    
    badge_file = category_dir / f"{badge_data['id']}.json"
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
    badge_json = {
        "id": badge_data['id'],
        "title": badge_data['title'],
        "emoji": badge_data['emoji'],
        "categoryId": category_id,
        "description": f"–¶–µ–ª—å: {badge_data['description']}",
        "levels": badge_data['levels']
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
    if badge_data['examples']:
        badge_json['examples'] = f"üí° –ü—Ä–∏–º–µ—Ä—ã:\n{badge_data['examples']}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è
    badge_json['importance'] = "üîπ –†–∞–∑–≤–∏–≤–∞–µ—Ç –≤–∞–∂–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞.\nüîπ –ü–æ–º–æ–≥–∞–µ—Ç –≤ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–º —Ä–æ—Å—Ç–µ.\nüîπ –°–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç–µ."
    badge_json['skillTips'] = "üí° –ö–∞–∫ —Ä–∞–∑–≤–∏—Ç—å –Ω–∞–≤—ã–∫?\nüìå –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∑–Ω–∞–Ω–∏—è.\nüìå –ü–æ–ª—É—á–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç –≤–æ–∂–∞—Ç—ã—Ö –∏ —Å–≤–µ—Ä—Å—Ç–Ω–∏–∫–æ–≤.\nüìå –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ü–µ–ª–∏."
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    with open(badge_file, 'w', encoding='utf-8') as f:
        json.dump(badge_json, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {badge_file}")
    return badge_file

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞—á–∫–æ–≤...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    guidebook_content = load_guidebook()
    correct_badges = load_correct_badges()
    
    # –ù–∞—Ö–æ–¥–∏–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–∫–∏
    existing_files = []
    ai_data_path = Path("ai-data")
    
    for category_dir in ai_data_path.glob("category-*"):
        if not category_dir.is_dir():
            continue
            
        for badge_file in category_dir.glob("*.json"):
            if badge_file.name == "index.json":
                continue
            existing_files.append(badge_file.stem)
    
    missing_badges = [badge for badge in correct_badges if badge['id'] not in existing_files]
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(missing_badges)} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞—á–∫–æ–≤:")
    for badge in missing_badges:
        print(f"   - {badge['id']} {badge['emoji']} ¬´{badge['title']}¬ª")
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–∫–∏
    created_count = 0
    for badge in missing_badges:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è
            badge_content = extract_badge_content_from_guidebook(guidebook_content, badge['id'])
            
            if badge_content:
                category_id = badge['id'].split('.')[0]
                create_badge_file(badge_content, category_id)
                created_count += 1
            else:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è {badge['id']}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {badge['id']}: {e}")
    
    print(f"\nüéâ –°–æ–∑–¥–∞–Ω–æ {created_count} –∏–∑ {len(missing_badges)} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞—á–∫–æ–≤!")

if __name__ == "__main__":
    main()
